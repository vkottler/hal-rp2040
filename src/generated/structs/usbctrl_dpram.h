/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/USBCTRL_DPRAM_EP0_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP0_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP10_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP10_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP10_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP10_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP11_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP11_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP11_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP11_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP12_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP12_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP12_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP12_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP13_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP13_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP13_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP13_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP14_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP14_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP14_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP14_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP15_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP15_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP15_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP15_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP1_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP1_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP1_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP1_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP2_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP2_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP2_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP2_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP3_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP3_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP3_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP3_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP4_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP4_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP4_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP4_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP5_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP5_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP5_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP5_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP6_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP6_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP6_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP6_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP7_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP7_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP7_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP7_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP8_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP8_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP8_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP8_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP9_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP9_IN_CONTROL_ENDPOINT_TYPE.h"
#include "../enums/USBCTRL_DPRAM_EP9_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET.h"
#include "../enums/USBCTRL_DPRAM_EP9_OUT_CONTROL_ENDPOINT_TYPE.h"
#include "../ifgen/common.h"

namespace RP2040
{

/**
 * DPRAM layout for USB device.
 */
struct [[gnu::packed]] usbctrl_dpram
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1; /*!< usbctrl_dpram's identifier. */
    static constexpr std::size_t size =
        256; /*!< usbctrl_dpram's size in bytes. */

    /* Fields. */
    uint32_t SETUP_PACKET_LOW;  /*!< (read-write) Bytes 0-3 of the SETUP packet
                                   from the host. */
    uint32_t SETUP_PACKET_HIGH; /*!< (read-write) Bytes 4-7 of the setup packet
                                   from the host. */
    uint32_t EP1_IN_CONTROL;
    uint32_t EP1_OUT_CONTROL;
    uint32_t EP2_IN_CONTROL;
    uint32_t EP2_OUT_CONTROL;
    uint32_t EP3_IN_CONTROL;
    uint32_t EP3_OUT_CONTROL;
    uint32_t EP4_IN_CONTROL;
    uint32_t EP4_OUT_CONTROL;
    uint32_t EP5_IN_CONTROL;
    uint32_t EP5_OUT_CONTROL;
    uint32_t EP6_IN_CONTROL;
    uint32_t EP6_OUT_CONTROL;
    uint32_t EP7_IN_CONTROL;
    uint32_t EP7_OUT_CONTROL;
    uint32_t EP8_IN_CONTROL;
    uint32_t EP8_OUT_CONTROL;
    uint32_t EP9_IN_CONTROL;
    uint32_t EP9_OUT_CONTROL;
    uint32_t EP10_IN_CONTROL;
    uint32_t EP10_OUT_CONTROL;
    uint32_t EP11_IN_CONTROL;
    uint32_t EP11_OUT_CONTROL;
    uint32_t EP12_IN_CONTROL;
    uint32_t EP12_OUT_CONTROL;
    uint32_t EP13_IN_CONTROL;
    uint32_t EP13_OUT_CONTROL;
    uint32_t EP14_IN_CONTROL;
    uint32_t EP14_OUT_CONTROL;
    uint32_t EP15_IN_CONTROL;
    uint32_t EP15_OUT_CONTROL;
    uint32_t EP0_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP0_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP1_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP1_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP2_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP2_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP3_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP3_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP4_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP4_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP5_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP5_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP6_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP6_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP7_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP7_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP8_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP8_OUT_BUFFER_CONTROL;     /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
              valid if the endpoint is in double buffered mode. */
    uint32_t EP9_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
              buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
              Fields ending in a _0 are for buffer 0. Buffer 1 controls are
              only valid if the endpoint is in double buffered mode. */
    uint32_t
        EP9_OUT_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
          buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
          Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
          valid if the endpoint is in double buffered mode. */
    uint32_t
        EP10_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
          buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
          Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
          valid if the endpoint is in double buffered mode. */
    uint32_t
        EP10_OUT_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
           buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
           Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
           valid if the endpoint is in double buffered mode. */
    uint32_t
        EP11_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
          buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
          Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
          valid if the endpoint is in double buffered mode. */
    uint32_t
        EP11_OUT_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
           buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
           Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
           valid if the endpoint is in double buffered mode. */
    uint32_t
        EP12_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
          buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
          Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
          valid if the endpoint is in double buffered mode. */
    uint32_t
        EP12_OUT_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
           buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
           Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
           valid if the endpoint is in double buffered mode. */
    uint32_t
        EP13_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
          buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
          Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
          valid if the endpoint is in double buffered mode. */
    uint32_t
        EP13_OUT_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
           buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
           Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
           valid if the endpoint is in double buffered mode. */
    uint32_t
        EP14_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
          buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
          Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
          valid if the endpoint is in double buffered mode. */
    uint32_t
        EP14_OUT_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
           buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
           Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
           valid if the endpoint is in double buffered mode. */
    uint32_t
        EP15_IN_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
          buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
          Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
          valid if the endpoint is in double buffered mode. */
    uint32_t
        EP15_OUT_BUFFER_CONTROL; /*!< (read-write) Buffer control for both
           buffers of an endpoint. Fields ending in a _1 are for buffer 1.\n
           Fields ending in a _0 are for buffer 0. Buffer 1 controls are only
           valid if the endpoint is in double buffered mode. */

    /* Methods. */

    /**
     * Get SETUP_PACKET_LOW's BMREQUESTTYPE field.
     */
    uint8_t get_SETUP_PACKET_LOW_BMREQUESTTYPE()
    {
        return (SETUP_PACKET_LOW >> 0u) & 0b11111111u;
    }

    /**
     * Set SETUP_PACKET_LOW's BMREQUESTTYPE field.
     */
    inline void set_SETUP_PACKET_LOW_BMREQUESTTYPE(uint8_t value)
    {
        uint32_t curr = SETUP_PACKET_LOW;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SETUP_PACKET_LOW = curr;
    }

    /**
     * Get SETUP_PACKET_LOW's BREQUEST field.
     */
    uint8_t get_SETUP_PACKET_LOW_BREQUEST()
    {
        return (SETUP_PACKET_LOW >> 8u) & 0b11111111u;
    }

    /**
     * Set SETUP_PACKET_LOW's BREQUEST field.
     */
    inline void set_SETUP_PACKET_LOW_BREQUEST(uint8_t value)
    {
        uint32_t curr = SETUP_PACKET_LOW;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SETUP_PACKET_LOW = curr;
    }

    /**
     * Get SETUP_PACKET_LOW's WVALUE field.
     */
    uint16_t get_SETUP_PACKET_LOW_WVALUE()
    {
        return (SETUP_PACKET_LOW >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set SETUP_PACKET_LOW's WVALUE field.
     */
    inline void set_SETUP_PACKET_LOW_WVALUE(uint16_t value)
    {
        uint32_t curr = SETUP_PACKET_LOW;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        SETUP_PACKET_LOW = curr;
    }

    /**
     * Get SETUP_PACKET_HIGH's WINDEX field.
     */
    uint16_t get_SETUP_PACKET_HIGH_WINDEX()
    {
        return (SETUP_PACKET_HIGH >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SETUP_PACKET_HIGH's WINDEX field.
     */
    inline void set_SETUP_PACKET_HIGH_WINDEX(uint16_t value)
    {
        uint32_t curr = SETUP_PACKET_HIGH;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SETUP_PACKET_HIGH = curr;
    }

    /**
     * Get SETUP_PACKET_HIGH's WLENGTH field.
     */
    uint16_t get_SETUP_PACKET_HIGH_WLENGTH()
    {
        return (SETUP_PACKET_HIGH >> 16u) & 0b1111111111111111u;
    }

    /**
     * Set SETUP_PACKET_HIGH's WLENGTH field.
     */
    inline void set_SETUP_PACKET_HIGH_WLENGTH(uint16_t value)
    {
        uint32_t curr = SETUP_PACKET_HIGH;

        curr &= ~(0b1111111111111111u << 16u);
        curr |= (value & 0b1111111111111111u) << 16u;

        SETUP_PACKET_HIGH = curr;
    }

    /**
     * Get EP1_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP1_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP1_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP1_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP1_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP1_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP1_IN_CONTROL = curr;
    }

    /**
     * Get EP1_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP1_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP1_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP1_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP1_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP1_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP1_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP1_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP1_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP1_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP1_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP1_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP1_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP1_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP1_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP1_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP1_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP1_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP1_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP1_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP1_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP1_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP1_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP1_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP1_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP1_IN_CONTROL_ENDPOINT_TYPE
    get_EP1_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP1_IN_CONTROL_ENDPOINT_TYPE(
            (EP1_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP1_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP1_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP1_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP1_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP1_IN_CONTROL = curr;
    }

    /**
     * Get EP1_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP1_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP1_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP1_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP1_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP1_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP1_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP1_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP1_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP1_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP1_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP1_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP1_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP1_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP1_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP1_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP1_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP1_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP1_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP1_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP1_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP1_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP1_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP1_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP1_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP1_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP1_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP1_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP1_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP1_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP1_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP1_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP1_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP1_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP1_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP1_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP1_IN_CONTROL's ENABLE bit.
     */
    bool get_EP1_IN_CONTROL_ENABLE()
    {
        return EP1_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP1_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP1_IN_CONTROL_ENABLE()
    {
        EP1_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP1_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP1_IN_CONTROL_ENABLE()
    {
        EP1_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP1_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP1_IN_CONTROL_ENABLE()
    {
        EP1_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP1_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP1_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP1_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP1_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP1_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP1_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP1_OUT_CONTROL = curr;
    }

    /**
     * Get EP1_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP1_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP1_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP1_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP1_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP1_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP1_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP1_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP1_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP1_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP1_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP1_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP1_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP1_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP1_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP1_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP1_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP1_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP1_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP1_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP1_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP1_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP1_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP1_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP1_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP1_OUT_CONTROL_ENDPOINT_TYPE
    get_EP1_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP1_OUT_CONTROL_ENDPOINT_TYPE(
            (EP1_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP1_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP1_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP1_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP1_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP1_OUT_CONTROL = curr;
    }

    /**
     * Get EP1_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP1_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP1_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP1_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP1_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP1_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP1_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP1_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP1_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP1_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP1_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP1_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP1_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP1_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP1_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP1_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP1_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP1_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP1_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP1_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP1_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP1_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP1_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP1_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP1_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP1_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP1_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP1_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP1_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP1_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP1_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP1_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP1_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP1_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP1_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP1_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP1_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP1_OUT_CONTROL_ENABLE()
    {
        return EP1_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP1_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP1_OUT_CONTROL_ENABLE()
    {
        EP1_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP1_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP1_OUT_CONTROL_ENABLE()
    {
        EP1_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP1_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP1_OUT_CONTROL_ENABLE()
    {
        EP1_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP2_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP2_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP2_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP2_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP2_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP2_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP2_IN_CONTROL = curr;
    }

    /**
     * Get EP2_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP2_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP2_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP2_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP2_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP2_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP2_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP2_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP2_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP2_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP2_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP2_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP2_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP2_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP2_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP2_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP2_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP2_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP2_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP2_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP2_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP2_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP2_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP2_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP2_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP2_IN_CONTROL_ENDPOINT_TYPE
    get_EP2_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP2_IN_CONTROL_ENDPOINT_TYPE(
            (EP2_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP2_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP2_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP2_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP2_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP2_IN_CONTROL = curr;
    }

    /**
     * Get EP2_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP2_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP2_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP2_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP2_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP2_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP2_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP2_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP2_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP2_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP2_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP2_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP2_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP2_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP2_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP2_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP2_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP2_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP2_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP2_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP2_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP2_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP2_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP2_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP2_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP2_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP2_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP2_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP2_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP2_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP2_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP2_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP2_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP2_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP2_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP2_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP2_IN_CONTROL's ENABLE bit.
     */
    bool get_EP2_IN_CONTROL_ENABLE()
    {
        return EP2_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP2_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP2_IN_CONTROL_ENABLE()
    {
        EP2_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP2_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP2_IN_CONTROL_ENABLE()
    {
        EP2_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP2_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP2_IN_CONTROL_ENABLE()
    {
        EP2_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP2_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP2_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP2_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP2_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP2_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP2_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP2_OUT_CONTROL = curr;
    }

    /**
     * Get EP2_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP2_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP2_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP2_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP2_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP2_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP2_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP2_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP2_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP2_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP2_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP2_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP2_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP2_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP2_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP2_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP2_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP2_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP2_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP2_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP2_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP2_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP2_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP2_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP2_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP2_OUT_CONTROL_ENDPOINT_TYPE
    get_EP2_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP2_OUT_CONTROL_ENDPOINT_TYPE(
            (EP2_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP2_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP2_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP2_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP2_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP2_OUT_CONTROL = curr;
    }

    /**
     * Get EP2_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP2_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP2_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP2_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP2_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP2_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP2_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP2_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP2_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP2_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP2_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP2_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP2_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP2_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP2_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP2_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP2_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP2_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP2_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP2_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP2_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP2_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP2_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP2_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP2_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP2_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP2_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP2_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP2_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP2_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP2_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP2_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP2_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP2_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP2_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP2_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP2_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP2_OUT_CONTROL_ENABLE()
    {
        return EP2_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP2_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP2_OUT_CONTROL_ENABLE()
    {
        EP2_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP2_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP2_OUT_CONTROL_ENABLE()
    {
        EP2_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP2_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP2_OUT_CONTROL_ENABLE()
    {
        EP2_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP3_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP3_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP3_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP3_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP3_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP3_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP3_IN_CONTROL = curr;
    }

    /**
     * Get EP3_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP3_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP3_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP3_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP3_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP3_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP3_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP3_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP3_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP3_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP3_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP3_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP3_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP3_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP3_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP3_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP3_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP3_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP3_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP3_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP3_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP3_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP3_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP3_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP3_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP3_IN_CONTROL_ENDPOINT_TYPE
    get_EP3_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP3_IN_CONTROL_ENDPOINT_TYPE(
            (EP3_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP3_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP3_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP3_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP3_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP3_IN_CONTROL = curr;
    }

    /**
     * Get EP3_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP3_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP3_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP3_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP3_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP3_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP3_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP3_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP3_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP3_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP3_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP3_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP3_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP3_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP3_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP3_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP3_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP3_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP3_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP3_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP3_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP3_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP3_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP3_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP3_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP3_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP3_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP3_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP3_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP3_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP3_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP3_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP3_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP3_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP3_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP3_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP3_IN_CONTROL's ENABLE bit.
     */
    bool get_EP3_IN_CONTROL_ENABLE()
    {
        return EP3_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP3_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP3_IN_CONTROL_ENABLE()
    {
        EP3_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP3_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP3_IN_CONTROL_ENABLE()
    {
        EP3_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP3_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP3_IN_CONTROL_ENABLE()
    {
        EP3_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP3_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP3_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP3_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP3_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP3_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP3_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP3_OUT_CONTROL = curr;
    }

    /**
     * Get EP3_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP3_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP3_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP3_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP3_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP3_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP3_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP3_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP3_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP3_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP3_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP3_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP3_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP3_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP3_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP3_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP3_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP3_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP3_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP3_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP3_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP3_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP3_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP3_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP3_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP3_OUT_CONTROL_ENDPOINT_TYPE
    get_EP3_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP3_OUT_CONTROL_ENDPOINT_TYPE(
            (EP3_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP3_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP3_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP3_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP3_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP3_OUT_CONTROL = curr;
    }

    /**
     * Get EP3_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP3_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP3_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP3_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP3_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP3_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP3_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP3_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP3_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP3_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP3_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP3_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP3_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP3_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP3_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP3_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP3_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP3_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP3_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP3_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP3_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP3_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP3_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP3_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP3_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP3_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP3_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP3_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP3_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP3_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP3_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP3_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP3_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP3_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP3_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP3_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP3_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP3_OUT_CONTROL_ENABLE()
    {
        return EP3_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP3_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP3_OUT_CONTROL_ENABLE()
    {
        EP3_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP3_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP3_OUT_CONTROL_ENABLE()
    {
        EP3_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP3_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP3_OUT_CONTROL_ENABLE()
    {
        EP3_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP4_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP4_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP4_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP4_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP4_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP4_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP4_IN_CONTROL = curr;
    }

    /**
     * Get EP4_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP4_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP4_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP4_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP4_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP4_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP4_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP4_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP4_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP4_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP4_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP4_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP4_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP4_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP4_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP4_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP4_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP4_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP4_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP4_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP4_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP4_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP4_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP4_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP4_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP4_IN_CONTROL_ENDPOINT_TYPE
    get_EP4_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP4_IN_CONTROL_ENDPOINT_TYPE(
            (EP4_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP4_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP4_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP4_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP4_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP4_IN_CONTROL = curr;
    }

    /**
     * Get EP4_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP4_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP4_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP4_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP4_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP4_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP4_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP4_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP4_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP4_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP4_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP4_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP4_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP4_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP4_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP4_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP4_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP4_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP4_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP4_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP4_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP4_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP4_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP4_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP4_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP4_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP4_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP4_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP4_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP4_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP4_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP4_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP4_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP4_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP4_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP4_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP4_IN_CONTROL's ENABLE bit.
     */
    bool get_EP4_IN_CONTROL_ENABLE()
    {
        return EP4_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP4_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP4_IN_CONTROL_ENABLE()
    {
        EP4_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP4_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP4_IN_CONTROL_ENABLE()
    {
        EP4_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP4_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP4_IN_CONTROL_ENABLE()
    {
        EP4_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP4_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP4_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP4_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP4_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP4_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP4_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP4_OUT_CONTROL = curr;
    }

    /**
     * Get EP4_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP4_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP4_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP4_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP4_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP4_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP4_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP4_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP4_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP4_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP4_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP4_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP4_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP4_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP4_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP4_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP4_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP4_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP4_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP4_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP4_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP4_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP4_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP4_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP4_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP4_OUT_CONTROL_ENDPOINT_TYPE
    get_EP4_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP4_OUT_CONTROL_ENDPOINT_TYPE(
            (EP4_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP4_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP4_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP4_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP4_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP4_OUT_CONTROL = curr;
    }

    /**
     * Get EP4_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP4_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP4_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP4_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP4_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP4_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP4_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP4_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP4_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP4_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP4_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP4_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP4_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP4_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP4_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP4_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP4_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP4_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP4_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP4_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP4_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP4_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP4_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP4_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP4_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP4_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP4_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP4_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP4_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP4_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP4_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP4_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP4_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP4_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP4_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP4_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP4_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP4_OUT_CONTROL_ENABLE()
    {
        return EP4_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP4_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP4_OUT_CONTROL_ENABLE()
    {
        EP4_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP4_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP4_OUT_CONTROL_ENABLE()
    {
        EP4_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP4_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP4_OUT_CONTROL_ENABLE()
    {
        EP4_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP5_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP5_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP5_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP5_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP5_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP5_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP5_IN_CONTROL = curr;
    }

    /**
     * Get EP5_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP5_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP5_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP5_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP5_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP5_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP5_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP5_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP5_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP5_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP5_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP5_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP5_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP5_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP5_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP5_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP5_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP5_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP5_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP5_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP5_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP5_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP5_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP5_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP5_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP5_IN_CONTROL_ENDPOINT_TYPE
    get_EP5_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP5_IN_CONTROL_ENDPOINT_TYPE(
            (EP5_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP5_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP5_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP5_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP5_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP5_IN_CONTROL = curr;
    }

    /**
     * Get EP5_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP5_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP5_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP5_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP5_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP5_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP5_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP5_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP5_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP5_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP5_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP5_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP5_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP5_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP5_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP5_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP5_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP5_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP5_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP5_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP5_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP5_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP5_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP5_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP5_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP5_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP5_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP5_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP5_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP5_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP5_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP5_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP5_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP5_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP5_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP5_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP5_IN_CONTROL's ENABLE bit.
     */
    bool get_EP5_IN_CONTROL_ENABLE()
    {
        return EP5_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP5_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP5_IN_CONTROL_ENABLE()
    {
        EP5_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP5_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP5_IN_CONTROL_ENABLE()
    {
        EP5_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP5_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP5_IN_CONTROL_ENABLE()
    {
        EP5_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP5_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP5_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP5_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP5_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP5_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP5_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP5_OUT_CONTROL = curr;
    }

    /**
     * Get EP5_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP5_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP5_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP5_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP5_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP5_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP5_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP5_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP5_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP5_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP5_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP5_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP5_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP5_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP5_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP5_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP5_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP5_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP5_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP5_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP5_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP5_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP5_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP5_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP5_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP5_OUT_CONTROL_ENDPOINT_TYPE
    get_EP5_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP5_OUT_CONTROL_ENDPOINT_TYPE(
            (EP5_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP5_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP5_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP5_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP5_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP5_OUT_CONTROL = curr;
    }

    /**
     * Get EP5_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP5_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP5_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP5_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP5_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP5_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP5_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP5_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP5_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP5_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP5_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP5_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP5_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP5_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP5_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP5_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP5_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP5_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP5_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP5_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP5_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP5_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP5_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP5_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP5_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP5_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP5_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP5_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP5_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP5_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP5_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP5_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP5_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP5_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP5_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP5_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP5_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP5_OUT_CONTROL_ENABLE()
    {
        return EP5_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP5_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP5_OUT_CONTROL_ENABLE()
    {
        EP5_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP5_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP5_OUT_CONTROL_ENABLE()
    {
        EP5_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP5_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP5_OUT_CONTROL_ENABLE()
    {
        EP5_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP6_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP6_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP6_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP6_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP6_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP6_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP6_IN_CONTROL = curr;
    }

    /**
     * Get EP6_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP6_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP6_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP6_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP6_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP6_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP6_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP6_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP6_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP6_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP6_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP6_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP6_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP6_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP6_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP6_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP6_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP6_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP6_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP6_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP6_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP6_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP6_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP6_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP6_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP6_IN_CONTROL_ENDPOINT_TYPE
    get_EP6_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP6_IN_CONTROL_ENDPOINT_TYPE(
            (EP6_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP6_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP6_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP6_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP6_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP6_IN_CONTROL = curr;
    }

    /**
     * Get EP6_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP6_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP6_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP6_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP6_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP6_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP6_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP6_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP6_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP6_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP6_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP6_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP6_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP6_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP6_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP6_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP6_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP6_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP6_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP6_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP6_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP6_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP6_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP6_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP6_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP6_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP6_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP6_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP6_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP6_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP6_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP6_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP6_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP6_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP6_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP6_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP6_IN_CONTROL's ENABLE bit.
     */
    bool get_EP6_IN_CONTROL_ENABLE()
    {
        return EP6_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP6_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP6_IN_CONTROL_ENABLE()
    {
        EP6_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP6_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP6_IN_CONTROL_ENABLE()
    {
        EP6_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP6_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP6_IN_CONTROL_ENABLE()
    {
        EP6_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP6_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP6_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP6_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP6_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP6_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP6_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP6_OUT_CONTROL = curr;
    }

    /**
     * Get EP6_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP6_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP6_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP6_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP6_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP6_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP6_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP6_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP6_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP6_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP6_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP6_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP6_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP6_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP6_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP6_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP6_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP6_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP6_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP6_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP6_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP6_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP6_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP6_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP6_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP6_OUT_CONTROL_ENDPOINT_TYPE
    get_EP6_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP6_OUT_CONTROL_ENDPOINT_TYPE(
            (EP6_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP6_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP6_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP6_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP6_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP6_OUT_CONTROL = curr;
    }

    /**
     * Get EP6_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP6_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP6_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP6_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP6_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP6_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP6_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP6_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP6_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP6_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP6_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP6_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP6_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP6_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP6_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP6_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP6_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP6_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP6_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP6_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP6_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP6_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP6_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP6_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP6_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP6_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP6_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP6_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP6_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP6_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP6_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP6_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP6_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP6_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP6_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP6_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP6_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP6_OUT_CONTROL_ENABLE()
    {
        return EP6_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP6_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP6_OUT_CONTROL_ENABLE()
    {
        EP6_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP6_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP6_OUT_CONTROL_ENABLE()
    {
        EP6_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP6_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP6_OUT_CONTROL_ENABLE()
    {
        EP6_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP7_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP7_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP7_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP7_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP7_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP7_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP7_IN_CONTROL = curr;
    }

    /**
     * Get EP7_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP7_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP7_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP7_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP7_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP7_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP7_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP7_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP7_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP7_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP7_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP7_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP7_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP7_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP7_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP7_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP7_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP7_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP7_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP7_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP7_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP7_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP7_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP7_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP7_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP7_IN_CONTROL_ENDPOINT_TYPE
    get_EP7_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP7_IN_CONTROL_ENDPOINT_TYPE(
            (EP7_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP7_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP7_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP7_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP7_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP7_IN_CONTROL = curr;
    }

    /**
     * Get EP7_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP7_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP7_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP7_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP7_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP7_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP7_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP7_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP7_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP7_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP7_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP7_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP7_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP7_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP7_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP7_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP7_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP7_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP7_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP7_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP7_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP7_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP7_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP7_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP7_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP7_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP7_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP7_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP7_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP7_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP7_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP7_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP7_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP7_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP7_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP7_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP7_IN_CONTROL's ENABLE bit.
     */
    bool get_EP7_IN_CONTROL_ENABLE()
    {
        return EP7_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP7_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP7_IN_CONTROL_ENABLE()
    {
        EP7_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP7_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP7_IN_CONTROL_ENABLE()
    {
        EP7_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP7_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP7_IN_CONTROL_ENABLE()
    {
        EP7_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP7_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP7_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP7_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP7_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP7_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP7_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP7_OUT_CONTROL = curr;
    }

    /**
     * Get EP7_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP7_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP7_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP7_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP7_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP7_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP7_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP7_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP7_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP7_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP7_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP7_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP7_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP7_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP7_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP7_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP7_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP7_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP7_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP7_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP7_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP7_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP7_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP7_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP7_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP7_OUT_CONTROL_ENDPOINT_TYPE
    get_EP7_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP7_OUT_CONTROL_ENDPOINT_TYPE(
            (EP7_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP7_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP7_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP7_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP7_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP7_OUT_CONTROL = curr;
    }

    /**
     * Get EP7_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP7_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP7_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP7_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP7_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP7_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP7_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP7_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP7_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP7_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP7_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP7_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP7_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP7_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP7_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP7_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP7_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP7_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP7_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP7_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP7_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP7_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP7_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP7_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP7_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP7_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP7_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP7_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP7_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP7_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP7_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP7_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP7_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP7_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP7_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP7_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP7_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP7_OUT_CONTROL_ENABLE()
    {
        return EP7_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP7_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP7_OUT_CONTROL_ENABLE()
    {
        EP7_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP7_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP7_OUT_CONTROL_ENABLE()
    {
        EP7_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP7_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP7_OUT_CONTROL_ENABLE()
    {
        EP7_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP8_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP8_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP8_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP8_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP8_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP8_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP8_IN_CONTROL = curr;
    }

    /**
     * Get EP8_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP8_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP8_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP8_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP8_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP8_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP8_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP8_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP8_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP8_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP8_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP8_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP8_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP8_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP8_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP8_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP8_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP8_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP8_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP8_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP8_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP8_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP8_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP8_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP8_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP8_IN_CONTROL_ENDPOINT_TYPE
    get_EP8_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP8_IN_CONTROL_ENDPOINT_TYPE(
            (EP8_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP8_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP8_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP8_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP8_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP8_IN_CONTROL = curr;
    }

    /**
     * Get EP8_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP8_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP8_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP8_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP8_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP8_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP8_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP8_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP8_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP8_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP8_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP8_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP8_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP8_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP8_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP8_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP8_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP8_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP8_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP8_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP8_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP8_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP8_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP8_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP8_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP8_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP8_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP8_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP8_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP8_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP8_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP8_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP8_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP8_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP8_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP8_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP8_IN_CONTROL's ENABLE bit.
     */
    bool get_EP8_IN_CONTROL_ENABLE()
    {
        return EP8_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP8_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP8_IN_CONTROL_ENABLE()
    {
        EP8_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP8_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP8_IN_CONTROL_ENABLE()
    {
        EP8_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP8_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP8_IN_CONTROL_ENABLE()
    {
        EP8_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP8_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP8_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP8_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP8_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP8_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP8_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP8_OUT_CONTROL = curr;
    }

    /**
     * Get EP8_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP8_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP8_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP8_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP8_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP8_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP8_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP8_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP8_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP8_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP8_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP8_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP8_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP8_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP8_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP8_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP8_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP8_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP8_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP8_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP8_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP8_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP8_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP8_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP8_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP8_OUT_CONTROL_ENDPOINT_TYPE
    get_EP8_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP8_OUT_CONTROL_ENDPOINT_TYPE(
            (EP8_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP8_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP8_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP8_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP8_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP8_OUT_CONTROL = curr;
    }

    /**
     * Get EP8_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP8_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP8_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP8_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP8_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP8_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP8_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP8_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP8_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP8_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP8_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP8_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP8_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP8_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP8_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP8_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP8_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP8_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP8_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP8_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP8_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP8_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP8_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP8_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP8_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP8_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP8_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP8_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP8_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP8_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP8_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP8_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP8_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP8_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP8_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP8_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP8_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP8_OUT_CONTROL_ENABLE()
    {
        return EP8_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP8_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP8_OUT_CONTROL_ENABLE()
    {
        EP8_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP8_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP8_OUT_CONTROL_ENABLE()
    {
        EP8_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP8_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP8_OUT_CONTROL_ENABLE()
    {
        EP8_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP9_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP9_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP9_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP9_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP9_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP9_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP9_IN_CONTROL = curr;
    }

    /**
     * Get EP9_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP9_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP9_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP9_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP9_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP9_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP9_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP9_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP9_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP9_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP9_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP9_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP9_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP9_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP9_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP9_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP9_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP9_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP9_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP9_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP9_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP9_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP9_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP9_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP9_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP9_IN_CONTROL_ENDPOINT_TYPE
    get_EP9_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP9_IN_CONTROL_ENDPOINT_TYPE(
            (EP9_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP9_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP9_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP9_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP9_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP9_IN_CONTROL = curr;
    }

    /**
     * Get EP9_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP9_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP9_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP9_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP9_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP9_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP9_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP9_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP9_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP9_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP9_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP9_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP9_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP9_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP9_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP9_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP9_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP9_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP9_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP9_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP9_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP9_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP9_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP9_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP9_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP9_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP9_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP9_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP9_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP9_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP9_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP9_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP9_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP9_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP9_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP9_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP9_IN_CONTROL's ENABLE bit.
     */
    bool get_EP9_IN_CONTROL_ENABLE()
    {
        return EP9_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP9_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP9_IN_CONTROL_ENABLE()
    {
        EP9_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP9_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP9_IN_CONTROL_ENABLE()
    {
        EP9_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP9_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP9_IN_CONTROL_ENABLE()
    {
        EP9_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP9_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP9_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP9_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP9_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP9_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP9_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP9_OUT_CONTROL = curr;
    }

    /**
     * Get EP9_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP9_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP9_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP9_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP9_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP9_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP9_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP9_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP9_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP9_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP9_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP9_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP9_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP9_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP9_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP9_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP9_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP9_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP9_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP9_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP9_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP9_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP9_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP9_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP9_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP9_OUT_CONTROL_ENDPOINT_TYPE
    get_EP9_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP9_OUT_CONTROL_ENDPOINT_TYPE(
            (EP9_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP9_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP9_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP9_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP9_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP9_OUT_CONTROL = curr;
    }

    /**
     * Get EP9_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP9_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP9_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP9_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP9_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP9_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP9_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP9_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP9_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP9_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP9_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP9_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP9_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP9_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP9_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP9_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP9_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP9_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP9_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP9_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP9_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP9_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP9_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP9_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP9_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP9_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP9_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP9_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP9_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP9_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP9_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP9_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP9_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP9_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP9_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP9_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP9_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP9_OUT_CONTROL_ENABLE()
    {
        return EP9_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP9_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP9_OUT_CONTROL_ENABLE()
    {
        EP9_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP9_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP9_OUT_CONTROL_ENABLE()
    {
        EP9_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP9_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP9_OUT_CONTROL_ENABLE()
    {
        EP9_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP10_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP10_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP10_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP10_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP10_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP10_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP10_IN_CONTROL = curr;
    }

    /**
     * Get EP10_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP10_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP10_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP10_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP10_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP10_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP10_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP10_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP10_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP10_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP10_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP10_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP10_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP10_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP10_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP10_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP10_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP10_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP10_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP10_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP10_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP10_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP10_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP10_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP10_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP10_IN_CONTROL_ENDPOINT_TYPE
    get_EP10_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP10_IN_CONTROL_ENDPOINT_TYPE(
            (EP10_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP10_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP10_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP10_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP10_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP10_IN_CONTROL = curr;
    }

    /**
     * Get EP10_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP10_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP10_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP10_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP10_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP10_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP10_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP10_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP10_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP10_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP10_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP10_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP10_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP10_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP10_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP10_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP10_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP10_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP10_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP10_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP10_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP10_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP10_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP10_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP10_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP10_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP10_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP10_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP10_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP10_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP10_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP10_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP10_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP10_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP10_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP10_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP10_IN_CONTROL's ENABLE bit.
     */
    bool get_EP10_IN_CONTROL_ENABLE()
    {
        return EP10_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP10_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP10_IN_CONTROL_ENABLE()
    {
        EP10_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP10_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP10_IN_CONTROL_ENABLE()
    {
        EP10_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP10_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP10_IN_CONTROL_ENABLE()
    {
        EP10_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP10_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP10_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP10_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP10_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP10_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP10_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP10_OUT_CONTROL = curr;
    }

    /**
     * Get EP10_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP10_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP10_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP10_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP10_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP10_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP10_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP10_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP10_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP10_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP10_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP10_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP10_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP10_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP10_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP10_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP10_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP10_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP10_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP10_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP10_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP10_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP10_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP10_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP10_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP10_OUT_CONTROL_ENDPOINT_TYPE
    get_EP10_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP10_OUT_CONTROL_ENDPOINT_TYPE(
            (EP10_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP10_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP10_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP10_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP10_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP10_OUT_CONTROL = curr;
    }

    /**
     * Get EP10_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP10_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP10_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP10_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP10_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP10_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP10_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP10_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP10_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP10_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP10_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP10_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP10_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP10_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP10_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP10_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP10_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP10_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP10_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP10_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP10_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP10_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP10_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP10_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP10_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP10_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP10_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP10_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP10_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP10_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP10_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP10_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP10_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP10_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP10_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP10_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP10_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP10_OUT_CONTROL_ENABLE()
    {
        return EP10_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP10_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP10_OUT_CONTROL_ENABLE()
    {
        EP10_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP10_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP10_OUT_CONTROL_ENABLE()
    {
        EP10_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP10_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP10_OUT_CONTROL_ENABLE()
    {
        EP10_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP11_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP11_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP11_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP11_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP11_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP11_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP11_IN_CONTROL = curr;
    }

    /**
     * Get EP11_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP11_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP11_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP11_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP11_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP11_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP11_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP11_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP11_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP11_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP11_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP11_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP11_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP11_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP11_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP11_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP11_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP11_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP11_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP11_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP11_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP11_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP11_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP11_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP11_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP11_IN_CONTROL_ENDPOINT_TYPE
    get_EP11_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP11_IN_CONTROL_ENDPOINT_TYPE(
            (EP11_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP11_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP11_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP11_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP11_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP11_IN_CONTROL = curr;
    }

    /**
     * Get EP11_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP11_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP11_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP11_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP11_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP11_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP11_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP11_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP11_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP11_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP11_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP11_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP11_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP11_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP11_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP11_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP11_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP11_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP11_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP11_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP11_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP11_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP11_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP11_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP11_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP11_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP11_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP11_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP11_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP11_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP11_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP11_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP11_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP11_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP11_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP11_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP11_IN_CONTROL's ENABLE bit.
     */
    bool get_EP11_IN_CONTROL_ENABLE()
    {
        return EP11_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP11_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP11_IN_CONTROL_ENABLE()
    {
        EP11_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP11_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP11_IN_CONTROL_ENABLE()
    {
        EP11_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP11_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP11_IN_CONTROL_ENABLE()
    {
        EP11_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP11_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP11_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP11_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP11_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP11_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP11_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP11_OUT_CONTROL = curr;
    }

    /**
     * Get EP11_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP11_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP11_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP11_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP11_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP11_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP11_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP11_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP11_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP11_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP11_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP11_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP11_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP11_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP11_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP11_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP11_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP11_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP11_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP11_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP11_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP11_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP11_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP11_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP11_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP11_OUT_CONTROL_ENDPOINT_TYPE
    get_EP11_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP11_OUT_CONTROL_ENDPOINT_TYPE(
            (EP11_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP11_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP11_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP11_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP11_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP11_OUT_CONTROL = curr;
    }

    /**
     * Get EP11_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP11_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP11_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP11_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP11_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP11_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP11_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP11_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP11_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP11_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP11_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP11_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP11_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP11_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP11_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP11_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP11_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP11_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP11_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP11_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP11_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP11_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP11_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP11_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP11_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP11_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP11_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP11_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP11_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP11_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP11_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP11_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP11_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP11_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP11_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP11_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP11_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP11_OUT_CONTROL_ENABLE()
    {
        return EP11_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP11_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP11_OUT_CONTROL_ENABLE()
    {
        EP11_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP11_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP11_OUT_CONTROL_ENABLE()
    {
        EP11_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP11_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP11_OUT_CONTROL_ENABLE()
    {
        EP11_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP12_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP12_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP12_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP12_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP12_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP12_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP12_IN_CONTROL = curr;
    }

    /**
     * Get EP12_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP12_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP12_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP12_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP12_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP12_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP12_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP12_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP12_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP12_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP12_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP12_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP12_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP12_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP12_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP12_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP12_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP12_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP12_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP12_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP12_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP12_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP12_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP12_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP12_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP12_IN_CONTROL_ENDPOINT_TYPE
    get_EP12_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP12_IN_CONTROL_ENDPOINT_TYPE(
            (EP12_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP12_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP12_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP12_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP12_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP12_IN_CONTROL = curr;
    }

    /**
     * Get EP12_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP12_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP12_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP12_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP12_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP12_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP12_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP12_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP12_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP12_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP12_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP12_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP12_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP12_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP12_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP12_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP12_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP12_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP12_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP12_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP12_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP12_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP12_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP12_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP12_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP12_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP12_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP12_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP12_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP12_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP12_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP12_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP12_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP12_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP12_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP12_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP12_IN_CONTROL's ENABLE bit.
     */
    bool get_EP12_IN_CONTROL_ENABLE()
    {
        return EP12_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP12_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP12_IN_CONTROL_ENABLE()
    {
        EP12_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP12_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP12_IN_CONTROL_ENABLE()
    {
        EP12_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP12_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP12_IN_CONTROL_ENABLE()
    {
        EP12_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP12_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP12_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP12_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP12_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP12_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP12_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP12_OUT_CONTROL = curr;
    }

    /**
     * Get EP12_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP12_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP12_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP12_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP12_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP12_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP12_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP12_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP12_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP12_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP12_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP12_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP12_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP12_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP12_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP12_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP12_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP12_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP12_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP12_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP12_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP12_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP12_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP12_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP12_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP12_OUT_CONTROL_ENDPOINT_TYPE
    get_EP12_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP12_OUT_CONTROL_ENDPOINT_TYPE(
            (EP12_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP12_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP12_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP12_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP12_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP12_OUT_CONTROL = curr;
    }

    /**
     * Get EP12_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP12_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP12_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP12_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP12_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP12_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP12_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP12_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP12_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP12_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP12_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP12_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP12_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP12_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP12_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP12_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP12_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP12_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP12_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP12_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP12_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP12_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP12_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP12_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP12_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP12_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP12_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP12_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP12_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP12_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP12_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP12_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP12_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP12_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP12_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP12_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP12_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP12_OUT_CONTROL_ENABLE()
    {
        return EP12_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP12_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP12_OUT_CONTROL_ENABLE()
    {
        EP12_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP12_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP12_OUT_CONTROL_ENABLE()
    {
        EP12_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP12_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP12_OUT_CONTROL_ENABLE()
    {
        EP12_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP13_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP13_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP13_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP13_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP13_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP13_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP13_IN_CONTROL = curr;
    }

    /**
     * Get EP13_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP13_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP13_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP13_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP13_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP13_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP13_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP13_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP13_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP13_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP13_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP13_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP13_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP13_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP13_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP13_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP13_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP13_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP13_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP13_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP13_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP13_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP13_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP13_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP13_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP13_IN_CONTROL_ENDPOINT_TYPE
    get_EP13_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP13_IN_CONTROL_ENDPOINT_TYPE(
            (EP13_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP13_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP13_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP13_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP13_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP13_IN_CONTROL = curr;
    }

    /**
     * Get EP13_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP13_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP13_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP13_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP13_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP13_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP13_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP13_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP13_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP13_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP13_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP13_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP13_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP13_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP13_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP13_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP13_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP13_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP13_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP13_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP13_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP13_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP13_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP13_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP13_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP13_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP13_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP13_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP13_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP13_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP13_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP13_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP13_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP13_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP13_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP13_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP13_IN_CONTROL's ENABLE bit.
     */
    bool get_EP13_IN_CONTROL_ENABLE()
    {
        return EP13_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP13_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP13_IN_CONTROL_ENABLE()
    {
        EP13_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP13_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP13_IN_CONTROL_ENABLE()
    {
        EP13_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP13_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP13_IN_CONTROL_ENABLE()
    {
        EP13_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP13_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP13_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP13_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP13_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP13_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP13_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP13_OUT_CONTROL = curr;
    }

    /**
     * Get EP13_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP13_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP13_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP13_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP13_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP13_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP13_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP13_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP13_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP13_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP13_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP13_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP13_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP13_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP13_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP13_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP13_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP13_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP13_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP13_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP13_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP13_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP13_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP13_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP13_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP13_OUT_CONTROL_ENDPOINT_TYPE
    get_EP13_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP13_OUT_CONTROL_ENDPOINT_TYPE(
            (EP13_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP13_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP13_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP13_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP13_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP13_OUT_CONTROL = curr;
    }

    /**
     * Get EP13_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP13_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP13_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP13_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP13_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP13_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP13_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP13_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP13_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP13_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP13_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP13_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP13_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP13_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP13_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP13_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP13_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP13_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP13_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP13_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP13_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP13_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP13_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP13_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP13_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP13_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP13_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP13_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP13_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP13_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP13_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP13_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP13_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP13_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP13_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP13_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP13_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP13_OUT_CONTROL_ENABLE()
    {
        return EP13_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP13_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP13_OUT_CONTROL_ENABLE()
    {
        EP13_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP13_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP13_OUT_CONTROL_ENABLE()
    {
        EP13_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP13_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP13_OUT_CONTROL_ENABLE()
    {
        EP13_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP14_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP14_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP14_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP14_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP14_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP14_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP14_IN_CONTROL = curr;
    }

    /**
     * Get EP14_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP14_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP14_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP14_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP14_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP14_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP14_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP14_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP14_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP14_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP14_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP14_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP14_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP14_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP14_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP14_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP14_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP14_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP14_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP14_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP14_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP14_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP14_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP14_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP14_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP14_IN_CONTROL_ENDPOINT_TYPE
    get_EP14_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP14_IN_CONTROL_ENDPOINT_TYPE(
            (EP14_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP14_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP14_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP14_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP14_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP14_IN_CONTROL = curr;
    }

    /**
     * Get EP14_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP14_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP14_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP14_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP14_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP14_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP14_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP14_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP14_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP14_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP14_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP14_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP14_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP14_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP14_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP14_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP14_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP14_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP14_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP14_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP14_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP14_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP14_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP14_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP14_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP14_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP14_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP14_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP14_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP14_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP14_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP14_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP14_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP14_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP14_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP14_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP14_IN_CONTROL's ENABLE bit.
     */
    bool get_EP14_IN_CONTROL_ENABLE()
    {
        return EP14_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP14_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP14_IN_CONTROL_ENABLE()
    {
        EP14_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP14_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP14_IN_CONTROL_ENABLE()
    {
        EP14_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP14_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP14_IN_CONTROL_ENABLE()
    {
        EP14_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP14_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP14_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP14_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP14_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP14_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP14_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP14_OUT_CONTROL = curr;
    }

    /**
     * Get EP14_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP14_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP14_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP14_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP14_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP14_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP14_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP14_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP14_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP14_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP14_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP14_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP14_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP14_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP14_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP14_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP14_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP14_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP14_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP14_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP14_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP14_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP14_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP14_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP14_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP14_OUT_CONTROL_ENDPOINT_TYPE
    get_EP14_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP14_OUT_CONTROL_ENDPOINT_TYPE(
            (EP14_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP14_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP14_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP14_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP14_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP14_OUT_CONTROL = curr;
    }

    /**
     * Get EP14_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP14_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP14_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP14_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP14_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP14_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP14_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP14_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP14_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP14_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP14_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP14_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP14_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP14_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP14_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP14_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP14_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP14_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP14_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP14_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP14_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP14_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP14_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP14_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP14_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP14_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP14_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP14_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP14_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP14_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP14_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP14_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP14_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP14_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP14_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP14_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP14_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP14_OUT_CONTROL_ENABLE()
    {
        return EP14_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP14_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP14_OUT_CONTROL_ENABLE()
    {
        EP14_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP14_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP14_OUT_CONTROL_ENABLE()
    {
        EP14_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP14_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP14_OUT_CONTROL_ENABLE()
    {
        EP14_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP15_IN_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP15_IN_CONTROL_BUFFER_ADDRESS()
    {
        return (EP15_IN_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP15_IN_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP15_IN_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP15_IN_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP15_IN_CONTROL = curr;
    }

    /**
     * Get EP15_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP15_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP15_IN_CONTROL & (1u << 16u);
    }

    /**
     * Set EP15_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP15_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP15_IN_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP15_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP15_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP15_IN_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP15_IN_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP15_IN_CONTROL_INTERRUPT_ON_NAK()
    {
        EP15_IN_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP15_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP15_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP15_IN_CONTROL & (1u << 17u);
    }

    /**
     * Set EP15_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP15_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP15_IN_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP15_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP15_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP15_IN_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP15_IN_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP15_IN_CONTROL_INTERRUPT_ON_STALL()
    {
        EP15_IN_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP15_IN_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP15_IN_CONTROL_ENDPOINT_TYPE
    get_EP15_IN_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP15_IN_CONTROL_ENDPOINT_TYPE(
            (EP15_IN_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP15_IN_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP15_IN_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP15_IN_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP15_IN_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP15_IN_CONTROL = curr;
    }

    /**
     * Get EP15_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP15_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP15_IN_CONTROL & (1u << 28u);
    }

    /**
     * Set EP15_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP15_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP15_IN_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP15_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP15_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP15_IN_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP15_IN_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP15_IN_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP15_IN_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP15_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP15_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP15_IN_CONTROL & (1u << 29u);
    }

    /**
     * Set EP15_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP15_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP15_IN_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP15_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP15_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP15_IN_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP15_IN_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP15_IN_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP15_IN_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP15_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP15_IN_CONTROL_DOUBLE_BUFFERED()
    {
        return EP15_IN_CONTROL & (1u << 30u);
    }

    /**
     * Set EP15_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP15_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP15_IN_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP15_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP15_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP15_IN_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP15_IN_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP15_IN_CONTROL_DOUBLE_BUFFERED()
    {
        EP15_IN_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP15_IN_CONTROL's ENABLE bit.
     */
    bool get_EP15_IN_CONTROL_ENABLE()
    {
        return EP15_IN_CONTROL & (1u << 31u);
    }

    /**
     * Set EP15_IN_CONTROL's ENABLE bit.
     */
    inline void set_EP15_IN_CONTROL_ENABLE()
    {
        EP15_IN_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP15_IN_CONTROL's ENABLE bit.
     */
    inline void clear_EP15_IN_CONTROL_ENABLE()
    {
        EP15_IN_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP15_IN_CONTROL's ENABLE bit.
     */
    inline void toggle_EP15_IN_CONTROL_ENABLE()
    {
        EP15_IN_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP15_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    uint16_t get_EP15_OUT_CONTROL_BUFFER_ADDRESS()
    {
        return (EP15_OUT_CONTROL >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set EP15_OUT_CONTROL's BUFFER_ADDRESS field.
     */
    inline void set_EP15_OUT_CONTROL_BUFFER_ADDRESS(uint16_t value)
    {
        uint32_t curr = EP15_OUT_CONTROL;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        EP15_OUT_CONTROL = curr;
    }

    /**
     * Get EP15_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    bool get_EP15_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        return EP15_OUT_CONTROL & (1u << 16u);
    }

    /**
     * Set EP15_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void set_EP15_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP15_OUT_CONTROL |= 1u << 16u;
    }

    /**
     * Clear EP15_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void clear_EP15_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP15_OUT_CONTROL &= ~(1u << 16u);
    }

    /**
     * Toggle EP15_OUT_CONTROL's INTERRUPT_ON_NAK bit.
     */
    inline void toggle_EP15_OUT_CONTROL_INTERRUPT_ON_NAK()
    {
        EP15_OUT_CONTROL ^= 1u << 16u;
    }

    /**
     * Get EP15_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    bool get_EP15_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        return EP15_OUT_CONTROL & (1u << 17u);
    }

    /**
     * Set EP15_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void set_EP15_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP15_OUT_CONTROL |= 1u << 17u;
    }

    /**
     * Clear EP15_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void clear_EP15_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP15_OUT_CONTROL &= ~(1u << 17u);
    }

    /**
     * Toggle EP15_OUT_CONTROL's INTERRUPT_ON_STALL bit.
     */
    inline void toggle_EP15_OUT_CONTROL_INTERRUPT_ON_STALL()
    {
        EP15_OUT_CONTROL ^= 1u << 17u;
    }

    /**
     * Get EP15_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    USBCTRL_DPRAM_EP15_OUT_CONTROL_ENDPOINT_TYPE
    get_EP15_OUT_CONTROL_ENDPOINT_TYPE()
    {
        return USBCTRL_DPRAM_EP15_OUT_CONTROL_ENDPOINT_TYPE(
            (EP15_OUT_CONTROL >> 26u) & 0b11u);
    }

    /**
     * Set EP15_OUT_CONTROL's ENDPOINT_TYPE field.
     */
    inline void set_EP15_OUT_CONTROL_ENDPOINT_TYPE(
        USBCTRL_DPRAM_EP15_OUT_CONTROL_ENDPOINT_TYPE value)
    {
        uint32_t curr = EP15_OUT_CONTROL;

        curr &= ~(0b11u << 26u);
        curr |= (std::to_underlying(value) & 0b11u) << 26u;

        EP15_OUT_CONTROL = curr;
    }

    /**
     * Get EP15_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    bool get_EP15_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        return EP15_OUT_CONTROL & (1u << 28u);
    }

    /**
     * Set EP15_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void set_EP15_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP15_OUT_CONTROL |= 1u << 28u;
    }

    /**
     * Clear EP15_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void clear_EP15_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP15_OUT_CONTROL &= ~(1u << 28u);
    }

    /**
     * Toggle EP15_OUT_CONTROL's INTERRUPT_PER_DOUBLE_BUFF bit.
     */
    inline void toggle_EP15_OUT_CONTROL_INTERRUPT_PER_DOUBLE_BUFF()
    {
        EP15_OUT_CONTROL ^= 1u << 28u;
    }

    /**
     * Get EP15_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    bool get_EP15_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        return EP15_OUT_CONTROL & (1u << 29u);
    }

    /**
     * Set EP15_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void set_EP15_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP15_OUT_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP15_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void clear_EP15_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP15_OUT_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP15_OUT_CONTROL's INTERRUPT_PER_BUFF bit.
     */
    inline void toggle_EP15_OUT_CONTROL_INTERRUPT_PER_BUFF()
    {
        EP15_OUT_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP15_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    bool get_EP15_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        return EP15_OUT_CONTROL & (1u << 30u);
    }

    /**
     * Set EP15_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void set_EP15_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP15_OUT_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP15_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void clear_EP15_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP15_OUT_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP15_OUT_CONTROL's DOUBLE_BUFFERED bit.
     */
    inline void toggle_EP15_OUT_CONTROL_DOUBLE_BUFFERED()
    {
        EP15_OUT_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP15_OUT_CONTROL's ENABLE bit.
     */
    bool get_EP15_OUT_CONTROL_ENABLE()
    {
        return EP15_OUT_CONTROL & (1u << 31u);
    }

    /**
     * Set EP15_OUT_CONTROL's ENABLE bit.
     */
    inline void set_EP15_OUT_CONTROL_ENABLE()
    {
        EP15_OUT_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP15_OUT_CONTROL's ENABLE bit.
     */
    inline void clear_EP15_OUT_CONTROL_ENABLE()
    {
        EP15_OUT_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP15_OUT_CONTROL's ENABLE bit.
     */
    inline void toggle_EP15_OUT_CONTROL_ENABLE()
    {
        EP15_OUT_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP0_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP0_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP0_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP0_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_STALL()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_STALL()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_STALL()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_STALL()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_RESET()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_RESET()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_RESET()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_RESET()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_PID_0()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_PID_0()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_PID_0()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_PID_0()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_LAST_0()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_LAST_0()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_LAST_0()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_FULL_0()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_FULL_0()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_FULL_0()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP0_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP0_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP0_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP0_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP0_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP0_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP0_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP0_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP0_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP0_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP0_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_PID_1()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_PID_1()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_PID_1()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_PID_1()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_LAST_1()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_LAST_1()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_LAST_1()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP0_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP0_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP0_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP0_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP0_IN_BUFFER_CONTROL_FULL_1()
    {
        EP0_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP0_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP0_IN_BUFFER_CONTROL_FULL_1()
    {
        EP0_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP0_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP0_IN_BUFFER_CONTROL_FULL_1()
    {
        EP0_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP0_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP0_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP0_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP0_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_STALL()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_STALL()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_STALL()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_STALL()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_RESET()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_RESET()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_RESET()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_RESET()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_PID_0()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_PID_0()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_PID_0()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP0_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP0_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP0_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP0_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP0_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP0_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP0_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP0_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP0_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP0_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP0_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_PID_1()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_PID_1()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_PID_1()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP0_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP0_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP0_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP0_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP0_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP0_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP0_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP0_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP0_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP0_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP0_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP0_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP1_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP1_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP1_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP1_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_STALL()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_STALL()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_STALL()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_STALL()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_RESET()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_RESET()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_RESET()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_RESET()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_PID_0()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_PID_0()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_PID_0()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_PID_0()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_LAST_0()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_LAST_0()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_LAST_0()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_FULL_0()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_FULL_0()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_FULL_0()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP1_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP1_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP1_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP1_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP1_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP1_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP1_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP1_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP1_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP1_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP1_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_PID_1()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_PID_1()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_PID_1()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_PID_1()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_LAST_1()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_LAST_1()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_LAST_1()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP1_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP1_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP1_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP1_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP1_IN_BUFFER_CONTROL_FULL_1()
    {
        EP1_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP1_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP1_IN_BUFFER_CONTROL_FULL_1()
    {
        EP1_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP1_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP1_IN_BUFFER_CONTROL_FULL_1()
    {
        EP1_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP1_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP1_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP1_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP1_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_STALL()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_STALL()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_STALL()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_STALL()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_RESET()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_RESET()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_RESET()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_RESET()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_PID_0()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_PID_0()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_PID_0()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP1_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP1_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP1_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP1_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP1_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP1_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP1_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP1_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP1_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP1_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP1_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_PID_1()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_PID_1()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_PID_1()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP1_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP1_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP1_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP1_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP1_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP1_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP1_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP1_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP1_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP1_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP1_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP1_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP2_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP2_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP2_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP2_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_STALL()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_STALL()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_STALL()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_STALL()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_RESET()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_RESET()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_RESET()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_RESET()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_PID_0()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_PID_0()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_PID_0()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_PID_0()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_LAST_0()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_LAST_0()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_LAST_0()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_FULL_0()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_FULL_0()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_FULL_0()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP2_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP2_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP2_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP2_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP2_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP2_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP2_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP2_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP2_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP2_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP2_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_PID_1()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_PID_1()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_PID_1()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_PID_1()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_LAST_1()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_LAST_1()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_LAST_1()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP2_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP2_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP2_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP2_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP2_IN_BUFFER_CONTROL_FULL_1()
    {
        EP2_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP2_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP2_IN_BUFFER_CONTROL_FULL_1()
    {
        EP2_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP2_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP2_IN_BUFFER_CONTROL_FULL_1()
    {
        EP2_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP2_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP2_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP2_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP2_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_STALL()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_STALL()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_STALL()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_STALL()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_RESET()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_RESET()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_RESET()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_RESET()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_PID_0()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_PID_0()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_PID_0()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP2_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP2_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP2_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP2_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP2_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP2_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP2_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP2_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP2_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP2_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP2_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_PID_1()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_PID_1()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_PID_1()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP2_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP2_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP2_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP2_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP2_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP2_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP2_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP2_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP2_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP2_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP2_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP2_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP3_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP3_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP3_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP3_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_STALL()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_STALL()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_STALL()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_STALL()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_RESET()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_RESET()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_RESET()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_RESET()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_PID_0()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_PID_0()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_PID_0()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_PID_0()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_LAST_0()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_LAST_0()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_LAST_0()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_FULL_0()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_FULL_0()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_FULL_0()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP3_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP3_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP3_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP3_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP3_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP3_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP3_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP3_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP3_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP3_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP3_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_PID_1()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_PID_1()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_PID_1()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_PID_1()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_LAST_1()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_LAST_1()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_LAST_1()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP3_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP3_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP3_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP3_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP3_IN_BUFFER_CONTROL_FULL_1()
    {
        EP3_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP3_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP3_IN_BUFFER_CONTROL_FULL_1()
    {
        EP3_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP3_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP3_IN_BUFFER_CONTROL_FULL_1()
    {
        EP3_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP3_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP3_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP3_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP3_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_STALL()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_STALL()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_STALL()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_STALL()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_RESET()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_RESET()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_RESET()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_RESET()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_PID_0()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_PID_0()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_PID_0()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP3_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP3_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP3_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP3_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP3_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP3_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP3_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP3_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP3_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP3_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP3_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_PID_1()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_PID_1()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_PID_1()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP3_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP3_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP3_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP3_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP3_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP3_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP3_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP3_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP3_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP3_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP3_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP3_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP4_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP4_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP4_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP4_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_STALL()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_STALL()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_STALL()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_STALL()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_RESET()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_RESET()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_RESET()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_RESET()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_PID_0()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_PID_0()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_PID_0()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_PID_0()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_LAST_0()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_LAST_0()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_LAST_0()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_FULL_0()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_FULL_0()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_FULL_0()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP4_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP4_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP4_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP4_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP4_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP4_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP4_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP4_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP4_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP4_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP4_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_PID_1()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_PID_1()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_PID_1()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_PID_1()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_LAST_1()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_LAST_1()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_LAST_1()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP4_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP4_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP4_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP4_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP4_IN_BUFFER_CONTROL_FULL_1()
    {
        EP4_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP4_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP4_IN_BUFFER_CONTROL_FULL_1()
    {
        EP4_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP4_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP4_IN_BUFFER_CONTROL_FULL_1()
    {
        EP4_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP4_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP4_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP4_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP4_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_STALL()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_STALL()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_STALL()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_STALL()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_RESET()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_RESET()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_RESET()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_RESET()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_PID_0()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_PID_0()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_PID_0()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP4_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP4_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP4_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP4_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP4_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP4_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP4_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP4_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP4_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP4_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP4_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_PID_1()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_PID_1()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_PID_1()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP4_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP4_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP4_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP4_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP4_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP4_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP4_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP4_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP4_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP4_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP4_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP4_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP5_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP5_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP5_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP5_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_STALL()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_STALL()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_STALL()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_STALL()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_RESET()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_RESET()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_RESET()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_RESET()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_PID_0()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_PID_0()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_PID_0()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_PID_0()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_LAST_0()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_LAST_0()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_LAST_0()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_FULL_0()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_FULL_0()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_FULL_0()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP5_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP5_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP5_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP5_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP5_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP5_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP5_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP5_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP5_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP5_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP5_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_PID_1()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_PID_1()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_PID_1()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_PID_1()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_LAST_1()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_LAST_1()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_LAST_1()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP5_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP5_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP5_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP5_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP5_IN_BUFFER_CONTROL_FULL_1()
    {
        EP5_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP5_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP5_IN_BUFFER_CONTROL_FULL_1()
    {
        EP5_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP5_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP5_IN_BUFFER_CONTROL_FULL_1()
    {
        EP5_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP5_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP5_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP5_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP5_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_STALL()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_STALL()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_STALL()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_STALL()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_RESET()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_RESET()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_RESET()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_RESET()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_PID_0()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_PID_0()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_PID_0()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP5_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP5_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP5_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP5_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP5_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP5_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP5_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP5_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP5_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP5_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP5_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_PID_1()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_PID_1()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_PID_1()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP5_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP5_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP5_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP5_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP5_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP5_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP5_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP5_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP5_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP5_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP5_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP5_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP6_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP6_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP6_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP6_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_STALL()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_STALL()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_STALL()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_STALL()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_RESET()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_RESET()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_RESET()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_RESET()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_PID_0()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_PID_0()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_PID_0()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_PID_0()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_LAST_0()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_LAST_0()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_LAST_0()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_FULL_0()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_FULL_0()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_FULL_0()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP6_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP6_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP6_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP6_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP6_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP6_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP6_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP6_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP6_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP6_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP6_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_PID_1()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_PID_1()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_PID_1()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_PID_1()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_LAST_1()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_LAST_1()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_LAST_1()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP6_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP6_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP6_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP6_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP6_IN_BUFFER_CONTROL_FULL_1()
    {
        EP6_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP6_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP6_IN_BUFFER_CONTROL_FULL_1()
    {
        EP6_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP6_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP6_IN_BUFFER_CONTROL_FULL_1()
    {
        EP6_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP6_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP6_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP6_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP6_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_STALL()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_STALL()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_STALL()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_STALL()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_RESET()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_RESET()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_RESET()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_RESET()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_PID_0()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_PID_0()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_PID_0()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP6_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP6_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP6_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP6_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP6_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP6_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP6_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP6_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP6_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP6_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP6_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_PID_1()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_PID_1()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_PID_1()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP6_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP6_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP6_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP6_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP6_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP6_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP6_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP6_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP6_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP6_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP6_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP6_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP7_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP7_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP7_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP7_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_STALL()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_STALL()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_STALL()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_STALL()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_RESET()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_RESET()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_RESET()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_RESET()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_PID_0()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_PID_0()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_PID_0()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_PID_0()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_LAST_0()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_LAST_0()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_LAST_0()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_FULL_0()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_FULL_0()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_FULL_0()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP7_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP7_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP7_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP7_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP7_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP7_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP7_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP7_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP7_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP7_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP7_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_PID_1()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_PID_1()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_PID_1()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_PID_1()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_LAST_1()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_LAST_1()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_LAST_1()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP7_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP7_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP7_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP7_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP7_IN_BUFFER_CONTROL_FULL_1()
    {
        EP7_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP7_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP7_IN_BUFFER_CONTROL_FULL_1()
    {
        EP7_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP7_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP7_IN_BUFFER_CONTROL_FULL_1()
    {
        EP7_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP7_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP7_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP7_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP7_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_STALL()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_STALL()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_STALL()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_STALL()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_RESET()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_RESET()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_RESET()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_RESET()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_PID_0()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_PID_0()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_PID_0()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP7_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP7_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP7_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP7_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP7_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP7_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP7_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP7_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP7_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP7_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP7_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_PID_1()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_PID_1()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_PID_1()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP7_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP7_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP7_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP7_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP7_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP7_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP7_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP7_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP7_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP7_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP7_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP7_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP8_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP8_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP8_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP8_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_STALL()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_STALL()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_STALL()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_STALL()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_RESET()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_RESET()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_RESET()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_RESET()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_PID_0()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_PID_0()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_PID_0()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_PID_0()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_LAST_0()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_LAST_0()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_LAST_0()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_FULL_0()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_FULL_0()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_FULL_0()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP8_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP8_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP8_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP8_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP8_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP8_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP8_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP8_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP8_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP8_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP8_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_PID_1()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_PID_1()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_PID_1()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_PID_1()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_LAST_1()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_LAST_1()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_LAST_1()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP8_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP8_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP8_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP8_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP8_IN_BUFFER_CONTROL_FULL_1()
    {
        EP8_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP8_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP8_IN_BUFFER_CONTROL_FULL_1()
    {
        EP8_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP8_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP8_IN_BUFFER_CONTROL_FULL_1()
    {
        EP8_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP8_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP8_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP8_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP8_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_STALL()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_STALL()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_STALL()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_STALL()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_RESET()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_RESET()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_RESET()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_RESET()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_PID_0()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_PID_0()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_PID_0()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP8_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP8_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP8_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP8_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP8_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP8_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP8_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP8_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP8_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP8_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP8_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_PID_1()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_PID_1()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_PID_1()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP8_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP8_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP8_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP8_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP8_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP8_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP8_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP8_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP8_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP8_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP8_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP8_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP9_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP9_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP9_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP9_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_STALL()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_STALL()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_STALL()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_STALL()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_RESET()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_RESET()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_RESET()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_RESET()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_PID_0()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_PID_0()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_PID_0()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_PID_0()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_LAST_0()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_LAST_0()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_LAST_0()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_FULL_0()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_FULL_0()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_FULL_0()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP9_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP9_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP9_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP9_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP9_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP9_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP9_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP9_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP9_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP9_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP9_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_PID_1()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_PID_1()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_PID_1()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_PID_1()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_LAST_1()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_LAST_1()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_LAST_1()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP9_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP9_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP9_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP9_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP9_IN_BUFFER_CONTROL_FULL_1()
    {
        EP9_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP9_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP9_IN_BUFFER_CONTROL_FULL_1()
    {
        EP9_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP9_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP9_IN_BUFFER_CONTROL_FULL_1()
    {
        EP9_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP9_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP9_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP9_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP9_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_STALL()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_STALL()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_STALL()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_STALL()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_RESET()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_RESET()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_RESET()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_RESET()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_PID_0()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_PID_0()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_PID_0()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP9_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP9_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP9_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP9_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP9_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP9_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP9_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP9_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP9_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP9_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP9_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_PID_1()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_PID_1()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_PID_1()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP9_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP9_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP9_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP9_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP9_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP9_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP9_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP9_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP9_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP9_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP9_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP9_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP10_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP10_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP10_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP10_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_STALL()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_STALL()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_STALL()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_STALL()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_RESET()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_RESET()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_RESET()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_RESET()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_PID_0()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_PID_0()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_PID_0()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_PID_0()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_LAST_0()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_LAST_0()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_LAST_0()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_FULL_0()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_FULL_0()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_FULL_0()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP10_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP10_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP10_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP10_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP10_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP10_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP10_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP10_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP10_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP10_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP10_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_PID_1()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_PID_1()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_PID_1()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_PID_1()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_LAST_1()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_LAST_1()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_LAST_1()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP10_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP10_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP10_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP10_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP10_IN_BUFFER_CONTROL_FULL_1()
    {
        EP10_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP10_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP10_IN_BUFFER_CONTROL_FULL_1()
    {
        EP10_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP10_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP10_IN_BUFFER_CONTROL_FULL_1()
    {
        EP10_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP10_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP10_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP10_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP10_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_STALL()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_STALL()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_STALL()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_STALL()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_RESET()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_RESET()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_RESET()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_RESET()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_PID_0()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_PID_0()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_PID_0()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP10_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP10_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP10_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP10_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP10_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP10_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP10_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP10_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP10_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP10_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP10_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_PID_1()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_PID_1()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_PID_1()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP10_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP10_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP10_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP10_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP10_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP10_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP10_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP10_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP10_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP10_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP10_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP10_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP11_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP11_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP11_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP11_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_STALL()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_STALL()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_STALL()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_STALL()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_RESET()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_RESET()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_RESET()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_RESET()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_PID_0()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_PID_0()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_PID_0()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_PID_0()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_LAST_0()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_LAST_0()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_LAST_0()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_FULL_0()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_FULL_0()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_FULL_0()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP11_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP11_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP11_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP11_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP11_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP11_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP11_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP11_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP11_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP11_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP11_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_PID_1()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_PID_1()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_PID_1()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_PID_1()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_LAST_1()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_LAST_1()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_LAST_1()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP11_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP11_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP11_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP11_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP11_IN_BUFFER_CONTROL_FULL_1()
    {
        EP11_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP11_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP11_IN_BUFFER_CONTROL_FULL_1()
    {
        EP11_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP11_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP11_IN_BUFFER_CONTROL_FULL_1()
    {
        EP11_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP11_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP11_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP11_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP11_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_STALL()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_STALL()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_STALL()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_STALL()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_RESET()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_RESET()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_RESET()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_RESET()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_PID_0()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_PID_0()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_PID_0()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP11_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP11_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP11_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP11_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP11_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP11_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP11_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP11_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP11_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP11_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP11_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_PID_1()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_PID_1()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_PID_1()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP11_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP11_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP11_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP11_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP11_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP11_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP11_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP11_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP11_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP11_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP11_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP11_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP12_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP12_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP12_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP12_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_STALL()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_STALL()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_STALL()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_STALL()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_RESET()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_RESET()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_RESET()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_RESET()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_PID_0()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_PID_0()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_PID_0()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_PID_0()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_LAST_0()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_LAST_0()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_LAST_0()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_FULL_0()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_FULL_0()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_FULL_0()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP12_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP12_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP12_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP12_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP12_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP12_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP12_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP12_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP12_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP12_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP12_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_PID_1()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_PID_1()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_PID_1()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_PID_1()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_LAST_1()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_LAST_1()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_LAST_1()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP12_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP12_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP12_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP12_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP12_IN_BUFFER_CONTROL_FULL_1()
    {
        EP12_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP12_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP12_IN_BUFFER_CONTROL_FULL_1()
    {
        EP12_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP12_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP12_IN_BUFFER_CONTROL_FULL_1()
    {
        EP12_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP12_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP12_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP12_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP12_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_STALL()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_STALL()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_STALL()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_STALL()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_RESET()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_RESET()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_RESET()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_RESET()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_PID_0()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_PID_0()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_PID_0()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP12_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP12_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP12_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP12_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP12_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP12_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP12_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP12_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP12_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP12_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP12_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_PID_1()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_PID_1()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_PID_1()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP12_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP12_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP12_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP12_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP12_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP12_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP12_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP12_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP12_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP12_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP12_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP12_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP13_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP13_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP13_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP13_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_STALL()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_STALL()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_STALL()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_STALL()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_RESET()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_RESET()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_RESET()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_RESET()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_PID_0()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_PID_0()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_PID_0()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_PID_0()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_LAST_0()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_LAST_0()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_LAST_0()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_FULL_0()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_FULL_0()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_FULL_0()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP13_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP13_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP13_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP13_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP13_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP13_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP13_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP13_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP13_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP13_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP13_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_PID_1()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_PID_1()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_PID_1()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_PID_1()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_LAST_1()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_LAST_1()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_LAST_1()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP13_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP13_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP13_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP13_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP13_IN_BUFFER_CONTROL_FULL_1()
    {
        EP13_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP13_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP13_IN_BUFFER_CONTROL_FULL_1()
    {
        EP13_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP13_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP13_IN_BUFFER_CONTROL_FULL_1()
    {
        EP13_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP13_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP13_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP13_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP13_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_STALL()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_STALL()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_STALL()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_STALL()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_RESET()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_RESET()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_RESET()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_RESET()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_PID_0()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_PID_0()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_PID_0()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP13_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP13_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP13_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP13_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP13_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP13_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP13_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP13_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP13_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP13_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP13_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_PID_1()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_PID_1()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_PID_1()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP13_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP13_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP13_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP13_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP13_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP13_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP13_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP13_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP13_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP13_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP13_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP13_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP14_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP14_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP14_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP14_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_STALL()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_STALL()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_STALL()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_STALL()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_RESET()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_RESET()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_RESET()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_RESET()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_PID_0()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_PID_0()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_PID_0()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_PID_0()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_LAST_0()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_LAST_0()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_LAST_0()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_FULL_0()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_FULL_0()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_FULL_0()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP14_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP14_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP14_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP14_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP14_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP14_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP14_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP14_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP14_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP14_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP14_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_PID_1()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_PID_1()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_PID_1()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_PID_1()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_LAST_1()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_LAST_1()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_LAST_1()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP14_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP14_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP14_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP14_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP14_IN_BUFFER_CONTROL_FULL_1()
    {
        EP14_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP14_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP14_IN_BUFFER_CONTROL_FULL_1()
    {
        EP14_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP14_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP14_IN_BUFFER_CONTROL_FULL_1()
    {
        EP14_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP14_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP14_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP14_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP14_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_STALL()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_STALL()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_STALL()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_STALL()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_RESET()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_RESET()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_RESET()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_RESET()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_PID_0()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_PID_0()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_PID_0()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP14_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP14_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP14_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP14_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP14_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP14_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP14_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP14_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP14_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP14_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP14_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_PID_1()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_PID_1()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_PID_1()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP14_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP14_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP14_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP14_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP14_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP14_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP14_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP14_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP14_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP14_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP14_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP14_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP15_IN_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP15_IN_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP15_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP15_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_STALL()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_STALL()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_STALL()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_STALL()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_RESET()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_RESET()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_RESET()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_RESET()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_PID_0()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_PID_0()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_PID_0()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_PID_0()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_LAST_0()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_LAST_0()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_LAST_0()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_LAST_0()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_FULL_0()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_FULL_0()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_FULL_0()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_FULL_0()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP15_IN_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP15_IN_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP15_IN_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP15_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP15_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP15_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP15_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP15_IN_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP15_IN_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP15_IN_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP15_IN_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_PID_1()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_PID_1()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_PID_1()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_PID_1()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_LAST_1()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_LAST_1()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_LAST_1()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_LAST_1()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP15_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP15_IN_BUFFER_CONTROL_FULL_1()
    {
        return EP15_IN_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP15_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP15_IN_BUFFER_CONTROL_FULL_1()
    {
        EP15_IN_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP15_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP15_IN_BUFFER_CONTROL_FULL_1()
    {
        EP15_IN_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP15_IN_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP15_IN_BUFFER_CONTROL_FULL_1()
    {
        EP15_IN_BUFFER_CONTROL ^= 1u << 31u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    uint16_t get_EP15_OUT_BUFFER_CONTROL_LENGTH_0()
    {
        return (EP15_OUT_BUFFER_CONTROL >> 0u) & 0b1111111111u;
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's LENGTH_0 field.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_LENGTH_0(uint16_t value)
    {
        uint32_t curr = EP15_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        EP15_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 10u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 10u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 10u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's AVAILABLE_0 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_AVAILABLE_0()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 10u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's STALL bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_STALL()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 11u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_STALL()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 11u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_STALL()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 11u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's STALL bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_STALL()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 11u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's RESET bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_RESET()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 12u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_RESET()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 12u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_RESET()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 12u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's RESET bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_RESET()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 12u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_PID_0()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 13u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_PID_0()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 13u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_PID_0()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 13u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's PID_0 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_PID_0()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 13u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_LAST_0()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 14u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 14u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 14u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's LAST_0 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_LAST_0()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 14u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_FULL_0()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 15u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 15u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 15u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's FULL_0 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_FULL_0()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 15u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    uint16_t get_EP15_OUT_BUFFER_CONTROL_LENGTH_1()
    {
        return (EP15_OUT_BUFFER_CONTROL >> 16u) & 0b1111111111u;
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's LENGTH_1 field.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_LENGTH_1(uint16_t value)
    {
        uint32_t curr = EP15_OUT_BUFFER_CONTROL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        EP15_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 26u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 26u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 26u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's AVAILABLE_1 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_AVAILABLE_1()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 26u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    USBCTRL_DPRAM_EP15_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET
    get_EP15_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET()
    {
        return USBCTRL_DPRAM_EP15_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
            (EP15_OUT_BUFFER_CONTROL >> 27u) & 0b11u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's DOUBLE_BUFFER_ISO_OFFSET field.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET(
        USBCTRL_DPRAM_EP15_OUT_BUFFER_CONTROL_DOUBLE_BUFFER_ISO_OFFSET value)
    {
        uint32_t curr = EP15_OUT_BUFFER_CONTROL;

        curr &= ~(0b11u << 27u);
        curr |= (std::to_underlying(value) & 0b11u) << 27u;

        EP15_OUT_BUFFER_CONTROL = curr;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_PID_1()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 29u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_PID_1()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 29u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_PID_1()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 29u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's PID_1 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_PID_1()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 29u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_LAST_1()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 30u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 30u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 30u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's LAST_1 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_LAST_1()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 30u;
    }

    /**
     * Get EP15_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    bool get_EP15_OUT_BUFFER_CONTROL_FULL_1()
    {
        return EP15_OUT_BUFFER_CONTROL & (1u << 31u);
    }

    /**
     * Set EP15_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void set_EP15_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP15_OUT_BUFFER_CONTROL |= 1u << 31u;
    }

    /**
     * Clear EP15_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void clear_EP15_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP15_OUT_BUFFER_CONTROL &= ~(1u << 31u);
    }

    /**
     * Toggle EP15_OUT_BUFFER_CONTROL's FULL_1 bit.
     */
    inline void toggle_EP15_OUT_BUFFER_CONTROL_FULL_1()
    {
        EP15_OUT_BUFFER_CONTROL ^= 1u << 31u;
    }
};

static_assert(sizeof(usbctrl_dpram) == usbctrl_dpram::size);

static volatile usbctrl_dpram *const USBCTRL_DPRAM =
    reinterpret_cast<usbctrl_dpram *>(0x50100000);

}; // namespace RP2040
