/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../enums/IO_QSPI_GPIO_QSPI_SCLK_CTRL_FUNCSEL.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SCLK_CTRL_INOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SCLK_CTRL_IRQOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SCLK_CTRL_OEOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SCLK_CTRL_OUTOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD0_CTRL_FUNCSEL.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD0_CTRL_INOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD0_CTRL_IRQOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD0_CTRL_OEOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD0_CTRL_OUTOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD1_CTRL_FUNCSEL.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD1_CTRL_INOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD1_CTRL_IRQOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD1_CTRL_OEOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD1_CTRL_OUTOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD2_CTRL_FUNCSEL.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD2_CTRL_INOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD2_CTRL_IRQOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD2_CTRL_OEOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD2_CTRL_OUTOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD3_CTRL_FUNCSEL.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD3_CTRL_INOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD3_CTRL_IRQOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD3_CTRL_OEOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SD3_CTRL_OUTOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SS_CTRL_FUNCSEL.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SS_CTRL_INOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SS_CTRL_IRQOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SS_CTRL_OEOVER.h"
#include "../enums/IO_QSPI_GPIO_QSPI_SS_CTRL_OUTOVER.h"
#include "../ifgen/common.h"

namespace RP2040
{

struct [[gnu::packed]] io_qspi
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< io_qspi's identifier. */
    static constexpr std::size_t size = 88; /*!< io_qspi's size in bytes. */

    /* Fields. */
    const uint32_t GPIO_QSPI_SCLK_STATUS = {}; /*!< (read-only) GPIO status */
    uint32_t GPIO_QSPI_SCLK_CTRL; /*!< (read-write) GPIO control including
                                     function select and overrides. */
    const uint32_t GPIO_QSPI_SS_STATUS = {}; /*!< (read-only) GPIO status */
    uint32_t GPIO_QSPI_SS_CTRL; /*!< (read-write) GPIO control including
                                   function select and overrides. */
    const uint32_t GPIO_QSPI_SD0_STATUS = {}; /*!< (read-only) GPIO status */
    uint32_t GPIO_QSPI_SD0_CTRL; /*!< (read-write) GPIO control including
                                    function select and overrides. */
    const uint32_t GPIO_QSPI_SD1_STATUS = {}; /*!< (read-only) GPIO status */
    uint32_t GPIO_QSPI_SD1_CTRL; /*!< (read-write) GPIO control including
                                    function select and overrides. */
    const uint32_t GPIO_QSPI_SD2_STATUS = {}; /*!< (read-only) GPIO status */
    uint32_t GPIO_QSPI_SD2_CTRL; /*!< (read-write) GPIO control including
                                    function select and overrides. */
    const uint32_t GPIO_QSPI_SD3_STATUS = {}; /*!< (read-only) GPIO status */
    uint32_t GPIO_QSPI_SD3_CTRL; /*!< (read-write) GPIO control including
                                    function select and overrides. */
    uint32_t INTR;               /*!< (read-write) Raw Interrupts */
    uint32_t PROC0_INTE; /*!< (read-write) Interrupt Enable for proc0 */
    uint32_t PROC0_INTF; /*!< (read-write) Interrupt Force for proc0 */
    const uint32_t PROC0_INTS = {}; /*!< (read-only) Interrupt status after
                                       masking & forcing for proc0 */
    uint32_t PROC1_INTE; /*!< (read-write) Interrupt Enable for proc1 */
    uint32_t PROC1_INTF; /*!< (read-write) Interrupt Force for proc1 */
    const uint32_t PROC1_INTS = {}; /*!< (read-only) Interrupt status after
                                       masking & forcing for proc1 */
    uint32_t DORMANT_WAKE_INTE;     /*!< (read-write) Interrupt Enable for
                                       dormant_wake */
    uint32_t DORMANT_WAKE_INTF;     /*!< (read-write) Interrupt Force for
                                       dormant_wake */
    const uint32_t DORMANT_WAKE_INTS =
        {}; /*!< (read-only) Interrupt status after masking & forcing for
               dormant_wake */

    /* Methods. */

    /**
     * Get GPIO_QSPI_SCLK_STATUS's OUTFROMPERI bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_OUTFROMPERI()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 8u);
    }

    /**
     * Get GPIO_QSPI_SCLK_STATUS's OUTTOPAD bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_OUTTOPAD()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 9u);
    }

    /**
     * Get GPIO_QSPI_SCLK_STATUS's OEFROMPERI bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_OEFROMPERI()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 12u);
    }

    /**
     * Get GPIO_QSPI_SCLK_STATUS's OETOPAD bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_OETOPAD()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 13u);
    }

    /**
     * Get GPIO_QSPI_SCLK_STATUS's INFROMPAD bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_INFROMPAD()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 17u);
    }

    /**
     * Get GPIO_QSPI_SCLK_STATUS's INTOPERI bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_INTOPERI()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 19u);
    }

    /**
     * Get GPIO_QSPI_SCLK_STATUS's IRQFROMPAD bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_IRQFROMPAD()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 24u);
    }

    /**
     * Get GPIO_QSPI_SCLK_STATUS's IRQTOPROC bit.
     */
    bool get_GPIO_QSPI_SCLK_STATUS_IRQTOPROC()
    {
        return GPIO_QSPI_SCLK_STATUS & (1u << 26u);
    }

    /**
     * Get GPIO_QSPI_SCLK_CTRL's FUNCSEL field.
     */
    IO_QSPI_GPIO_QSPI_SCLK_CTRL_FUNCSEL get_GPIO_QSPI_SCLK_CTRL_FUNCSEL()
    {
        return IO_QSPI_GPIO_QSPI_SCLK_CTRL_FUNCSEL(
            (GPIO_QSPI_SCLK_CTRL >> 0u) & 0b11111u);
    }

    /**
     * Set GPIO_QSPI_SCLK_CTRL's FUNCSEL field.
     */
    inline void set_GPIO_QSPI_SCLK_CTRL_FUNCSEL(
        IO_QSPI_GPIO_QSPI_SCLK_CTRL_FUNCSEL value)
    {
        uint32_t curr = GPIO_QSPI_SCLK_CTRL;

        curr &= ~(0b11111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111u) << 0u;

        GPIO_QSPI_SCLK_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SCLK_CTRL's OUTOVER field.
     */
    IO_QSPI_GPIO_QSPI_SCLK_CTRL_OUTOVER get_GPIO_QSPI_SCLK_CTRL_OUTOVER()
    {
        return IO_QSPI_GPIO_QSPI_SCLK_CTRL_OUTOVER(
            (GPIO_QSPI_SCLK_CTRL >> 8u) & 0b11u);
    }

    /**
     * Set GPIO_QSPI_SCLK_CTRL's OUTOVER field.
     */
    inline void set_GPIO_QSPI_SCLK_CTRL_OUTOVER(
        IO_QSPI_GPIO_QSPI_SCLK_CTRL_OUTOVER value)
    {
        uint32_t curr = GPIO_QSPI_SCLK_CTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GPIO_QSPI_SCLK_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SCLK_CTRL's OEOVER field.
     */
    IO_QSPI_GPIO_QSPI_SCLK_CTRL_OEOVER get_GPIO_QSPI_SCLK_CTRL_OEOVER()
    {
        return IO_QSPI_GPIO_QSPI_SCLK_CTRL_OEOVER(
            (GPIO_QSPI_SCLK_CTRL >> 12u) & 0b11u);
    }

    /**
     * Set GPIO_QSPI_SCLK_CTRL's OEOVER field.
     */
    inline void set_GPIO_QSPI_SCLK_CTRL_OEOVER(
        IO_QSPI_GPIO_QSPI_SCLK_CTRL_OEOVER value)
    {
        uint32_t curr = GPIO_QSPI_SCLK_CTRL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        GPIO_QSPI_SCLK_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SCLK_CTRL's INOVER field.
     */
    IO_QSPI_GPIO_QSPI_SCLK_CTRL_INOVER get_GPIO_QSPI_SCLK_CTRL_INOVER()
    {
        return IO_QSPI_GPIO_QSPI_SCLK_CTRL_INOVER(
            (GPIO_QSPI_SCLK_CTRL >> 16u) & 0b11u);
    }

    /**
     * Set GPIO_QSPI_SCLK_CTRL's INOVER field.
     */
    inline void set_GPIO_QSPI_SCLK_CTRL_INOVER(
        IO_QSPI_GPIO_QSPI_SCLK_CTRL_INOVER value)
    {
        uint32_t curr = GPIO_QSPI_SCLK_CTRL;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        GPIO_QSPI_SCLK_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SCLK_CTRL's IRQOVER field.
     */
    IO_QSPI_GPIO_QSPI_SCLK_CTRL_IRQOVER get_GPIO_QSPI_SCLK_CTRL_IRQOVER()
    {
        return IO_QSPI_GPIO_QSPI_SCLK_CTRL_IRQOVER(
            (GPIO_QSPI_SCLK_CTRL >> 28u) & 0b11u);
    }

    /**
     * Set GPIO_QSPI_SCLK_CTRL's IRQOVER field.
     */
    inline void set_GPIO_QSPI_SCLK_CTRL_IRQOVER(
        IO_QSPI_GPIO_QSPI_SCLK_CTRL_IRQOVER value)
    {
        uint32_t curr = GPIO_QSPI_SCLK_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPIO_QSPI_SCLK_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's OUTFROMPERI bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_OUTFROMPERI()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 8u);
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's OUTTOPAD bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_OUTTOPAD()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 9u);
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's OEFROMPERI bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_OEFROMPERI()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 12u);
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's OETOPAD bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_OETOPAD()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 13u);
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's INFROMPAD bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_INFROMPAD()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 17u);
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's INTOPERI bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_INTOPERI()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 19u);
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's IRQFROMPAD bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_IRQFROMPAD()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 24u);
    }

    /**
     * Get GPIO_QSPI_SS_STATUS's IRQTOPROC bit.
     */
    bool get_GPIO_QSPI_SS_STATUS_IRQTOPROC()
    {
        return GPIO_QSPI_SS_STATUS & (1u << 26u);
    }

    /**
     * Get GPIO_QSPI_SS_CTRL's FUNCSEL field.
     */
    IO_QSPI_GPIO_QSPI_SS_CTRL_FUNCSEL get_GPIO_QSPI_SS_CTRL_FUNCSEL()
    {
        return IO_QSPI_GPIO_QSPI_SS_CTRL_FUNCSEL((GPIO_QSPI_SS_CTRL >> 0u) &
                                                 0b11111u);
    }

    /**
     * Set GPIO_QSPI_SS_CTRL's FUNCSEL field.
     */
    inline void set_GPIO_QSPI_SS_CTRL_FUNCSEL(
        IO_QSPI_GPIO_QSPI_SS_CTRL_FUNCSEL value)
    {
        uint32_t curr = GPIO_QSPI_SS_CTRL;

        curr &= ~(0b11111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111u) << 0u;

        GPIO_QSPI_SS_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SS_CTRL's OUTOVER field.
     */
    IO_QSPI_GPIO_QSPI_SS_CTRL_OUTOVER get_GPIO_QSPI_SS_CTRL_OUTOVER()
    {
        return IO_QSPI_GPIO_QSPI_SS_CTRL_OUTOVER((GPIO_QSPI_SS_CTRL >> 8u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SS_CTRL's OUTOVER field.
     */
    inline void set_GPIO_QSPI_SS_CTRL_OUTOVER(
        IO_QSPI_GPIO_QSPI_SS_CTRL_OUTOVER value)
    {
        uint32_t curr = GPIO_QSPI_SS_CTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GPIO_QSPI_SS_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SS_CTRL's OEOVER field.
     */
    IO_QSPI_GPIO_QSPI_SS_CTRL_OEOVER get_GPIO_QSPI_SS_CTRL_OEOVER()
    {
        return IO_QSPI_GPIO_QSPI_SS_CTRL_OEOVER((GPIO_QSPI_SS_CTRL >> 12u) &
                                                0b11u);
    }

    /**
     * Set GPIO_QSPI_SS_CTRL's OEOVER field.
     */
    inline void set_GPIO_QSPI_SS_CTRL_OEOVER(
        IO_QSPI_GPIO_QSPI_SS_CTRL_OEOVER value)
    {
        uint32_t curr = GPIO_QSPI_SS_CTRL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        GPIO_QSPI_SS_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SS_CTRL's INOVER field.
     */
    IO_QSPI_GPIO_QSPI_SS_CTRL_INOVER get_GPIO_QSPI_SS_CTRL_INOVER()
    {
        return IO_QSPI_GPIO_QSPI_SS_CTRL_INOVER((GPIO_QSPI_SS_CTRL >> 16u) &
                                                0b11u);
    }

    /**
     * Set GPIO_QSPI_SS_CTRL's INOVER field.
     */
    inline void set_GPIO_QSPI_SS_CTRL_INOVER(
        IO_QSPI_GPIO_QSPI_SS_CTRL_INOVER value)
    {
        uint32_t curr = GPIO_QSPI_SS_CTRL;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        GPIO_QSPI_SS_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SS_CTRL's IRQOVER field.
     */
    IO_QSPI_GPIO_QSPI_SS_CTRL_IRQOVER get_GPIO_QSPI_SS_CTRL_IRQOVER()
    {
        return IO_QSPI_GPIO_QSPI_SS_CTRL_IRQOVER((GPIO_QSPI_SS_CTRL >> 28u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SS_CTRL's IRQOVER field.
     */
    inline void set_GPIO_QSPI_SS_CTRL_IRQOVER(
        IO_QSPI_GPIO_QSPI_SS_CTRL_IRQOVER value)
    {
        uint32_t curr = GPIO_QSPI_SS_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPIO_QSPI_SS_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's OUTFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_OUTFROMPERI()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 8u);
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's OUTTOPAD bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_OUTTOPAD()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 9u);
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's OEFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_OEFROMPERI()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 12u);
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's OETOPAD bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_OETOPAD()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 13u);
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's INFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_INFROMPAD()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 17u);
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's INTOPERI bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_INTOPERI()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 19u);
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's IRQFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_IRQFROMPAD()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 24u);
    }

    /**
     * Get GPIO_QSPI_SD0_STATUS's IRQTOPROC bit.
     */
    bool get_GPIO_QSPI_SD0_STATUS_IRQTOPROC()
    {
        return GPIO_QSPI_SD0_STATUS & (1u << 26u);
    }

    /**
     * Get GPIO_QSPI_SD0_CTRL's FUNCSEL field.
     */
    IO_QSPI_GPIO_QSPI_SD0_CTRL_FUNCSEL get_GPIO_QSPI_SD0_CTRL_FUNCSEL()
    {
        return IO_QSPI_GPIO_QSPI_SD0_CTRL_FUNCSEL((GPIO_QSPI_SD0_CTRL >> 0u) &
                                                  0b11111u);
    }

    /**
     * Set GPIO_QSPI_SD0_CTRL's FUNCSEL field.
     */
    inline void set_GPIO_QSPI_SD0_CTRL_FUNCSEL(
        IO_QSPI_GPIO_QSPI_SD0_CTRL_FUNCSEL value)
    {
        uint32_t curr = GPIO_QSPI_SD0_CTRL;

        curr &= ~(0b11111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111u) << 0u;

        GPIO_QSPI_SD0_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD0_CTRL's OUTOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD0_CTRL_OUTOVER get_GPIO_QSPI_SD0_CTRL_OUTOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD0_CTRL_OUTOVER((GPIO_QSPI_SD0_CTRL >> 8u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD0_CTRL's OUTOVER field.
     */
    inline void set_GPIO_QSPI_SD0_CTRL_OUTOVER(
        IO_QSPI_GPIO_QSPI_SD0_CTRL_OUTOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD0_CTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GPIO_QSPI_SD0_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD0_CTRL's OEOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD0_CTRL_OEOVER get_GPIO_QSPI_SD0_CTRL_OEOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD0_CTRL_OEOVER((GPIO_QSPI_SD0_CTRL >> 12u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD0_CTRL's OEOVER field.
     */
    inline void set_GPIO_QSPI_SD0_CTRL_OEOVER(
        IO_QSPI_GPIO_QSPI_SD0_CTRL_OEOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD0_CTRL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        GPIO_QSPI_SD0_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD0_CTRL's INOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD0_CTRL_INOVER get_GPIO_QSPI_SD0_CTRL_INOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD0_CTRL_INOVER((GPIO_QSPI_SD0_CTRL >> 16u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD0_CTRL's INOVER field.
     */
    inline void set_GPIO_QSPI_SD0_CTRL_INOVER(
        IO_QSPI_GPIO_QSPI_SD0_CTRL_INOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD0_CTRL;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        GPIO_QSPI_SD0_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD0_CTRL's IRQOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD0_CTRL_IRQOVER get_GPIO_QSPI_SD0_CTRL_IRQOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD0_CTRL_IRQOVER((GPIO_QSPI_SD0_CTRL >> 28u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD0_CTRL's IRQOVER field.
     */
    inline void set_GPIO_QSPI_SD0_CTRL_IRQOVER(
        IO_QSPI_GPIO_QSPI_SD0_CTRL_IRQOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD0_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPIO_QSPI_SD0_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's OUTFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_OUTFROMPERI()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 8u);
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's OUTTOPAD bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_OUTTOPAD()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 9u);
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's OEFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_OEFROMPERI()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 12u);
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's OETOPAD bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_OETOPAD()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 13u);
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's INFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_INFROMPAD()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 17u);
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's INTOPERI bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_INTOPERI()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 19u);
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's IRQFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_IRQFROMPAD()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 24u);
    }

    /**
     * Get GPIO_QSPI_SD1_STATUS's IRQTOPROC bit.
     */
    bool get_GPIO_QSPI_SD1_STATUS_IRQTOPROC()
    {
        return GPIO_QSPI_SD1_STATUS & (1u << 26u);
    }

    /**
     * Get GPIO_QSPI_SD1_CTRL's FUNCSEL field.
     */
    IO_QSPI_GPIO_QSPI_SD1_CTRL_FUNCSEL get_GPIO_QSPI_SD1_CTRL_FUNCSEL()
    {
        return IO_QSPI_GPIO_QSPI_SD1_CTRL_FUNCSEL((GPIO_QSPI_SD1_CTRL >> 0u) &
                                                  0b11111u);
    }

    /**
     * Set GPIO_QSPI_SD1_CTRL's FUNCSEL field.
     */
    inline void set_GPIO_QSPI_SD1_CTRL_FUNCSEL(
        IO_QSPI_GPIO_QSPI_SD1_CTRL_FUNCSEL value)
    {
        uint32_t curr = GPIO_QSPI_SD1_CTRL;

        curr &= ~(0b11111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111u) << 0u;

        GPIO_QSPI_SD1_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD1_CTRL's OUTOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD1_CTRL_OUTOVER get_GPIO_QSPI_SD1_CTRL_OUTOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD1_CTRL_OUTOVER((GPIO_QSPI_SD1_CTRL >> 8u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD1_CTRL's OUTOVER field.
     */
    inline void set_GPIO_QSPI_SD1_CTRL_OUTOVER(
        IO_QSPI_GPIO_QSPI_SD1_CTRL_OUTOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD1_CTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GPIO_QSPI_SD1_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD1_CTRL's OEOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD1_CTRL_OEOVER get_GPIO_QSPI_SD1_CTRL_OEOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD1_CTRL_OEOVER((GPIO_QSPI_SD1_CTRL >> 12u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD1_CTRL's OEOVER field.
     */
    inline void set_GPIO_QSPI_SD1_CTRL_OEOVER(
        IO_QSPI_GPIO_QSPI_SD1_CTRL_OEOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD1_CTRL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        GPIO_QSPI_SD1_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD1_CTRL's INOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD1_CTRL_INOVER get_GPIO_QSPI_SD1_CTRL_INOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD1_CTRL_INOVER((GPIO_QSPI_SD1_CTRL >> 16u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD1_CTRL's INOVER field.
     */
    inline void set_GPIO_QSPI_SD1_CTRL_INOVER(
        IO_QSPI_GPIO_QSPI_SD1_CTRL_INOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD1_CTRL;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        GPIO_QSPI_SD1_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD1_CTRL's IRQOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD1_CTRL_IRQOVER get_GPIO_QSPI_SD1_CTRL_IRQOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD1_CTRL_IRQOVER((GPIO_QSPI_SD1_CTRL >> 28u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD1_CTRL's IRQOVER field.
     */
    inline void set_GPIO_QSPI_SD1_CTRL_IRQOVER(
        IO_QSPI_GPIO_QSPI_SD1_CTRL_IRQOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD1_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPIO_QSPI_SD1_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's OUTFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_OUTFROMPERI()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 8u);
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's OUTTOPAD bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_OUTTOPAD()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 9u);
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's OEFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_OEFROMPERI()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 12u);
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's OETOPAD bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_OETOPAD()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 13u);
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's INFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_INFROMPAD()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 17u);
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's INTOPERI bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_INTOPERI()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 19u);
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's IRQFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_IRQFROMPAD()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 24u);
    }

    /**
     * Get GPIO_QSPI_SD2_STATUS's IRQTOPROC bit.
     */
    bool get_GPIO_QSPI_SD2_STATUS_IRQTOPROC()
    {
        return GPIO_QSPI_SD2_STATUS & (1u << 26u);
    }

    /**
     * Get GPIO_QSPI_SD2_CTRL's FUNCSEL field.
     */
    IO_QSPI_GPIO_QSPI_SD2_CTRL_FUNCSEL get_GPIO_QSPI_SD2_CTRL_FUNCSEL()
    {
        return IO_QSPI_GPIO_QSPI_SD2_CTRL_FUNCSEL((GPIO_QSPI_SD2_CTRL >> 0u) &
                                                  0b11111u);
    }

    /**
     * Set GPIO_QSPI_SD2_CTRL's FUNCSEL field.
     */
    inline void set_GPIO_QSPI_SD2_CTRL_FUNCSEL(
        IO_QSPI_GPIO_QSPI_SD2_CTRL_FUNCSEL value)
    {
        uint32_t curr = GPIO_QSPI_SD2_CTRL;

        curr &= ~(0b11111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111u) << 0u;

        GPIO_QSPI_SD2_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD2_CTRL's OUTOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD2_CTRL_OUTOVER get_GPIO_QSPI_SD2_CTRL_OUTOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD2_CTRL_OUTOVER((GPIO_QSPI_SD2_CTRL >> 8u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD2_CTRL's OUTOVER field.
     */
    inline void set_GPIO_QSPI_SD2_CTRL_OUTOVER(
        IO_QSPI_GPIO_QSPI_SD2_CTRL_OUTOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD2_CTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GPIO_QSPI_SD2_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD2_CTRL's OEOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD2_CTRL_OEOVER get_GPIO_QSPI_SD2_CTRL_OEOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD2_CTRL_OEOVER((GPIO_QSPI_SD2_CTRL >> 12u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD2_CTRL's OEOVER field.
     */
    inline void set_GPIO_QSPI_SD2_CTRL_OEOVER(
        IO_QSPI_GPIO_QSPI_SD2_CTRL_OEOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD2_CTRL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        GPIO_QSPI_SD2_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD2_CTRL's INOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD2_CTRL_INOVER get_GPIO_QSPI_SD2_CTRL_INOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD2_CTRL_INOVER((GPIO_QSPI_SD2_CTRL >> 16u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD2_CTRL's INOVER field.
     */
    inline void set_GPIO_QSPI_SD2_CTRL_INOVER(
        IO_QSPI_GPIO_QSPI_SD2_CTRL_INOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD2_CTRL;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        GPIO_QSPI_SD2_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD2_CTRL's IRQOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD2_CTRL_IRQOVER get_GPIO_QSPI_SD2_CTRL_IRQOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD2_CTRL_IRQOVER((GPIO_QSPI_SD2_CTRL >> 28u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD2_CTRL's IRQOVER field.
     */
    inline void set_GPIO_QSPI_SD2_CTRL_IRQOVER(
        IO_QSPI_GPIO_QSPI_SD2_CTRL_IRQOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD2_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPIO_QSPI_SD2_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's OUTFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_OUTFROMPERI()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 8u);
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's OUTTOPAD bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_OUTTOPAD()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 9u);
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's OEFROMPERI bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_OEFROMPERI()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 12u);
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's OETOPAD bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_OETOPAD()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 13u);
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's INFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_INFROMPAD()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 17u);
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's INTOPERI bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_INTOPERI()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 19u);
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's IRQFROMPAD bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_IRQFROMPAD()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 24u);
    }

    /**
     * Get GPIO_QSPI_SD3_STATUS's IRQTOPROC bit.
     */
    bool get_GPIO_QSPI_SD3_STATUS_IRQTOPROC()
    {
        return GPIO_QSPI_SD3_STATUS & (1u << 26u);
    }

    /**
     * Get GPIO_QSPI_SD3_CTRL's FUNCSEL field.
     */
    IO_QSPI_GPIO_QSPI_SD3_CTRL_FUNCSEL get_GPIO_QSPI_SD3_CTRL_FUNCSEL()
    {
        return IO_QSPI_GPIO_QSPI_SD3_CTRL_FUNCSEL((GPIO_QSPI_SD3_CTRL >> 0u) &
                                                  0b11111u);
    }

    /**
     * Set GPIO_QSPI_SD3_CTRL's FUNCSEL field.
     */
    inline void set_GPIO_QSPI_SD3_CTRL_FUNCSEL(
        IO_QSPI_GPIO_QSPI_SD3_CTRL_FUNCSEL value)
    {
        uint32_t curr = GPIO_QSPI_SD3_CTRL;

        curr &= ~(0b11111u << 0u);
        curr |= (std::to_underlying(value) & 0b11111u) << 0u;

        GPIO_QSPI_SD3_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD3_CTRL's OUTOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD3_CTRL_OUTOVER get_GPIO_QSPI_SD3_CTRL_OUTOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD3_CTRL_OUTOVER((GPIO_QSPI_SD3_CTRL >> 8u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD3_CTRL's OUTOVER field.
     */
    inline void set_GPIO_QSPI_SD3_CTRL_OUTOVER(
        IO_QSPI_GPIO_QSPI_SD3_CTRL_OUTOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD3_CTRL;

        curr &= ~(0b11u << 8u);
        curr |= (std::to_underlying(value) & 0b11u) << 8u;

        GPIO_QSPI_SD3_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD3_CTRL's OEOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD3_CTRL_OEOVER get_GPIO_QSPI_SD3_CTRL_OEOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD3_CTRL_OEOVER((GPIO_QSPI_SD3_CTRL >> 12u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD3_CTRL's OEOVER field.
     */
    inline void set_GPIO_QSPI_SD3_CTRL_OEOVER(
        IO_QSPI_GPIO_QSPI_SD3_CTRL_OEOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD3_CTRL;

        curr &= ~(0b11u << 12u);
        curr |= (std::to_underlying(value) & 0b11u) << 12u;

        GPIO_QSPI_SD3_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD3_CTRL's INOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD3_CTRL_INOVER get_GPIO_QSPI_SD3_CTRL_INOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD3_CTRL_INOVER((GPIO_QSPI_SD3_CTRL >> 16u) &
                                                 0b11u);
    }

    /**
     * Set GPIO_QSPI_SD3_CTRL's INOVER field.
     */
    inline void set_GPIO_QSPI_SD3_CTRL_INOVER(
        IO_QSPI_GPIO_QSPI_SD3_CTRL_INOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD3_CTRL;

        curr &= ~(0b11u << 16u);
        curr |= (std::to_underlying(value) & 0b11u) << 16u;

        GPIO_QSPI_SD3_CTRL = curr;
    }

    /**
     * Get GPIO_QSPI_SD3_CTRL's IRQOVER field.
     */
    IO_QSPI_GPIO_QSPI_SD3_CTRL_IRQOVER get_GPIO_QSPI_SD3_CTRL_IRQOVER()
    {
        return IO_QSPI_GPIO_QSPI_SD3_CTRL_IRQOVER((GPIO_QSPI_SD3_CTRL >> 28u) &
                                                  0b11u);
    }

    /**
     * Set GPIO_QSPI_SD3_CTRL's IRQOVER field.
     */
    inline void set_GPIO_QSPI_SD3_CTRL_IRQOVER(
        IO_QSPI_GPIO_QSPI_SD3_CTRL_IRQOVER value)
    {
        uint32_t curr = GPIO_QSPI_SD3_CTRL;

        curr &= ~(0b11u << 28u);
        curr |= (std::to_underlying(value) & 0b11u) << 28u;

        GPIO_QSPI_SD3_CTRL = curr;
    }

    /**
     * Get INTR's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return INTR & (1u << 0u);
    }

    /**
     * Get INTR's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return INTR & (1u << 1u);
    }

    /**
     * Get INTR's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return INTR & (1u << 2u);
    }

    /**
     * Set INTR's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void set_INTR_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        INTR |= 1u << 2u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void clear_INTR_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        INTR &= ~(1u << 2u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        INTR ^= 1u << 2u;
    }

    /**
     * Get INTR's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return INTR & (1u << 3u);
    }

    /**
     * Set INTR's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void set_INTR_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        INTR |= 1u << 3u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void clear_INTR_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        INTR &= ~(1u << 3u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        INTR ^= 1u << 3u;
    }

    /**
     * Get INTR's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return INTR & (1u << 4u);
    }

    /**
     * Get INTR's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return INTR & (1u << 5u);
    }

    /**
     * Get INTR's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SS_EDGE_LOW()
    {
        return INTR & (1u << 6u);
    }

    /**
     * Set INTR's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void set_INTR_GPIO_QSPI_SS_EDGE_LOW()
    {
        INTR |= 1u << 6u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void clear_INTR_GPIO_QSPI_SS_EDGE_LOW()
    {
        INTR &= ~(1u << 6u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SS_EDGE_LOW()
    {
        INTR ^= 1u << 6u;
    }

    /**
     * Get INTR's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return INTR & (1u << 7u);
    }

    /**
     * Set INTR's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void set_INTR_GPIO_QSPI_SS_EDGE_HIGH()
    {
        INTR |= 1u << 7u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void clear_INTR_GPIO_QSPI_SS_EDGE_HIGH()
    {
        INTR &= ~(1u << 7u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SS_EDGE_HIGH()
    {
        INTR ^= 1u << 7u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return INTR & (1u << 8u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return INTR & (1u << 9u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return INTR & (1u << 10u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void set_INTR_GPIO_QSPI_SD0_EDGE_LOW()
    {
        INTR |= 1u << 10u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD0_EDGE_LOW()
    {
        INTR &= ~(1u << 10u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD0_EDGE_LOW()
    {
        INTR ^= 1u << 10u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return INTR & (1u << 11u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void set_INTR_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        INTR |= 1u << 11u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        INTR &= ~(1u << 11u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        INTR ^= 1u << 11u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return INTR & (1u << 12u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return INTR & (1u << 13u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return INTR & (1u << 14u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void set_INTR_GPIO_QSPI_SD1_EDGE_LOW()
    {
        INTR |= 1u << 14u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD1_EDGE_LOW()
    {
        INTR &= ~(1u << 14u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD1_EDGE_LOW()
    {
        INTR ^= 1u << 14u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return INTR & (1u << 15u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void set_INTR_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        INTR |= 1u << 15u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        INTR &= ~(1u << 15u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        INTR ^= 1u << 15u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return INTR & (1u << 16u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return INTR & (1u << 17u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return INTR & (1u << 18u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void set_INTR_GPIO_QSPI_SD2_EDGE_LOW()
    {
        INTR |= 1u << 18u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD2_EDGE_LOW()
    {
        INTR &= ~(1u << 18u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD2_EDGE_LOW()
    {
        INTR ^= 1u << 18u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return INTR & (1u << 19u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void set_INTR_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        INTR |= 1u << 19u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        INTR &= ~(1u << 19u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        INTR ^= 1u << 19u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return INTR & (1u << 20u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return INTR & (1u << 21u);
    }

    /**
     * Get INTR's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_INTR_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return INTR & (1u << 22u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void set_INTR_GPIO_QSPI_SD3_EDGE_LOW()
    {
        INTR |= 1u << 22u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD3_EDGE_LOW()
    {
        INTR &= ~(1u << 22u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD3_EDGE_LOW()
    {
        INTR ^= 1u << 22u;
    }

    /**
     * Get INTR's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_INTR_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return INTR & (1u << 23u);
    }

    /**
     * Set INTR's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void set_INTR_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        INTR |= 1u << 23u;
    }

    /**
     * Clear INTR's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void clear_INTR_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        INTR &= ~(1u << 23u);
    }

    /**
     * Toggle INTR's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void toggle_INTR_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        INTR ^= 1u << 23u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return PROC0_INTE & (1u << 0u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC0_INTE |= 1u << 0u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC0_INTE &= ~(1u << 0u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC0_INTE ^= 1u << 0u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return PROC0_INTE & (1u << 1u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC0_INTE |= 1u << 1u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC0_INTE &= ~(1u << 1u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC0_INTE ^= 1u << 1u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return PROC0_INTE & (1u << 2u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC0_INTE |= 1u << 2u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC0_INTE &= ~(1u << 2u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC0_INTE ^= 1u << 2u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return PROC0_INTE & (1u << 3u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC0_INTE |= 1u << 3u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC0_INTE &= ~(1u << 3u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC0_INTE ^= 1u << 3u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return PROC0_INTE & (1u << 4u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC0_INTE |= 1u << 4u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC0_INTE &= ~(1u << 4u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC0_INTE ^= 1u << 4u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return PROC0_INTE & (1u << 5u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC0_INTE |= 1u << 5u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC0_INTE &= ~(1u << 5u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC0_INTE ^= 1u << 5u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        return PROC0_INTE & (1u << 6u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC0_INTE |= 1u << 6u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC0_INTE &= ~(1u << 6u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC0_INTE ^= 1u << 6u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return PROC0_INTE & (1u << 7u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC0_INTE |= 1u << 7u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC0_INTE &= ~(1u << 7u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC0_INTE ^= 1u << 7u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return PROC0_INTE & (1u << 8u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC0_INTE |= 1u << 8u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC0_INTE &= ~(1u << 8u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC0_INTE ^= 1u << 8u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return PROC0_INTE & (1u << 9u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC0_INTE |= 1u << 9u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC0_INTE &= ~(1u << 9u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC0_INTE ^= 1u << 9u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return PROC0_INTE & (1u << 10u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC0_INTE |= 1u << 10u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC0_INTE &= ~(1u << 10u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC0_INTE ^= 1u << 10u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return PROC0_INTE & (1u << 11u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC0_INTE |= 1u << 11u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC0_INTE &= ~(1u << 11u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC0_INTE ^= 1u << 11u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return PROC0_INTE & (1u << 12u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC0_INTE |= 1u << 12u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC0_INTE &= ~(1u << 12u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC0_INTE ^= 1u << 12u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return PROC0_INTE & (1u << 13u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC0_INTE |= 1u << 13u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC0_INTE &= ~(1u << 13u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC0_INTE ^= 1u << 13u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return PROC0_INTE & (1u << 14u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC0_INTE |= 1u << 14u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC0_INTE &= ~(1u << 14u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC0_INTE ^= 1u << 14u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return PROC0_INTE & (1u << 15u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC0_INTE |= 1u << 15u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC0_INTE &= ~(1u << 15u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC0_INTE ^= 1u << 15u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return PROC0_INTE & (1u << 16u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC0_INTE |= 1u << 16u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC0_INTE &= ~(1u << 16u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC0_INTE ^= 1u << 16u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return PROC0_INTE & (1u << 17u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC0_INTE |= 1u << 17u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC0_INTE &= ~(1u << 17u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC0_INTE ^= 1u << 17u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return PROC0_INTE & (1u << 18u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC0_INTE |= 1u << 18u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC0_INTE &= ~(1u << 18u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC0_INTE ^= 1u << 18u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return PROC0_INTE & (1u << 19u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC0_INTE |= 1u << 19u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC0_INTE &= ~(1u << 19u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC0_INTE ^= 1u << 19u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return PROC0_INTE & (1u << 20u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC0_INTE |= 1u << 20u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC0_INTE &= ~(1u << 20u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC0_INTE ^= 1u << 20u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return PROC0_INTE & (1u << 21u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC0_INTE |= 1u << 21u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC0_INTE &= ~(1u << 21u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC0_INTE ^= 1u << 21u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return PROC0_INTE & (1u << 22u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC0_INTE |= 1u << 22u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC0_INTE &= ~(1u << 22u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC0_INTE ^= 1u << 22u;
    }

    /**
     * Get PROC0_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_PROC0_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return PROC0_INTE & (1u << 23u);
    }

    /**
     * Set PROC0_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC0_INTE |= 1u << 23u;
    }

    /**
     * Clear PROC0_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC0_INTE &= ~(1u << 23u);
    }

    /**
     * Toggle PROC0_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC0_INTE ^= 1u << 23u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return PROC0_INTF & (1u << 0u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC0_INTF |= 1u << 0u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC0_INTF &= ~(1u << 0u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC0_INTF ^= 1u << 0u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return PROC0_INTF & (1u << 1u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC0_INTF |= 1u << 1u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC0_INTF &= ~(1u << 1u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC0_INTF ^= 1u << 1u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return PROC0_INTF & (1u << 2u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC0_INTF |= 1u << 2u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC0_INTF &= ~(1u << 2u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC0_INTF ^= 1u << 2u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return PROC0_INTF & (1u << 3u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC0_INTF |= 1u << 3u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC0_INTF &= ~(1u << 3u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC0_INTF ^= 1u << 3u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return PROC0_INTF & (1u << 4u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC0_INTF |= 1u << 4u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC0_INTF &= ~(1u << 4u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC0_INTF ^= 1u << 4u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return PROC0_INTF & (1u << 5u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC0_INTF |= 1u << 5u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC0_INTF &= ~(1u << 5u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC0_INTF ^= 1u << 5u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        return PROC0_INTF & (1u << 6u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC0_INTF |= 1u << 6u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC0_INTF &= ~(1u << 6u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC0_INTF ^= 1u << 6u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return PROC0_INTF & (1u << 7u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC0_INTF |= 1u << 7u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC0_INTF &= ~(1u << 7u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC0_INTF ^= 1u << 7u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return PROC0_INTF & (1u << 8u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC0_INTF |= 1u << 8u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC0_INTF &= ~(1u << 8u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC0_INTF ^= 1u << 8u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return PROC0_INTF & (1u << 9u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC0_INTF |= 1u << 9u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC0_INTF &= ~(1u << 9u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC0_INTF ^= 1u << 9u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return PROC0_INTF & (1u << 10u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC0_INTF |= 1u << 10u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC0_INTF &= ~(1u << 10u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC0_INTF ^= 1u << 10u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return PROC0_INTF & (1u << 11u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC0_INTF |= 1u << 11u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC0_INTF &= ~(1u << 11u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC0_INTF ^= 1u << 11u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return PROC0_INTF & (1u << 12u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC0_INTF |= 1u << 12u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC0_INTF &= ~(1u << 12u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC0_INTF ^= 1u << 12u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return PROC0_INTF & (1u << 13u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC0_INTF |= 1u << 13u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC0_INTF &= ~(1u << 13u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC0_INTF ^= 1u << 13u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return PROC0_INTF & (1u << 14u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC0_INTF |= 1u << 14u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC0_INTF &= ~(1u << 14u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC0_INTF ^= 1u << 14u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return PROC0_INTF & (1u << 15u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC0_INTF |= 1u << 15u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC0_INTF &= ~(1u << 15u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC0_INTF ^= 1u << 15u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return PROC0_INTF & (1u << 16u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC0_INTF |= 1u << 16u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC0_INTF &= ~(1u << 16u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC0_INTF ^= 1u << 16u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return PROC0_INTF & (1u << 17u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC0_INTF |= 1u << 17u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC0_INTF &= ~(1u << 17u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC0_INTF ^= 1u << 17u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return PROC0_INTF & (1u << 18u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC0_INTF |= 1u << 18u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC0_INTF &= ~(1u << 18u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC0_INTF ^= 1u << 18u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return PROC0_INTF & (1u << 19u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC0_INTF |= 1u << 19u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC0_INTF &= ~(1u << 19u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC0_INTF ^= 1u << 19u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return PROC0_INTF & (1u << 20u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC0_INTF |= 1u << 20u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC0_INTF &= ~(1u << 20u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC0_INTF ^= 1u << 20u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return PROC0_INTF & (1u << 21u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC0_INTF |= 1u << 21u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC0_INTF &= ~(1u << 21u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC0_INTF ^= 1u << 21u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return PROC0_INTF & (1u << 22u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC0_INTF |= 1u << 22u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC0_INTF &= ~(1u << 22u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC0_INTF ^= 1u << 22u;
    }

    /**
     * Get PROC0_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_PROC0_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return PROC0_INTF & (1u << 23u);
    }

    /**
     * Set PROC0_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void set_PROC0_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC0_INTF |= 1u << 23u;
    }

    /**
     * Clear PROC0_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void clear_PROC0_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC0_INTF &= ~(1u << 23u);
    }

    /**
     * Toggle PROC0_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void toggle_PROC0_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC0_INTF ^= 1u << 23u;
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return PROC0_INTS & (1u << 0u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return PROC0_INTS & (1u << 1u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return PROC0_INTS & (1u << 2u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return PROC0_INTS & (1u << 3u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return PROC0_INTS & (1u << 4u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return PROC0_INTS & (1u << 5u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SS_EDGE_LOW()
    {
        return PROC0_INTS & (1u << 6u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return PROC0_INTS & (1u << 7u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return PROC0_INTS & (1u << 8u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return PROC0_INTS & (1u << 9u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return PROC0_INTS & (1u << 10u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return PROC0_INTS & (1u << 11u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return PROC0_INTS & (1u << 12u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return PROC0_INTS & (1u << 13u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return PROC0_INTS & (1u << 14u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return PROC0_INTS & (1u << 15u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return PROC0_INTS & (1u << 16u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return PROC0_INTS & (1u << 17u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return PROC0_INTS & (1u << 18u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return PROC0_INTS & (1u << 19u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return PROC0_INTS & (1u << 20u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return PROC0_INTS & (1u << 21u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return PROC0_INTS & (1u << 22u);
    }

    /**
     * Get PROC0_INTS's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_PROC0_INTS_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return PROC0_INTS & (1u << 23u);
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return PROC1_INTE & (1u << 0u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC1_INTE |= 1u << 0u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC1_INTE &= ~(1u << 0u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC1_INTE ^= 1u << 0u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return PROC1_INTE & (1u << 1u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC1_INTE |= 1u << 1u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC1_INTE &= ~(1u << 1u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC1_INTE ^= 1u << 1u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return PROC1_INTE & (1u << 2u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC1_INTE |= 1u << 2u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC1_INTE &= ~(1u << 2u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC1_INTE ^= 1u << 2u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return PROC1_INTE & (1u << 3u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC1_INTE |= 1u << 3u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC1_INTE &= ~(1u << 3u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC1_INTE ^= 1u << 3u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return PROC1_INTE & (1u << 4u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC1_INTE |= 1u << 4u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC1_INTE &= ~(1u << 4u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC1_INTE ^= 1u << 4u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return PROC1_INTE & (1u << 5u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC1_INTE |= 1u << 5u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC1_INTE &= ~(1u << 5u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC1_INTE ^= 1u << 5u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        return PROC1_INTE & (1u << 6u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC1_INTE |= 1u << 6u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC1_INTE &= ~(1u << 6u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC1_INTE ^= 1u << 6u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return PROC1_INTE & (1u << 7u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC1_INTE |= 1u << 7u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC1_INTE &= ~(1u << 7u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC1_INTE ^= 1u << 7u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return PROC1_INTE & (1u << 8u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC1_INTE |= 1u << 8u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC1_INTE &= ~(1u << 8u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC1_INTE ^= 1u << 8u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return PROC1_INTE & (1u << 9u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC1_INTE |= 1u << 9u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC1_INTE &= ~(1u << 9u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC1_INTE ^= 1u << 9u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return PROC1_INTE & (1u << 10u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC1_INTE |= 1u << 10u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC1_INTE &= ~(1u << 10u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC1_INTE ^= 1u << 10u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return PROC1_INTE & (1u << 11u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC1_INTE |= 1u << 11u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC1_INTE &= ~(1u << 11u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC1_INTE ^= 1u << 11u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return PROC1_INTE & (1u << 12u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC1_INTE |= 1u << 12u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC1_INTE &= ~(1u << 12u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC1_INTE ^= 1u << 12u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return PROC1_INTE & (1u << 13u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC1_INTE |= 1u << 13u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC1_INTE &= ~(1u << 13u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC1_INTE ^= 1u << 13u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return PROC1_INTE & (1u << 14u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC1_INTE |= 1u << 14u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC1_INTE &= ~(1u << 14u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC1_INTE ^= 1u << 14u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return PROC1_INTE & (1u << 15u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC1_INTE |= 1u << 15u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC1_INTE &= ~(1u << 15u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC1_INTE ^= 1u << 15u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return PROC1_INTE & (1u << 16u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC1_INTE |= 1u << 16u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC1_INTE &= ~(1u << 16u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC1_INTE ^= 1u << 16u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return PROC1_INTE & (1u << 17u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC1_INTE |= 1u << 17u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC1_INTE &= ~(1u << 17u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC1_INTE ^= 1u << 17u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return PROC1_INTE & (1u << 18u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC1_INTE |= 1u << 18u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC1_INTE &= ~(1u << 18u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC1_INTE ^= 1u << 18u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return PROC1_INTE & (1u << 19u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC1_INTE |= 1u << 19u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC1_INTE &= ~(1u << 19u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC1_INTE ^= 1u << 19u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return PROC1_INTE & (1u << 20u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC1_INTE |= 1u << 20u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC1_INTE &= ~(1u << 20u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC1_INTE ^= 1u << 20u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return PROC1_INTE & (1u << 21u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC1_INTE |= 1u << 21u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC1_INTE &= ~(1u << 21u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC1_INTE ^= 1u << 21u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return PROC1_INTE & (1u << 22u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC1_INTE |= 1u << 22u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC1_INTE &= ~(1u << 22u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC1_INTE ^= 1u << 22u;
    }

    /**
     * Get PROC1_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_PROC1_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return PROC1_INTE & (1u << 23u);
    }

    /**
     * Set PROC1_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC1_INTE |= 1u << 23u;
    }

    /**
     * Clear PROC1_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC1_INTE &= ~(1u << 23u);
    }

    /**
     * Toggle PROC1_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC1_INTE ^= 1u << 23u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return PROC1_INTF & (1u << 0u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC1_INTF |= 1u << 0u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC1_INTF &= ~(1u << 0u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        PROC1_INTF ^= 1u << 0u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return PROC1_INTF & (1u << 1u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC1_INTF |= 1u << 1u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC1_INTF &= ~(1u << 1u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        PROC1_INTF ^= 1u << 1u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return PROC1_INTF & (1u << 2u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC1_INTF |= 1u << 2u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC1_INTF &= ~(1u << 2u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        PROC1_INTF ^= 1u << 2u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return PROC1_INTF & (1u << 3u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC1_INTF |= 1u << 3u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC1_INTF &= ~(1u << 3u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        PROC1_INTF ^= 1u << 3u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return PROC1_INTF & (1u << 4u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC1_INTF |= 1u << 4u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC1_INTF &= ~(1u << 4u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        PROC1_INTF ^= 1u << 4u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return PROC1_INTF & (1u << 5u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC1_INTF |= 1u << 5u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC1_INTF &= ~(1u << 5u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        PROC1_INTF ^= 1u << 5u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        return PROC1_INTF & (1u << 6u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC1_INTF |= 1u << 6u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC1_INTF &= ~(1u << 6u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        PROC1_INTF ^= 1u << 6u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return PROC1_INTF & (1u << 7u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC1_INTF |= 1u << 7u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC1_INTF &= ~(1u << 7u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        PROC1_INTF ^= 1u << 7u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return PROC1_INTF & (1u << 8u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC1_INTF |= 1u << 8u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC1_INTF &= ~(1u << 8u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        PROC1_INTF ^= 1u << 8u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return PROC1_INTF & (1u << 9u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC1_INTF |= 1u << 9u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC1_INTF &= ~(1u << 9u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        PROC1_INTF ^= 1u << 9u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return PROC1_INTF & (1u << 10u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC1_INTF |= 1u << 10u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC1_INTF &= ~(1u << 10u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        PROC1_INTF ^= 1u << 10u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return PROC1_INTF & (1u << 11u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC1_INTF |= 1u << 11u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC1_INTF &= ~(1u << 11u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        PROC1_INTF ^= 1u << 11u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return PROC1_INTF & (1u << 12u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC1_INTF |= 1u << 12u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC1_INTF &= ~(1u << 12u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        PROC1_INTF ^= 1u << 12u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return PROC1_INTF & (1u << 13u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC1_INTF |= 1u << 13u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC1_INTF &= ~(1u << 13u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        PROC1_INTF ^= 1u << 13u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return PROC1_INTF & (1u << 14u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC1_INTF |= 1u << 14u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC1_INTF &= ~(1u << 14u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        PROC1_INTF ^= 1u << 14u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return PROC1_INTF & (1u << 15u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC1_INTF |= 1u << 15u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC1_INTF &= ~(1u << 15u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        PROC1_INTF ^= 1u << 15u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return PROC1_INTF & (1u << 16u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC1_INTF |= 1u << 16u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC1_INTF &= ~(1u << 16u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        PROC1_INTF ^= 1u << 16u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return PROC1_INTF & (1u << 17u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC1_INTF |= 1u << 17u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC1_INTF &= ~(1u << 17u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        PROC1_INTF ^= 1u << 17u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return PROC1_INTF & (1u << 18u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC1_INTF |= 1u << 18u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC1_INTF &= ~(1u << 18u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        PROC1_INTF ^= 1u << 18u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return PROC1_INTF & (1u << 19u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC1_INTF |= 1u << 19u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC1_INTF &= ~(1u << 19u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        PROC1_INTF ^= 1u << 19u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return PROC1_INTF & (1u << 20u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC1_INTF |= 1u << 20u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC1_INTF &= ~(1u << 20u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        PROC1_INTF ^= 1u << 20u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return PROC1_INTF & (1u << 21u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC1_INTF |= 1u << 21u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC1_INTF &= ~(1u << 21u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        PROC1_INTF ^= 1u << 21u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return PROC1_INTF & (1u << 22u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC1_INTF |= 1u << 22u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC1_INTF &= ~(1u << 22u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        PROC1_INTF ^= 1u << 22u;
    }

    /**
     * Get PROC1_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_PROC1_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return PROC1_INTF & (1u << 23u);
    }

    /**
     * Set PROC1_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void set_PROC1_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC1_INTF |= 1u << 23u;
    }

    /**
     * Clear PROC1_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void clear_PROC1_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC1_INTF &= ~(1u << 23u);
    }

    /**
     * Toggle PROC1_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void toggle_PROC1_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        PROC1_INTF ^= 1u << 23u;
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return PROC1_INTS & (1u << 0u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return PROC1_INTS & (1u << 1u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return PROC1_INTS & (1u << 2u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return PROC1_INTS & (1u << 3u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return PROC1_INTS & (1u << 4u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return PROC1_INTS & (1u << 5u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SS_EDGE_LOW()
    {
        return PROC1_INTS & (1u << 6u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return PROC1_INTS & (1u << 7u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return PROC1_INTS & (1u << 8u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return PROC1_INTS & (1u << 9u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return PROC1_INTS & (1u << 10u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return PROC1_INTS & (1u << 11u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return PROC1_INTS & (1u << 12u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return PROC1_INTS & (1u << 13u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return PROC1_INTS & (1u << 14u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return PROC1_INTS & (1u << 15u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return PROC1_INTS & (1u << 16u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return PROC1_INTS & (1u << 17u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return PROC1_INTS & (1u << 18u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return PROC1_INTS & (1u << 19u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return PROC1_INTS & (1u << 20u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return PROC1_INTS & (1u << 21u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return PROC1_INTS & (1u << 22u);
    }

    /**
     * Get PROC1_INTS's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_PROC1_INTS_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return PROC1_INTS & (1u << 23u);
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 0u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 0u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 0u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 0u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 1u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 1u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 1u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 1u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 2u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 2u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 2u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 2u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 3u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 3u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 3u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 3u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 4u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 4u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 4u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 4u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 5u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 5u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 5u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 5u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 6u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 6u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 6u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 6u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 7u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 7u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 7u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SS_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 7u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 8u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 8u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 8u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 8u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 9u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 9u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 9u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 9u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 10u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 10u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 10u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 10u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 11u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 11u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 11u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 11u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 12u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 12u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 12u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 12u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 13u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 13u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 13u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 13u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 14u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 14u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 14u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 14u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 15u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 15u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 15u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 15u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 16u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 16u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 16u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 16u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 17u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 17u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 17u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 17u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 18u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 18u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 18u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 18u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 19u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 19u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 19u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 19u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 20u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 20u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 20u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 20u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 21u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 21u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 21u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 21u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return DORMANT_WAKE_INTE & (1u << 22u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        DORMANT_WAKE_INTE |= 1u << 22u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        DORMANT_WAKE_INTE &= ~(1u << 22u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_LOW()
    {
        DORMANT_WAKE_INTE ^= 1u << 22u;
    }

    /**
     * Get DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTE & (1u << 23u);
    }

    /**
     * Set DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE |= 1u << 23u;
    }

    /**
     * Clear DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE &= ~(1u << 23u);
    }

    /**
     * Toggle DORMANT_WAKE_INTE's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTE_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        DORMANT_WAKE_INTE ^= 1u << 23u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 0u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 0u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 0u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 0u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 1u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 1u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 1u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 1u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 2u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 2u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 2u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 2u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 3u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 3u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 3u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 3u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 4u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 4u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 4u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 4u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 5u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 5u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 5u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 5u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 6u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 6u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 6u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 6u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 7u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 7u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 7u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SS_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 7u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 8u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 8u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 8u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 8u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 9u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 9u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 9u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 9u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 10u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 10u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 10u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 10u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 11u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 11u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 11u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 11u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 12u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 12u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 12u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 12u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 13u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 13u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 13u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 13u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 14u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 14u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 14u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 14u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 15u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 15u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 15u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 15u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 16u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 16u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 16u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 16u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 17u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 17u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 17u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 17u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 18u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 18u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 18u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 18u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 19u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 19u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 19u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 19u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 20u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 20u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 20u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 20u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 21u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 21u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 21u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 21u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return DORMANT_WAKE_INTF & (1u << 22u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        DORMANT_WAKE_INTF |= 1u << 22u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        DORMANT_WAKE_INTF &= ~(1u << 22u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_LOW()
    {
        DORMANT_WAKE_INTF ^= 1u << 22u;
    }

    /**
     * Get DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTF & (1u << 23u);
    }

    /**
     * Set DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void set_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF |= 1u << 23u;
    }

    /**
     * Clear DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void clear_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF &= ~(1u << 23u);
    }

    /**
     * Toggle DORMANT_WAKE_INTF's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    inline void toggle_DORMANT_WAKE_INTF_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        DORMANT_WAKE_INTF ^= 1u << 23u;
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SCLK_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SCLK_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 0u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SCLK_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SCLK_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 1u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SCLK_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SCLK_EDGE_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 2u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SCLK_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SCLK_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 3u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SS_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SS_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 4u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SS_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SS_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 5u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SS_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SS_EDGE_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 6u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SS_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SS_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 7u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD0_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD0_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 8u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD0_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD0_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 9u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD0_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD0_EDGE_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 10u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD0_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD0_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 11u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD1_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD1_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 12u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD1_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD1_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 13u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD1_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD1_EDGE_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 14u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD1_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD1_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 15u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD2_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD2_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 16u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD2_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD2_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 17u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD2_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD2_EDGE_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 18u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD2_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD2_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 19u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD3_LEVEL_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD3_LEVEL_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 20u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD3_LEVEL_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD3_LEVEL_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 21u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD3_EDGE_LOW bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD3_EDGE_LOW()
    {
        return DORMANT_WAKE_INTS & (1u << 22u);
    }

    /**
     * Get DORMANT_WAKE_INTS's GPIO_QSPI_SD3_EDGE_HIGH bit.
     */
    bool get_DORMANT_WAKE_INTS_GPIO_QSPI_SD3_EDGE_HIGH()
    {
        return DORMANT_WAKE_INTS & (1u << 23u);
    }
};

static_assert(sizeof(io_qspi) == io_qspi::size);

static volatile io_qspi *const IO_QSPI =
    reinterpret_cast<io_qspi *>(0x40018000);

}; // namespace RP2040
