/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../enums/PADS_BANK0_GPIO0_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO10_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO11_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO12_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO13_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO14_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO15_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO16_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO17_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO18_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO19_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO1_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO20_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO21_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO22_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO23_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO24_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO25_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO26_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO27_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO28_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO29_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO2_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO3_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO4_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO5_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO6_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO7_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO8_DRIVE.h"
#include "../enums/PADS_BANK0_GPIO9_DRIVE.h"
#include "../enums/PADS_BANK0_SWCLK_DRIVE.h"
#include "../enums/PADS_BANK0_SWD_DRIVE.h"
#include "../enums/PADS_BANK0_VOLTAGE_SELECT_VOLTAGE_SELECT.h"
#include "../ifgen/common.h"

namespace RP2040
{

struct [[gnu::packed]] pads_bank0
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1; /*!< pads_bank0's identifier. */
    static constexpr std::size_t size =
        132; /*!< pads_bank0's size in bytes. */

    /* Fields. */
    uint32_t
        VOLTAGE_SELECT; /*!< (read-write) Voltage select. Per bank control */
    uint32_t GPIO0;     /*!< (read-write) Pad control register */
    uint32_t GPIO1;     /*!< (read-write) Pad control register */
    uint32_t GPIO2;     /*!< (read-write) Pad control register */
    uint32_t GPIO3;     /*!< (read-write) Pad control register */
    uint32_t GPIO4;     /*!< (read-write) Pad control register */
    uint32_t GPIO5;     /*!< (read-write) Pad control register */
    uint32_t GPIO6;     /*!< (read-write) Pad control register */
    uint32_t GPIO7;     /*!< (read-write) Pad control register */
    uint32_t GPIO8;     /*!< (read-write) Pad control register */
    uint32_t GPIO9;     /*!< (read-write) Pad control register */
    uint32_t GPIO10;    /*!< (read-write) Pad control register */
    uint32_t GPIO11;    /*!< (read-write) Pad control register */
    uint32_t GPIO12;    /*!< (read-write) Pad control register */
    uint32_t GPIO13;    /*!< (read-write) Pad control register */
    uint32_t GPIO14;    /*!< (read-write) Pad control register */
    uint32_t GPIO15;    /*!< (read-write) Pad control register */
    uint32_t GPIO16;    /*!< (read-write) Pad control register */
    uint32_t GPIO17;    /*!< (read-write) Pad control register */
    uint32_t GPIO18;    /*!< (read-write) Pad control register */
    uint32_t GPIO19;    /*!< (read-write) Pad control register */
    uint32_t GPIO20;    /*!< (read-write) Pad control register */
    uint32_t GPIO21;    /*!< (read-write) Pad control register */
    uint32_t GPIO22;    /*!< (read-write) Pad control register */
    uint32_t GPIO23;    /*!< (read-write) Pad control register */
    uint32_t GPIO24;    /*!< (read-write) Pad control register */
    uint32_t GPIO25;    /*!< (read-write) Pad control register */
    uint32_t GPIO26;    /*!< (read-write) Pad control register */
    uint32_t GPIO27;    /*!< (read-write) Pad control register */
    uint32_t GPIO28;    /*!< (read-write) Pad control register */
    uint32_t GPIO29;    /*!< (read-write) Pad control register */
    uint32_t SWCLK;     /*!< (read-write) Pad control register */
    uint32_t SWD;       /*!< (read-write) Pad control register */

    /* Methods. */

    /**
     * Get VOLTAGE_SELECT's VOLTAGE_SELECT bit.
     */
    inline PADS_BANK0_VOLTAGE_SELECT_VOLTAGE_SELECT
    get_VOLTAGE_SELECT_VOLTAGE_SELECT()
    {
        return PADS_BANK0_VOLTAGE_SELECT_VOLTAGE_SELECT(VOLTAGE_SELECT &
                                                        (1u << 0u));
    }

    /**
     * Set VOLTAGE_SELECT's VOLTAGE_SELECT bit.
     */
    inline void set_VOLTAGE_SELECT_VOLTAGE_SELECT()
    {
        VOLTAGE_SELECT |= 1u << 0u;
    }

    /**
     * Clear VOLTAGE_SELECT's VOLTAGE_SELECT bit.
     */
    inline void clear_VOLTAGE_SELECT_VOLTAGE_SELECT()
    {
        VOLTAGE_SELECT &= ~(1u << 0u);
    }

    /**
     * Toggle VOLTAGE_SELECT's VOLTAGE_SELECT bit.
     */
    inline void toggle_VOLTAGE_SELECT_VOLTAGE_SELECT()
    {
        VOLTAGE_SELECT ^= 1u << 0u;
    }

    /**
     * Get GPIO0's SLEWFAST bit.
     */
    inline bool get_GPIO0_SLEWFAST()
    {
        return GPIO0 & (1u << 0u);
    }

    /**
     * Set GPIO0's SLEWFAST bit.
     */
    inline void set_GPIO0_SLEWFAST()
    {
        GPIO0 |= 1u << 0u;
    }

    /**
     * Clear GPIO0's SLEWFAST bit.
     */
    inline void clear_GPIO0_SLEWFAST()
    {
        GPIO0 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO0's SLEWFAST bit.
     */
    inline void toggle_GPIO0_SLEWFAST()
    {
        GPIO0 ^= 1u << 0u;
    }

    /**
     * Get GPIO0's SCHMITT bit.
     */
    inline bool get_GPIO0_SCHMITT()
    {
        return GPIO0 & (1u << 1u);
    }

    /**
     * Set GPIO0's SCHMITT bit.
     */
    inline void set_GPIO0_SCHMITT()
    {
        GPIO0 |= 1u << 1u;
    }

    /**
     * Clear GPIO0's SCHMITT bit.
     */
    inline void clear_GPIO0_SCHMITT()
    {
        GPIO0 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO0's SCHMITT bit.
     */
    inline void toggle_GPIO0_SCHMITT()
    {
        GPIO0 ^= 1u << 1u;
    }

    /**
     * Get GPIO0's PDE bit.
     */
    inline bool get_GPIO0_PDE()
    {
        return GPIO0 & (1u << 2u);
    }

    /**
     * Set GPIO0's PDE bit.
     */
    inline void set_GPIO0_PDE()
    {
        GPIO0 |= 1u << 2u;
    }

    /**
     * Clear GPIO0's PDE bit.
     */
    inline void clear_GPIO0_PDE()
    {
        GPIO0 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO0's PDE bit.
     */
    inline void toggle_GPIO0_PDE()
    {
        GPIO0 ^= 1u << 2u;
    }

    /**
     * Get GPIO0's PUE bit.
     */
    inline bool get_GPIO0_PUE()
    {
        return GPIO0 & (1u << 3u);
    }

    /**
     * Set GPIO0's PUE bit.
     */
    inline void set_GPIO0_PUE()
    {
        GPIO0 |= 1u << 3u;
    }

    /**
     * Clear GPIO0's PUE bit.
     */
    inline void clear_GPIO0_PUE()
    {
        GPIO0 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO0's PUE bit.
     */
    inline void toggle_GPIO0_PUE()
    {
        GPIO0 ^= 1u << 3u;
    }

    /**
     * Get GPIO0's DRIVE field.
     */
    inline PADS_BANK0_GPIO0_DRIVE get_GPIO0_DRIVE()
    {
        return PADS_BANK0_GPIO0_DRIVE((GPIO0 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO0's DRIVE field.
     */
    inline void set_GPIO0_DRIVE(PADS_BANK0_GPIO0_DRIVE value)
    {
        uint32_t curr = GPIO0;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO0 = curr;
    }

    /**
     * Get GPIO0's IE bit.
     */
    inline bool get_GPIO0_IE()
    {
        return GPIO0 & (1u << 6u);
    }

    /**
     * Set GPIO0's IE bit.
     */
    inline void set_GPIO0_IE()
    {
        GPIO0 |= 1u << 6u;
    }

    /**
     * Clear GPIO0's IE bit.
     */
    inline void clear_GPIO0_IE()
    {
        GPIO0 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO0's IE bit.
     */
    inline void toggle_GPIO0_IE()
    {
        GPIO0 ^= 1u << 6u;
    }

    /**
     * Get GPIO0's OD bit.
     */
    inline bool get_GPIO0_OD()
    {
        return GPIO0 & (1u << 7u);
    }

    /**
     * Set GPIO0's OD bit.
     */
    inline void set_GPIO0_OD()
    {
        GPIO0 |= 1u << 7u;
    }

    /**
     * Clear GPIO0's OD bit.
     */
    inline void clear_GPIO0_OD()
    {
        GPIO0 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO0's OD bit.
     */
    inline void toggle_GPIO0_OD()
    {
        GPIO0 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO0's bit fields.
     */
    inline void get_GPIO0(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO0_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO0;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO0_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO0's bit fields.
     */
    inline void set_GPIO0(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO0_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO0;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO0 = curr;
    }

    /**
     * Get GPIO1's SLEWFAST bit.
     */
    inline bool get_GPIO1_SLEWFAST()
    {
        return GPIO1 & (1u << 0u);
    }

    /**
     * Set GPIO1's SLEWFAST bit.
     */
    inline void set_GPIO1_SLEWFAST()
    {
        GPIO1 |= 1u << 0u;
    }

    /**
     * Clear GPIO1's SLEWFAST bit.
     */
    inline void clear_GPIO1_SLEWFAST()
    {
        GPIO1 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO1's SLEWFAST bit.
     */
    inline void toggle_GPIO1_SLEWFAST()
    {
        GPIO1 ^= 1u << 0u;
    }

    /**
     * Get GPIO1's SCHMITT bit.
     */
    inline bool get_GPIO1_SCHMITT()
    {
        return GPIO1 & (1u << 1u);
    }

    /**
     * Set GPIO1's SCHMITT bit.
     */
    inline void set_GPIO1_SCHMITT()
    {
        GPIO1 |= 1u << 1u;
    }

    /**
     * Clear GPIO1's SCHMITT bit.
     */
    inline void clear_GPIO1_SCHMITT()
    {
        GPIO1 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO1's SCHMITT bit.
     */
    inline void toggle_GPIO1_SCHMITT()
    {
        GPIO1 ^= 1u << 1u;
    }

    /**
     * Get GPIO1's PDE bit.
     */
    inline bool get_GPIO1_PDE()
    {
        return GPIO1 & (1u << 2u);
    }

    /**
     * Set GPIO1's PDE bit.
     */
    inline void set_GPIO1_PDE()
    {
        GPIO1 |= 1u << 2u;
    }

    /**
     * Clear GPIO1's PDE bit.
     */
    inline void clear_GPIO1_PDE()
    {
        GPIO1 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO1's PDE bit.
     */
    inline void toggle_GPIO1_PDE()
    {
        GPIO1 ^= 1u << 2u;
    }

    /**
     * Get GPIO1's PUE bit.
     */
    inline bool get_GPIO1_PUE()
    {
        return GPIO1 & (1u << 3u);
    }

    /**
     * Set GPIO1's PUE bit.
     */
    inline void set_GPIO1_PUE()
    {
        GPIO1 |= 1u << 3u;
    }

    /**
     * Clear GPIO1's PUE bit.
     */
    inline void clear_GPIO1_PUE()
    {
        GPIO1 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO1's PUE bit.
     */
    inline void toggle_GPIO1_PUE()
    {
        GPIO1 ^= 1u << 3u;
    }

    /**
     * Get GPIO1's DRIVE field.
     */
    inline PADS_BANK0_GPIO1_DRIVE get_GPIO1_DRIVE()
    {
        return PADS_BANK0_GPIO1_DRIVE((GPIO1 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO1's DRIVE field.
     */
    inline void set_GPIO1_DRIVE(PADS_BANK0_GPIO1_DRIVE value)
    {
        uint32_t curr = GPIO1;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO1 = curr;
    }

    /**
     * Get GPIO1's IE bit.
     */
    inline bool get_GPIO1_IE()
    {
        return GPIO1 & (1u << 6u);
    }

    /**
     * Set GPIO1's IE bit.
     */
    inline void set_GPIO1_IE()
    {
        GPIO1 |= 1u << 6u;
    }

    /**
     * Clear GPIO1's IE bit.
     */
    inline void clear_GPIO1_IE()
    {
        GPIO1 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO1's IE bit.
     */
    inline void toggle_GPIO1_IE()
    {
        GPIO1 ^= 1u << 6u;
    }

    /**
     * Get GPIO1's OD bit.
     */
    inline bool get_GPIO1_OD()
    {
        return GPIO1 & (1u << 7u);
    }

    /**
     * Set GPIO1's OD bit.
     */
    inline void set_GPIO1_OD()
    {
        GPIO1 |= 1u << 7u;
    }

    /**
     * Clear GPIO1's OD bit.
     */
    inline void clear_GPIO1_OD()
    {
        GPIO1 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO1's OD bit.
     */
    inline void toggle_GPIO1_OD()
    {
        GPIO1 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO1's bit fields.
     */
    inline void get_GPIO1(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO1_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO1;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO1_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO1's bit fields.
     */
    inline void set_GPIO1(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO1_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO1;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO1 = curr;
    }

    /**
     * Get GPIO2's SLEWFAST bit.
     */
    inline bool get_GPIO2_SLEWFAST()
    {
        return GPIO2 & (1u << 0u);
    }

    /**
     * Set GPIO2's SLEWFAST bit.
     */
    inline void set_GPIO2_SLEWFAST()
    {
        GPIO2 |= 1u << 0u;
    }

    /**
     * Clear GPIO2's SLEWFAST bit.
     */
    inline void clear_GPIO2_SLEWFAST()
    {
        GPIO2 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO2's SLEWFAST bit.
     */
    inline void toggle_GPIO2_SLEWFAST()
    {
        GPIO2 ^= 1u << 0u;
    }

    /**
     * Get GPIO2's SCHMITT bit.
     */
    inline bool get_GPIO2_SCHMITT()
    {
        return GPIO2 & (1u << 1u);
    }

    /**
     * Set GPIO2's SCHMITT bit.
     */
    inline void set_GPIO2_SCHMITT()
    {
        GPIO2 |= 1u << 1u;
    }

    /**
     * Clear GPIO2's SCHMITT bit.
     */
    inline void clear_GPIO2_SCHMITT()
    {
        GPIO2 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO2's SCHMITT bit.
     */
    inline void toggle_GPIO2_SCHMITT()
    {
        GPIO2 ^= 1u << 1u;
    }

    /**
     * Get GPIO2's PDE bit.
     */
    inline bool get_GPIO2_PDE()
    {
        return GPIO2 & (1u << 2u);
    }

    /**
     * Set GPIO2's PDE bit.
     */
    inline void set_GPIO2_PDE()
    {
        GPIO2 |= 1u << 2u;
    }

    /**
     * Clear GPIO2's PDE bit.
     */
    inline void clear_GPIO2_PDE()
    {
        GPIO2 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO2's PDE bit.
     */
    inline void toggle_GPIO2_PDE()
    {
        GPIO2 ^= 1u << 2u;
    }

    /**
     * Get GPIO2's PUE bit.
     */
    inline bool get_GPIO2_PUE()
    {
        return GPIO2 & (1u << 3u);
    }

    /**
     * Set GPIO2's PUE bit.
     */
    inline void set_GPIO2_PUE()
    {
        GPIO2 |= 1u << 3u;
    }

    /**
     * Clear GPIO2's PUE bit.
     */
    inline void clear_GPIO2_PUE()
    {
        GPIO2 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO2's PUE bit.
     */
    inline void toggle_GPIO2_PUE()
    {
        GPIO2 ^= 1u << 3u;
    }

    /**
     * Get GPIO2's DRIVE field.
     */
    inline PADS_BANK0_GPIO2_DRIVE get_GPIO2_DRIVE()
    {
        return PADS_BANK0_GPIO2_DRIVE((GPIO2 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO2's DRIVE field.
     */
    inline void set_GPIO2_DRIVE(PADS_BANK0_GPIO2_DRIVE value)
    {
        uint32_t curr = GPIO2;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO2 = curr;
    }

    /**
     * Get GPIO2's IE bit.
     */
    inline bool get_GPIO2_IE()
    {
        return GPIO2 & (1u << 6u);
    }

    /**
     * Set GPIO2's IE bit.
     */
    inline void set_GPIO2_IE()
    {
        GPIO2 |= 1u << 6u;
    }

    /**
     * Clear GPIO2's IE bit.
     */
    inline void clear_GPIO2_IE()
    {
        GPIO2 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO2's IE bit.
     */
    inline void toggle_GPIO2_IE()
    {
        GPIO2 ^= 1u << 6u;
    }

    /**
     * Get GPIO2's OD bit.
     */
    inline bool get_GPIO2_OD()
    {
        return GPIO2 & (1u << 7u);
    }

    /**
     * Set GPIO2's OD bit.
     */
    inline void set_GPIO2_OD()
    {
        GPIO2 |= 1u << 7u;
    }

    /**
     * Clear GPIO2's OD bit.
     */
    inline void clear_GPIO2_OD()
    {
        GPIO2 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO2's OD bit.
     */
    inline void toggle_GPIO2_OD()
    {
        GPIO2 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO2's bit fields.
     */
    inline void get_GPIO2(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO2_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO2;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO2_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO2's bit fields.
     */
    inline void set_GPIO2(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO2_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO2;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO2 = curr;
    }

    /**
     * Get GPIO3's SLEWFAST bit.
     */
    inline bool get_GPIO3_SLEWFAST()
    {
        return GPIO3 & (1u << 0u);
    }

    /**
     * Set GPIO3's SLEWFAST bit.
     */
    inline void set_GPIO3_SLEWFAST()
    {
        GPIO3 |= 1u << 0u;
    }

    /**
     * Clear GPIO3's SLEWFAST bit.
     */
    inline void clear_GPIO3_SLEWFAST()
    {
        GPIO3 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO3's SLEWFAST bit.
     */
    inline void toggle_GPIO3_SLEWFAST()
    {
        GPIO3 ^= 1u << 0u;
    }

    /**
     * Get GPIO3's SCHMITT bit.
     */
    inline bool get_GPIO3_SCHMITT()
    {
        return GPIO3 & (1u << 1u);
    }

    /**
     * Set GPIO3's SCHMITT bit.
     */
    inline void set_GPIO3_SCHMITT()
    {
        GPIO3 |= 1u << 1u;
    }

    /**
     * Clear GPIO3's SCHMITT bit.
     */
    inline void clear_GPIO3_SCHMITT()
    {
        GPIO3 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO3's SCHMITT bit.
     */
    inline void toggle_GPIO3_SCHMITT()
    {
        GPIO3 ^= 1u << 1u;
    }

    /**
     * Get GPIO3's PDE bit.
     */
    inline bool get_GPIO3_PDE()
    {
        return GPIO3 & (1u << 2u);
    }

    /**
     * Set GPIO3's PDE bit.
     */
    inline void set_GPIO3_PDE()
    {
        GPIO3 |= 1u << 2u;
    }

    /**
     * Clear GPIO3's PDE bit.
     */
    inline void clear_GPIO3_PDE()
    {
        GPIO3 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO3's PDE bit.
     */
    inline void toggle_GPIO3_PDE()
    {
        GPIO3 ^= 1u << 2u;
    }

    /**
     * Get GPIO3's PUE bit.
     */
    inline bool get_GPIO3_PUE()
    {
        return GPIO3 & (1u << 3u);
    }

    /**
     * Set GPIO3's PUE bit.
     */
    inline void set_GPIO3_PUE()
    {
        GPIO3 |= 1u << 3u;
    }

    /**
     * Clear GPIO3's PUE bit.
     */
    inline void clear_GPIO3_PUE()
    {
        GPIO3 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO3's PUE bit.
     */
    inline void toggle_GPIO3_PUE()
    {
        GPIO3 ^= 1u << 3u;
    }

    /**
     * Get GPIO3's DRIVE field.
     */
    inline PADS_BANK0_GPIO3_DRIVE get_GPIO3_DRIVE()
    {
        return PADS_BANK0_GPIO3_DRIVE((GPIO3 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO3's DRIVE field.
     */
    inline void set_GPIO3_DRIVE(PADS_BANK0_GPIO3_DRIVE value)
    {
        uint32_t curr = GPIO3;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO3 = curr;
    }

    /**
     * Get GPIO3's IE bit.
     */
    inline bool get_GPIO3_IE()
    {
        return GPIO3 & (1u << 6u);
    }

    /**
     * Set GPIO3's IE bit.
     */
    inline void set_GPIO3_IE()
    {
        GPIO3 |= 1u << 6u;
    }

    /**
     * Clear GPIO3's IE bit.
     */
    inline void clear_GPIO3_IE()
    {
        GPIO3 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO3's IE bit.
     */
    inline void toggle_GPIO3_IE()
    {
        GPIO3 ^= 1u << 6u;
    }

    /**
     * Get GPIO3's OD bit.
     */
    inline bool get_GPIO3_OD()
    {
        return GPIO3 & (1u << 7u);
    }

    /**
     * Set GPIO3's OD bit.
     */
    inline void set_GPIO3_OD()
    {
        GPIO3 |= 1u << 7u;
    }

    /**
     * Clear GPIO3's OD bit.
     */
    inline void clear_GPIO3_OD()
    {
        GPIO3 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO3's OD bit.
     */
    inline void toggle_GPIO3_OD()
    {
        GPIO3 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO3's bit fields.
     */
    inline void get_GPIO3(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO3_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO3;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO3_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO3's bit fields.
     */
    inline void set_GPIO3(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO3_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO3;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO3 = curr;
    }

    /**
     * Get GPIO4's SLEWFAST bit.
     */
    inline bool get_GPIO4_SLEWFAST()
    {
        return GPIO4 & (1u << 0u);
    }

    /**
     * Set GPIO4's SLEWFAST bit.
     */
    inline void set_GPIO4_SLEWFAST()
    {
        GPIO4 |= 1u << 0u;
    }

    /**
     * Clear GPIO4's SLEWFAST bit.
     */
    inline void clear_GPIO4_SLEWFAST()
    {
        GPIO4 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO4's SLEWFAST bit.
     */
    inline void toggle_GPIO4_SLEWFAST()
    {
        GPIO4 ^= 1u << 0u;
    }

    /**
     * Get GPIO4's SCHMITT bit.
     */
    inline bool get_GPIO4_SCHMITT()
    {
        return GPIO4 & (1u << 1u);
    }

    /**
     * Set GPIO4's SCHMITT bit.
     */
    inline void set_GPIO4_SCHMITT()
    {
        GPIO4 |= 1u << 1u;
    }

    /**
     * Clear GPIO4's SCHMITT bit.
     */
    inline void clear_GPIO4_SCHMITT()
    {
        GPIO4 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO4's SCHMITT bit.
     */
    inline void toggle_GPIO4_SCHMITT()
    {
        GPIO4 ^= 1u << 1u;
    }

    /**
     * Get GPIO4's PDE bit.
     */
    inline bool get_GPIO4_PDE()
    {
        return GPIO4 & (1u << 2u);
    }

    /**
     * Set GPIO4's PDE bit.
     */
    inline void set_GPIO4_PDE()
    {
        GPIO4 |= 1u << 2u;
    }

    /**
     * Clear GPIO4's PDE bit.
     */
    inline void clear_GPIO4_PDE()
    {
        GPIO4 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO4's PDE bit.
     */
    inline void toggle_GPIO4_PDE()
    {
        GPIO4 ^= 1u << 2u;
    }

    /**
     * Get GPIO4's PUE bit.
     */
    inline bool get_GPIO4_PUE()
    {
        return GPIO4 & (1u << 3u);
    }

    /**
     * Set GPIO4's PUE bit.
     */
    inline void set_GPIO4_PUE()
    {
        GPIO4 |= 1u << 3u;
    }

    /**
     * Clear GPIO4's PUE bit.
     */
    inline void clear_GPIO4_PUE()
    {
        GPIO4 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO4's PUE bit.
     */
    inline void toggle_GPIO4_PUE()
    {
        GPIO4 ^= 1u << 3u;
    }

    /**
     * Get GPIO4's DRIVE field.
     */
    inline PADS_BANK0_GPIO4_DRIVE get_GPIO4_DRIVE()
    {
        return PADS_BANK0_GPIO4_DRIVE((GPIO4 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO4's DRIVE field.
     */
    inline void set_GPIO4_DRIVE(PADS_BANK0_GPIO4_DRIVE value)
    {
        uint32_t curr = GPIO4;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO4 = curr;
    }

    /**
     * Get GPIO4's IE bit.
     */
    inline bool get_GPIO4_IE()
    {
        return GPIO4 & (1u << 6u);
    }

    /**
     * Set GPIO4's IE bit.
     */
    inline void set_GPIO4_IE()
    {
        GPIO4 |= 1u << 6u;
    }

    /**
     * Clear GPIO4's IE bit.
     */
    inline void clear_GPIO4_IE()
    {
        GPIO4 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO4's IE bit.
     */
    inline void toggle_GPIO4_IE()
    {
        GPIO4 ^= 1u << 6u;
    }

    /**
     * Get GPIO4's OD bit.
     */
    inline bool get_GPIO4_OD()
    {
        return GPIO4 & (1u << 7u);
    }

    /**
     * Set GPIO4's OD bit.
     */
    inline void set_GPIO4_OD()
    {
        GPIO4 |= 1u << 7u;
    }

    /**
     * Clear GPIO4's OD bit.
     */
    inline void clear_GPIO4_OD()
    {
        GPIO4 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO4's OD bit.
     */
    inline void toggle_GPIO4_OD()
    {
        GPIO4 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO4's bit fields.
     */
    inline void get_GPIO4(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO4_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO4;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO4_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO4's bit fields.
     */
    inline void set_GPIO4(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO4_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO4;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO4 = curr;
    }

    /**
     * Get GPIO5's SLEWFAST bit.
     */
    inline bool get_GPIO5_SLEWFAST()
    {
        return GPIO5 & (1u << 0u);
    }

    /**
     * Set GPIO5's SLEWFAST bit.
     */
    inline void set_GPIO5_SLEWFAST()
    {
        GPIO5 |= 1u << 0u;
    }

    /**
     * Clear GPIO5's SLEWFAST bit.
     */
    inline void clear_GPIO5_SLEWFAST()
    {
        GPIO5 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO5's SLEWFAST bit.
     */
    inline void toggle_GPIO5_SLEWFAST()
    {
        GPIO5 ^= 1u << 0u;
    }

    /**
     * Get GPIO5's SCHMITT bit.
     */
    inline bool get_GPIO5_SCHMITT()
    {
        return GPIO5 & (1u << 1u);
    }

    /**
     * Set GPIO5's SCHMITT bit.
     */
    inline void set_GPIO5_SCHMITT()
    {
        GPIO5 |= 1u << 1u;
    }

    /**
     * Clear GPIO5's SCHMITT bit.
     */
    inline void clear_GPIO5_SCHMITT()
    {
        GPIO5 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO5's SCHMITT bit.
     */
    inline void toggle_GPIO5_SCHMITT()
    {
        GPIO5 ^= 1u << 1u;
    }

    /**
     * Get GPIO5's PDE bit.
     */
    inline bool get_GPIO5_PDE()
    {
        return GPIO5 & (1u << 2u);
    }

    /**
     * Set GPIO5's PDE bit.
     */
    inline void set_GPIO5_PDE()
    {
        GPIO5 |= 1u << 2u;
    }

    /**
     * Clear GPIO5's PDE bit.
     */
    inline void clear_GPIO5_PDE()
    {
        GPIO5 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO5's PDE bit.
     */
    inline void toggle_GPIO5_PDE()
    {
        GPIO5 ^= 1u << 2u;
    }

    /**
     * Get GPIO5's PUE bit.
     */
    inline bool get_GPIO5_PUE()
    {
        return GPIO5 & (1u << 3u);
    }

    /**
     * Set GPIO5's PUE bit.
     */
    inline void set_GPIO5_PUE()
    {
        GPIO5 |= 1u << 3u;
    }

    /**
     * Clear GPIO5's PUE bit.
     */
    inline void clear_GPIO5_PUE()
    {
        GPIO5 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO5's PUE bit.
     */
    inline void toggle_GPIO5_PUE()
    {
        GPIO5 ^= 1u << 3u;
    }

    /**
     * Get GPIO5's DRIVE field.
     */
    inline PADS_BANK0_GPIO5_DRIVE get_GPIO5_DRIVE()
    {
        return PADS_BANK0_GPIO5_DRIVE((GPIO5 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO5's DRIVE field.
     */
    inline void set_GPIO5_DRIVE(PADS_BANK0_GPIO5_DRIVE value)
    {
        uint32_t curr = GPIO5;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO5 = curr;
    }

    /**
     * Get GPIO5's IE bit.
     */
    inline bool get_GPIO5_IE()
    {
        return GPIO5 & (1u << 6u);
    }

    /**
     * Set GPIO5's IE bit.
     */
    inline void set_GPIO5_IE()
    {
        GPIO5 |= 1u << 6u;
    }

    /**
     * Clear GPIO5's IE bit.
     */
    inline void clear_GPIO5_IE()
    {
        GPIO5 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO5's IE bit.
     */
    inline void toggle_GPIO5_IE()
    {
        GPIO5 ^= 1u << 6u;
    }

    /**
     * Get GPIO5's OD bit.
     */
    inline bool get_GPIO5_OD()
    {
        return GPIO5 & (1u << 7u);
    }

    /**
     * Set GPIO5's OD bit.
     */
    inline void set_GPIO5_OD()
    {
        GPIO5 |= 1u << 7u;
    }

    /**
     * Clear GPIO5's OD bit.
     */
    inline void clear_GPIO5_OD()
    {
        GPIO5 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO5's OD bit.
     */
    inline void toggle_GPIO5_OD()
    {
        GPIO5 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO5's bit fields.
     */
    inline void get_GPIO5(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO5_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO5;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO5_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO5's bit fields.
     */
    inline void set_GPIO5(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO5_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO5;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO5 = curr;
    }

    /**
     * Get GPIO6's SLEWFAST bit.
     */
    inline bool get_GPIO6_SLEWFAST()
    {
        return GPIO6 & (1u << 0u);
    }

    /**
     * Set GPIO6's SLEWFAST bit.
     */
    inline void set_GPIO6_SLEWFAST()
    {
        GPIO6 |= 1u << 0u;
    }

    /**
     * Clear GPIO6's SLEWFAST bit.
     */
    inline void clear_GPIO6_SLEWFAST()
    {
        GPIO6 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO6's SLEWFAST bit.
     */
    inline void toggle_GPIO6_SLEWFAST()
    {
        GPIO6 ^= 1u << 0u;
    }

    /**
     * Get GPIO6's SCHMITT bit.
     */
    inline bool get_GPIO6_SCHMITT()
    {
        return GPIO6 & (1u << 1u);
    }

    /**
     * Set GPIO6's SCHMITT bit.
     */
    inline void set_GPIO6_SCHMITT()
    {
        GPIO6 |= 1u << 1u;
    }

    /**
     * Clear GPIO6's SCHMITT bit.
     */
    inline void clear_GPIO6_SCHMITT()
    {
        GPIO6 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO6's SCHMITT bit.
     */
    inline void toggle_GPIO6_SCHMITT()
    {
        GPIO6 ^= 1u << 1u;
    }

    /**
     * Get GPIO6's PDE bit.
     */
    inline bool get_GPIO6_PDE()
    {
        return GPIO6 & (1u << 2u);
    }

    /**
     * Set GPIO6's PDE bit.
     */
    inline void set_GPIO6_PDE()
    {
        GPIO6 |= 1u << 2u;
    }

    /**
     * Clear GPIO6's PDE bit.
     */
    inline void clear_GPIO6_PDE()
    {
        GPIO6 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO6's PDE bit.
     */
    inline void toggle_GPIO6_PDE()
    {
        GPIO6 ^= 1u << 2u;
    }

    /**
     * Get GPIO6's PUE bit.
     */
    inline bool get_GPIO6_PUE()
    {
        return GPIO6 & (1u << 3u);
    }

    /**
     * Set GPIO6's PUE bit.
     */
    inline void set_GPIO6_PUE()
    {
        GPIO6 |= 1u << 3u;
    }

    /**
     * Clear GPIO6's PUE bit.
     */
    inline void clear_GPIO6_PUE()
    {
        GPIO6 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO6's PUE bit.
     */
    inline void toggle_GPIO6_PUE()
    {
        GPIO6 ^= 1u << 3u;
    }

    /**
     * Get GPIO6's DRIVE field.
     */
    inline PADS_BANK0_GPIO6_DRIVE get_GPIO6_DRIVE()
    {
        return PADS_BANK0_GPIO6_DRIVE((GPIO6 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO6's DRIVE field.
     */
    inline void set_GPIO6_DRIVE(PADS_BANK0_GPIO6_DRIVE value)
    {
        uint32_t curr = GPIO6;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO6 = curr;
    }

    /**
     * Get GPIO6's IE bit.
     */
    inline bool get_GPIO6_IE()
    {
        return GPIO6 & (1u << 6u);
    }

    /**
     * Set GPIO6's IE bit.
     */
    inline void set_GPIO6_IE()
    {
        GPIO6 |= 1u << 6u;
    }

    /**
     * Clear GPIO6's IE bit.
     */
    inline void clear_GPIO6_IE()
    {
        GPIO6 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO6's IE bit.
     */
    inline void toggle_GPIO6_IE()
    {
        GPIO6 ^= 1u << 6u;
    }

    /**
     * Get GPIO6's OD bit.
     */
    inline bool get_GPIO6_OD()
    {
        return GPIO6 & (1u << 7u);
    }

    /**
     * Set GPIO6's OD bit.
     */
    inline void set_GPIO6_OD()
    {
        GPIO6 |= 1u << 7u;
    }

    /**
     * Clear GPIO6's OD bit.
     */
    inline void clear_GPIO6_OD()
    {
        GPIO6 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO6's OD bit.
     */
    inline void toggle_GPIO6_OD()
    {
        GPIO6 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO6's bit fields.
     */
    inline void get_GPIO6(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO6_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO6;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO6_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO6's bit fields.
     */
    inline void set_GPIO6(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO6_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO6;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO6 = curr;
    }

    /**
     * Get GPIO7's SLEWFAST bit.
     */
    inline bool get_GPIO7_SLEWFAST()
    {
        return GPIO7 & (1u << 0u);
    }

    /**
     * Set GPIO7's SLEWFAST bit.
     */
    inline void set_GPIO7_SLEWFAST()
    {
        GPIO7 |= 1u << 0u;
    }

    /**
     * Clear GPIO7's SLEWFAST bit.
     */
    inline void clear_GPIO7_SLEWFAST()
    {
        GPIO7 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO7's SLEWFAST bit.
     */
    inline void toggle_GPIO7_SLEWFAST()
    {
        GPIO7 ^= 1u << 0u;
    }

    /**
     * Get GPIO7's SCHMITT bit.
     */
    inline bool get_GPIO7_SCHMITT()
    {
        return GPIO7 & (1u << 1u);
    }

    /**
     * Set GPIO7's SCHMITT bit.
     */
    inline void set_GPIO7_SCHMITT()
    {
        GPIO7 |= 1u << 1u;
    }

    /**
     * Clear GPIO7's SCHMITT bit.
     */
    inline void clear_GPIO7_SCHMITT()
    {
        GPIO7 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO7's SCHMITT bit.
     */
    inline void toggle_GPIO7_SCHMITT()
    {
        GPIO7 ^= 1u << 1u;
    }

    /**
     * Get GPIO7's PDE bit.
     */
    inline bool get_GPIO7_PDE()
    {
        return GPIO7 & (1u << 2u);
    }

    /**
     * Set GPIO7's PDE bit.
     */
    inline void set_GPIO7_PDE()
    {
        GPIO7 |= 1u << 2u;
    }

    /**
     * Clear GPIO7's PDE bit.
     */
    inline void clear_GPIO7_PDE()
    {
        GPIO7 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO7's PDE bit.
     */
    inline void toggle_GPIO7_PDE()
    {
        GPIO7 ^= 1u << 2u;
    }

    /**
     * Get GPIO7's PUE bit.
     */
    inline bool get_GPIO7_PUE()
    {
        return GPIO7 & (1u << 3u);
    }

    /**
     * Set GPIO7's PUE bit.
     */
    inline void set_GPIO7_PUE()
    {
        GPIO7 |= 1u << 3u;
    }

    /**
     * Clear GPIO7's PUE bit.
     */
    inline void clear_GPIO7_PUE()
    {
        GPIO7 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO7's PUE bit.
     */
    inline void toggle_GPIO7_PUE()
    {
        GPIO7 ^= 1u << 3u;
    }

    /**
     * Get GPIO7's DRIVE field.
     */
    inline PADS_BANK0_GPIO7_DRIVE get_GPIO7_DRIVE()
    {
        return PADS_BANK0_GPIO7_DRIVE((GPIO7 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO7's DRIVE field.
     */
    inline void set_GPIO7_DRIVE(PADS_BANK0_GPIO7_DRIVE value)
    {
        uint32_t curr = GPIO7;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO7 = curr;
    }

    /**
     * Get GPIO7's IE bit.
     */
    inline bool get_GPIO7_IE()
    {
        return GPIO7 & (1u << 6u);
    }

    /**
     * Set GPIO7's IE bit.
     */
    inline void set_GPIO7_IE()
    {
        GPIO7 |= 1u << 6u;
    }

    /**
     * Clear GPIO7's IE bit.
     */
    inline void clear_GPIO7_IE()
    {
        GPIO7 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO7's IE bit.
     */
    inline void toggle_GPIO7_IE()
    {
        GPIO7 ^= 1u << 6u;
    }

    /**
     * Get GPIO7's OD bit.
     */
    inline bool get_GPIO7_OD()
    {
        return GPIO7 & (1u << 7u);
    }

    /**
     * Set GPIO7's OD bit.
     */
    inline void set_GPIO7_OD()
    {
        GPIO7 |= 1u << 7u;
    }

    /**
     * Clear GPIO7's OD bit.
     */
    inline void clear_GPIO7_OD()
    {
        GPIO7 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO7's OD bit.
     */
    inline void toggle_GPIO7_OD()
    {
        GPIO7 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO7's bit fields.
     */
    inline void get_GPIO7(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO7_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO7;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO7_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO7's bit fields.
     */
    inline void set_GPIO7(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO7_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO7;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO7 = curr;
    }

    /**
     * Get GPIO8's SLEWFAST bit.
     */
    inline bool get_GPIO8_SLEWFAST()
    {
        return GPIO8 & (1u << 0u);
    }

    /**
     * Set GPIO8's SLEWFAST bit.
     */
    inline void set_GPIO8_SLEWFAST()
    {
        GPIO8 |= 1u << 0u;
    }

    /**
     * Clear GPIO8's SLEWFAST bit.
     */
    inline void clear_GPIO8_SLEWFAST()
    {
        GPIO8 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO8's SLEWFAST bit.
     */
    inline void toggle_GPIO8_SLEWFAST()
    {
        GPIO8 ^= 1u << 0u;
    }

    /**
     * Get GPIO8's SCHMITT bit.
     */
    inline bool get_GPIO8_SCHMITT()
    {
        return GPIO8 & (1u << 1u);
    }

    /**
     * Set GPIO8's SCHMITT bit.
     */
    inline void set_GPIO8_SCHMITT()
    {
        GPIO8 |= 1u << 1u;
    }

    /**
     * Clear GPIO8's SCHMITT bit.
     */
    inline void clear_GPIO8_SCHMITT()
    {
        GPIO8 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO8's SCHMITT bit.
     */
    inline void toggle_GPIO8_SCHMITT()
    {
        GPIO8 ^= 1u << 1u;
    }

    /**
     * Get GPIO8's PDE bit.
     */
    inline bool get_GPIO8_PDE()
    {
        return GPIO8 & (1u << 2u);
    }

    /**
     * Set GPIO8's PDE bit.
     */
    inline void set_GPIO8_PDE()
    {
        GPIO8 |= 1u << 2u;
    }

    /**
     * Clear GPIO8's PDE bit.
     */
    inline void clear_GPIO8_PDE()
    {
        GPIO8 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO8's PDE bit.
     */
    inline void toggle_GPIO8_PDE()
    {
        GPIO8 ^= 1u << 2u;
    }

    /**
     * Get GPIO8's PUE bit.
     */
    inline bool get_GPIO8_PUE()
    {
        return GPIO8 & (1u << 3u);
    }

    /**
     * Set GPIO8's PUE bit.
     */
    inline void set_GPIO8_PUE()
    {
        GPIO8 |= 1u << 3u;
    }

    /**
     * Clear GPIO8's PUE bit.
     */
    inline void clear_GPIO8_PUE()
    {
        GPIO8 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO8's PUE bit.
     */
    inline void toggle_GPIO8_PUE()
    {
        GPIO8 ^= 1u << 3u;
    }

    /**
     * Get GPIO8's DRIVE field.
     */
    inline PADS_BANK0_GPIO8_DRIVE get_GPIO8_DRIVE()
    {
        return PADS_BANK0_GPIO8_DRIVE((GPIO8 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO8's DRIVE field.
     */
    inline void set_GPIO8_DRIVE(PADS_BANK0_GPIO8_DRIVE value)
    {
        uint32_t curr = GPIO8;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO8 = curr;
    }

    /**
     * Get GPIO8's IE bit.
     */
    inline bool get_GPIO8_IE()
    {
        return GPIO8 & (1u << 6u);
    }

    /**
     * Set GPIO8's IE bit.
     */
    inline void set_GPIO8_IE()
    {
        GPIO8 |= 1u << 6u;
    }

    /**
     * Clear GPIO8's IE bit.
     */
    inline void clear_GPIO8_IE()
    {
        GPIO8 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO8's IE bit.
     */
    inline void toggle_GPIO8_IE()
    {
        GPIO8 ^= 1u << 6u;
    }

    /**
     * Get GPIO8's OD bit.
     */
    inline bool get_GPIO8_OD()
    {
        return GPIO8 & (1u << 7u);
    }

    /**
     * Set GPIO8's OD bit.
     */
    inline void set_GPIO8_OD()
    {
        GPIO8 |= 1u << 7u;
    }

    /**
     * Clear GPIO8's OD bit.
     */
    inline void clear_GPIO8_OD()
    {
        GPIO8 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO8's OD bit.
     */
    inline void toggle_GPIO8_OD()
    {
        GPIO8 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO8's bit fields.
     */
    inline void get_GPIO8(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO8_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO8;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO8_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO8's bit fields.
     */
    inline void set_GPIO8(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO8_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO8;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO8 = curr;
    }

    /**
     * Get GPIO9's SLEWFAST bit.
     */
    inline bool get_GPIO9_SLEWFAST()
    {
        return GPIO9 & (1u << 0u);
    }

    /**
     * Set GPIO9's SLEWFAST bit.
     */
    inline void set_GPIO9_SLEWFAST()
    {
        GPIO9 |= 1u << 0u;
    }

    /**
     * Clear GPIO9's SLEWFAST bit.
     */
    inline void clear_GPIO9_SLEWFAST()
    {
        GPIO9 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO9's SLEWFAST bit.
     */
    inline void toggle_GPIO9_SLEWFAST()
    {
        GPIO9 ^= 1u << 0u;
    }

    /**
     * Get GPIO9's SCHMITT bit.
     */
    inline bool get_GPIO9_SCHMITT()
    {
        return GPIO9 & (1u << 1u);
    }

    /**
     * Set GPIO9's SCHMITT bit.
     */
    inline void set_GPIO9_SCHMITT()
    {
        GPIO9 |= 1u << 1u;
    }

    /**
     * Clear GPIO9's SCHMITT bit.
     */
    inline void clear_GPIO9_SCHMITT()
    {
        GPIO9 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO9's SCHMITT bit.
     */
    inline void toggle_GPIO9_SCHMITT()
    {
        GPIO9 ^= 1u << 1u;
    }

    /**
     * Get GPIO9's PDE bit.
     */
    inline bool get_GPIO9_PDE()
    {
        return GPIO9 & (1u << 2u);
    }

    /**
     * Set GPIO9's PDE bit.
     */
    inline void set_GPIO9_PDE()
    {
        GPIO9 |= 1u << 2u;
    }

    /**
     * Clear GPIO9's PDE bit.
     */
    inline void clear_GPIO9_PDE()
    {
        GPIO9 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO9's PDE bit.
     */
    inline void toggle_GPIO9_PDE()
    {
        GPIO9 ^= 1u << 2u;
    }

    /**
     * Get GPIO9's PUE bit.
     */
    inline bool get_GPIO9_PUE()
    {
        return GPIO9 & (1u << 3u);
    }

    /**
     * Set GPIO9's PUE bit.
     */
    inline void set_GPIO9_PUE()
    {
        GPIO9 |= 1u << 3u;
    }

    /**
     * Clear GPIO9's PUE bit.
     */
    inline void clear_GPIO9_PUE()
    {
        GPIO9 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO9's PUE bit.
     */
    inline void toggle_GPIO9_PUE()
    {
        GPIO9 ^= 1u << 3u;
    }

    /**
     * Get GPIO9's DRIVE field.
     */
    inline PADS_BANK0_GPIO9_DRIVE get_GPIO9_DRIVE()
    {
        return PADS_BANK0_GPIO9_DRIVE((GPIO9 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO9's DRIVE field.
     */
    inline void set_GPIO9_DRIVE(PADS_BANK0_GPIO9_DRIVE value)
    {
        uint32_t curr = GPIO9;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO9 = curr;
    }

    /**
     * Get GPIO9's IE bit.
     */
    inline bool get_GPIO9_IE()
    {
        return GPIO9 & (1u << 6u);
    }

    /**
     * Set GPIO9's IE bit.
     */
    inline void set_GPIO9_IE()
    {
        GPIO9 |= 1u << 6u;
    }

    /**
     * Clear GPIO9's IE bit.
     */
    inline void clear_GPIO9_IE()
    {
        GPIO9 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO9's IE bit.
     */
    inline void toggle_GPIO9_IE()
    {
        GPIO9 ^= 1u << 6u;
    }

    /**
     * Get GPIO9's OD bit.
     */
    inline bool get_GPIO9_OD()
    {
        return GPIO9 & (1u << 7u);
    }

    /**
     * Set GPIO9's OD bit.
     */
    inline void set_GPIO9_OD()
    {
        GPIO9 |= 1u << 7u;
    }

    /**
     * Clear GPIO9's OD bit.
     */
    inline void clear_GPIO9_OD()
    {
        GPIO9 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO9's OD bit.
     */
    inline void toggle_GPIO9_OD()
    {
        GPIO9 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO9's bit fields.
     */
    inline void get_GPIO9(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_GPIO9_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO9;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO9_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO9's bit fields.
     */
    inline void set_GPIO9(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_GPIO9_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO9;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO9 = curr;
    }

    /**
     * Get GPIO10's SLEWFAST bit.
     */
    inline bool get_GPIO10_SLEWFAST()
    {
        return GPIO10 & (1u << 0u);
    }

    /**
     * Set GPIO10's SLEWFAST bit.
     */
    inline void set_GPIO10_SLEWFAST()
    {
        GPIO10 |= 1u << 0u;
    }

    /**
     * Clear GPIO10's SLEWFAST bit.
     */
    inline void clear_GPIO10_SLEWFAST()
    {
        GPIO10 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO10's SLEWFAST bit.
     */
    inline void toggle_GPIO10_SLEWFAST()
    {
        GPIO10 ^= 1u << 0u;
    }

    /**
     * Get GPIO10's SCHMITT bit.
     */
    inline bool get_GPIO10_SCHMITT()
    {
        return GPIO10 & (1u << 1u);
    }

    /**
     * Set GPIO10's SCHMITT bit.
     */
    inline void set_GPIO10_SCHMITT()
    {
        GPIO10 |= 1u << 1u;
    }

    /**
     * Clear GPIO10's SCHMITT bit.
     */
    inline void clear_GPIO10_SCHMITT()
    {
        GPIO10 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO10's SCHMITT bit.
     */
    inline void toggle_GPIO10_SCHMITT()
    {
        GPIO10 ^= 1u << 1u;
    }

    /**
     * Get GPIO10's PDE bit.
     */
    inline bool get_GPIO10_PDE()
    {
        return GPIO10 & (1u << 2u);
    }

    /**
     * Set GPIO10's PDE bit.
     */
    inline void set_GPIO10_PDE()
    {
        GPIO10 |= 1u << 2u;
    }

    /**
     * Clear GPIO10's PDE bit.
     */
    inline void clear_GPIO10_PDE()
    {
        GPIO10 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO10's PDE bit.
     */
    inline void toggle_GPIO10_PDE()
    {
        GPIO10 ^= 1u << 2u;
    }

    /**
     * Get GPIO10's PUE bit.
     */
    inline bool get_GPIO10_PUE()
    {
        return GPIO10 & (1u << 3u);
    }

    /**
     * Set GPIO10's PUE bit.
     */
    inline void set_GPIO10_PUE()
    {
        GPIO10 |= 1u << 3u;
    }

    /**
     * Clear GPIO10's PUE bit.
     */
    inline void clear_GPIO10_PUE()
    {
        GPIO10 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO10's PUE bit.
     */
    inline void toggle_GPIO10_PUE()
    {
        GPIO10 ^= 1u << 3u;
    }

    /**
     * Get GPIO10's DRIVE field.
     */
    inline PADS_BANK0_GPIO10_DRIVE get_GPIO10_DRIVE()
    {
        return PADS_BANK0_GPIO10_DRIVE((GPIO10 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO10's DRIVE field.
     */
    inline void set_GPIO10_DRIVE(PADS_BANK0_GPIO10_DRIVE value)
    {
        uint32_t curr = GPIO10;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO10 = curr;
    }

    /**
     * Get GPIO10's IE bit.
     */
    inline bool get_GPIO10_IE()
    {
        return GPIO10 & (1u << 6u);
    }

    /**
     * Set GPIO10's IE bit.
     */
    inline void set_GPIO10_IE()
    {
        GPIO10 |= 1u << 6u;
    }

    /**
     * Clear GPIO10's IE bit.
     */
    inline void clear_GPIO10_IE()
    {
        GPIO10 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO10's IE bit.
     */
    inline void toggle_GPIO10_IE()
    {
        GPIO10 ^= 1u << 6u;
    }

    /**
     * Get GPIO10's OD bit.
     */
    inline bool get_GPIO10_OD()
    {
        return GPIO10 & (1u << 7u);
    }

    /**
     * Set GPIO10's OD bit.
     */
    inline void set_GPIO10_OD()
    {
        GPIO10 |= 1u << 7u;
    }

    /**
     * Clear GPIO10's OD bit.
     */
    inline void clear_GPIO10_OD()
    {
        GPIO10 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO10's OD bit.
     */
    inline void toggle_GPIO10_OD()
    {
        GPIO10 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO10's bit fields.
     */
    inline void get_GPIO10(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO10_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO10;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO10_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO10's bit fields.
     */
    inline void set_GPIO10(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO10_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO10;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO10 = curr;
    }

    /**
     * Get GPIO11's SLEWFAST bit.
     */
    inline bool get_GPIO11_SLEWFAST()
    {
        return GPIO11 & (1u << 0u);
    }

    /**
     * Set GPIO11's SLEWFAST bit.
     */
    inline void set_GPIO11_SLEWFAST()
    {
        GPIO11 |= 1u << 0u;
    }

    /**
     * Clear GPIO11's SLEWFAST bit.
     */
    inline void clear_GPIO11_SLEWFAST()
    {
        GPIO11 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO11's SLEWFAST bit.
     */
    inline void toggle_GPIO11_SLEWFAST()
    {
        GPIO11 ^= 1u << 0u;
    }

    /**
     * Get GPIO11's SCHMITT bit.
     */
    inline bool get_GPIO11_SCHMITT()
    {
        return GPIO11 & (1u << 1u);
    }

    /**
     * Set GPIO11's SCHMITT bit.
     */
    inline void set_GPIO11_SCHMITT()
    {
        GPIO11 |= 1u << 1u;
    }

    /**
     * Clear GPIO11's SCHMITT bit.
     */
    inline void clear_GPIO11_SCHMITT()
    {
        GPIO11 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO11's SCHMITT bit.
     */
    inline void toggle_GPIO11_SCHMITT()
    {
        GPIO11 ^= 1u << 1u;
    }

    /**
     * Get GPIO11's PDE bit.
     */
    inline bool get_GPIO11_PDE()
    {
        return GPIO11 & (1u << 2u);
    }

    /**
     * Set GPIO11's PDE bit.
     */
    inline void set_GPIO11_PDE()
    {
        GPIO11 |= 1u << 2u;
    }

    /**
     * Clear GPIO11's PDE bit.
     */
    inline void clear_GPIO11_PDE()
    {
        GPIO11 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO11's PDE bit.
     */
    inline void toggle_GPIO11_PDE()
    {
        GPIO11 ^= 1u << 2u;
    }

    /**
     * Get GPIO11's PUE bit.
     */
    inline bool get_GPIO11_PUE()
    {
        return GPIO11 & (1u << 3u);
    }

    /**
     * Set GPIO11's PUE bit.
     */
    inline void set_GPIO11_PUE()
    {
        GPIO11 |= 1u << 3u;
    }

    /**
     * Clear GPIO11's PUE bit.
     */
    inline void clear_GPIO11_PUE()
    {
        GPIO11 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO11's PUE bit.
     */
    inline void toggle_GPIO11_PUE()
    {
        GPIO11 ^= 1u << 3u;
    }

    /**
     * Get GPIO11's DRIVE field.
     */
    inline PADS_BANK0_GPIO11_DRIVE get_GPIO11_DRIVE()
    {
        return PADS_BANK0_GPIO11_DRIVE((GPIO11 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO11's DRIVE field.
     */
    inline void set_GPIO11_DRIVE(PADS_BANK0_GPIO11_DRIVE value)
    {
        uint32_t curr = GPIO11;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO11 = curr;
    }

    /**
     * Get GPIO11's IE bit.
     */
    inline bool get_GPIO11_IE()
    {
        return GPIO11 & (1u << 6u);
    }

    /**
     * Set GPIO11's IE bit.
     */
    inline void set_GPIO11_IE()
    {
        GPIO11 |= 1u << 6u;
    }

    /**
     * Clear GPIO11's IE bit.
     */
    inline void clear_GPIO11_IE()
    {
        GPIO11 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO11's IE bit.
     */
    inline void toggle_GPIO11_IE()
    {
        GPIO11 ^= 1u << 6u;
    }

    /**
     * Get GPIO11's OD bit.
     */
    inline bool get_GPIO11_OD()
    {
        return GPIO11 & (1u << 7u);
    }

    /**
     * Set GPIO11's OD bit.
     */
    inline void set_GPIO11_OD()
    {
        GPIO11 |= 1u << 7u;
    }

    /**
     * Clear GPIO11's OD bit.
     */
    inline void clear_GPIO11_OD()
    {
        GPIO11 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO11's OD bit.
     */
    inline void toggle_GPIO11_OD()
    {
        GPIO11 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO11's bit fields.
     */
    inline void get_GPIO11(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO11_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO11;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO11_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO11's bit fields.
     */
    inline void set_GPIO11(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO11_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO11;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO11 = curr;
    }

    /**
     * Get GPIO12's SLEWFAST bit.
     */
    inline bool get_GPIO12_SLEWFAST()
    {
        return GPIO12 & (1u << 0u);
    }

    /**
     * Set GPIO12's SLEWFAST bit.
     */
    inline void set_GPIO12_SLEWFAST()
    {
        GPIO12 |= 1u << 0u;
    }

    /**
     * Clear GPIO12's SLEWFAST bit.
     */
    inline void clear_GPIO12_SLEWFAST()
    {
        GPIO12 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO12's SLEWFAST bit.
     */
    inline void toggle_GPIO12_SLEWFAST()
    {
        GPIO12 ^= 1u << 0u;
    }

    /**
     * Get GPIO12's SCHMITT bit.
     */
    inline bool get_GPIO12_SCHMITT()
    {
        return GPIO12 & (1u << 1u);
    }

    /**
     * Set GPIO12's SCHMITT bit.
     */
    inline void set_GPIO12_SCHMITT()
    {
        GPIO12 |= 1u << 1u;
    }

    /**
     * Clear GPIO12's SCHMITT bit.
     */
    inline void clear_GPIO12_SCHMITT()
    {
        GPIO12 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO12's SCHMITT bit.
     */
    inline void toggle_GPIO12_SCHMITT()
    {
        GPIO12 ^= 1u << 1u;
    }

    /**
     * Get GPIO12's PDE bit.
     */
    inline bool get_GPIO12_PDE()
    {
        return GPIO12 & (1u << 2u);
    }

    /**
     * Set GPIO12's PDE bit.
     */
    inline void set_GPIO12_PDE()
    {
        GPIO12 |= 1u << 2u;
    }

    /**
     * Clear GPIO12's PDE bit.
     */
    inline void clear_GPIO12_PDE()
    {
        GPIO12 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO12's PDE bit.
     */
    inline void toggle_GPIO12_PDE()
    {
        GPIO12 ^= 1u << 2u;
    }

    /**
     * Get GPIO12's PUE bit.
     */
    inline bool get_GPIO12_PUE()
    {
        return GPIO12 & (1u << 3u);
    }

    /**
     * Set GPIO12's PUE bit.
     */
    inline void set_GPIO12_PUE()
    {
        GPIO12 |= 1u << 3u;
    }

    /**
     * Clear GPIO12's PUE bit.
     */
    inline void clear_GPIO12_PUE()
    {
        GPIO12 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO12's PUE bit.
     */
    inline void toggle_GPIO12_PUE()
    {
        GPIO12 ^= 1u << 3u;
    }

    /**
     * Get GPIO12's DRIVE field.
     */
    inline PADS_BANK0_GPIO12_DRIVE get_GPIO12_DRIVE()
    {
        return PADS_BANK0_GPIO12_DRIVE((GPIO12 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO12's DRIVE field.
     */
    inline void set_GPIO12_DRIVE(PADS_BANK0_GPIO12_DRIVE value)
    {
        uint32_t curr = GPIO12;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO12 = curr;
    }

    /**
     * Get GPIO12's IE bit.
     */
    inline bool get_GPIO12_IE()
    {
        return GPIO12 & (1u << 6u);
    }

    /**
     * Set GPIO12's IE bit.
     */
    inline void set_GPIO12_IE()
    {
        GPIO12 |= 1u << 6u;
    }

    /**
     * Clear GPIO12's IE bit.
     */
    inline void clear_GPIO12_IE()
    {
        GPIO12 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO12's IE bit.
     */
    inline void toggle_GPIO12_IE()
    {
        GPIO12 ^= 1u << 6u;
    }

    /**
     * Get GPIO12's OD bit.
     */
    inline bool get_GPIO12_OD()
    {
        return GPIO12 & (1u << 7u);
    }

    /**
     * Set GPIO12's OD bit.
     */
    inline void set_GPIO12_OD()
    {
        GPIO12 |= 1u << 7u;
    }

    /**
     * Clear GPIO12's OD bit.
     */
    inline void clear_GPIO12_OD()
    {
        GPIO12 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO12's OD bit.
     */
    inline void toggle_GPIO12_OD()
    {
        GPIO12 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO12's bit fields.
     */
    inline void get_GPIO12(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO12_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO12;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO12_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO12's bit fields.
     */
    inline void set_GPIO12(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO12_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO12;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO12 = curr;
    }

    /**
     * Get GPIO13's SLEWFAST bit.
     */
    inline bool get_GPIO13_SLEWFAST()
    {
        return GPIO13 & (1u << 0u);
    }

    /**
     * Set GPIO13's SLEWFAST bit.
     */
    inline void set_GPIO13_SLEWFAST()
    {
        GPIO13 |= 1u << 0u;
    }

    /**
     * Clear GPIO13's SLEWFAST bit.
     */
    inline void clear_GPIO13_SLEWFAST()
    {
        GPIO13 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO13's SLEWFAST bit.
     */
    inline void toggle_GPIO13_SLEWFAST()
    {
        GPIO13 ^= 1u << 0u;
    }

    /**
     * Get GPIO13's SCHMITT bit.
     */
    inline bool get_GPIO13_SCHMITT()
    {
        return GPIO13 & (1u << 1u);
    }

    /**
     * Set GPIO13's SCHMITT bit.
     */
    inline void set_GPIO13_SCHMITT()
    {
        GPIO13 |= 1u << 1u;
    }

    /**
     * Clear GPIO13's SCHMITT bit.
     */
    inline void clear_GPIO13_SCHMITT()
    {
        GPIO13 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO13's SCHMITT bit.
     */
    inline void toggle_GPIO13_SCHMITT()
    {
        GPIO13 ^= 1u << 1u;
    }

    /**
     * Get GPIO13's PDE bit.
     */
    inline bool get_GPIO13_PDE()
    {
        return GPIO13 & (1u << 2u);
    }

    /**
     * Set GPIO13's PDE bit.
     */
    inline void set_GPIO13_PDE()
    {
        GPIO13 |= 1u << 2u;
    }

    /**
     * Clear GPIO13's PDE bit.
     */
    inline void clear_GPIO13_PDE()
    {
        GPIO13 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO13's PDE bit.
     */
    inline void toggle_GPIO13_PDE()
    {
        GPIO13 ^= 1u << 2u;
    }

    /**
     * Get GPIO13's PUE bit.
     */
    inline bool get_GPIO13_PUE()
    {
        return GPIO13 & (1u << 3u);
    }

    /**
     * Set GPIO13's PUE bit.
     */
    inline void set_GPIO13_PUE()
    {
        GPIO13 |= 1u << 3u;
    }

    /**
     * Clear GPIO13's PUE bit.
     */
    inline void clear_GPIO13_PUE()
    {
        GPIO13 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO13's PUE bit.
     */
    inline void toggle_GPIO13_PUE()
    {
        GPIO13 ^= 1u << 3u;
    }

    /**
     * Get GPIO13's DRIVE field.
     */
    inline PADS_BANK0_GPIO13_DRIVE get_GPIO13_DRIVE()
    {
        return PADS_BANK0_GPIO13_DRIVE((GPIO13 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO13's DRIVE field.
     */
    inline void set_GPIO13_DRIVE(PADS_BANK0_GPIO13_DRIVE value)
    {
        uint32_t curr = GPIO13;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO13 = curr;
    }

    /**
     * Get GPIO13's IE bit.
     */
    inline bool get_GPIO13_IE()
    {
        return GPIO13 & (1u << 6u);
    }

    /**
     * Set GPIO13's IE bit.
     */
    inline void set_GPIO13_IE()
    {
        GPIO13 |= 1u << 6u;
    }

    /**
     * Clear GPIO13's IE bit.
     */
    inline void clear_GPIO13_IE()
    {
        GPIO13 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO13's IE bit.
     */
    inline void toggle_GPIO13_IE()
    {
        GPIO13 ^= 1u << 6u;
    }

    /**
     * Get GPIO13's OD bit.
     */
    inline bool get_GPIO13_OD()
    {
        return GPIO13 & (1u << 7u);
    }

    /**
     * Set GPIO13's OD bit.
     */
    inline void set_GPIO13_OD()
    {
        GPIO13 |= 1u << 7u;
    }

    /**
     * Clear GPIO13's OD bit.
     */
    inline void clear_GPIO13_OD()
    {
        GPIO13 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO13's OD bit.
     */
    inline void toggle_GPIO13_OD()
    {
        GPIO13 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO13's bit fields.
     */
    inline void get_GPIO13(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO13_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO13;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO13_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO13's bit fields.
     */
    inline void set_GPIO13(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO13_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO13;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO13 = curr;
    }

    /**
     * Get GPIO14's SLEWFAST bit.
     */
    inline bool get_GPIO14_SLEWFAST()
    {
        return GPIO14 & (1u << 0u);
    }

    /**
     * Set GPIO14's SLEWFAST bit.
     */
    inline void set_GPIO14_SLEWFAST()
    {
        GPIO14 |= 1u << 0u;
    }

    /**
     * Clear GPIO14's SLEWFAST bit.
     */
    inline void clear_GPIO14_SLEWFAST()
    {
        GPIO14 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO14's SLEWFAST bit.
     */
    inline void toggle_GPIO14_SLEWFAST()
    {
        GPIO14 ^= 1u << 0u;
    }

    /**
     * Get GPIO14's SCHMITT bit.
     */
    inline bool get_GPIO14_SCHMITT()
    {
        return GPIO14 & (1u << 1u);
    }

    /**
     * Set GPIO14's SCHMITT bit.
     */
    inline void set_GPIO14_SCHMITT()
    {
        GPIO14 |= 1u << 1u;
    }

    /**
     * Clear GPIO14's SCHMITT bit.
     */
    inline void clear_GPIO14_SCHMITT()
    {
        GPIO14 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO14's SCHMITT bit.
     */
    inline void toggle_GPIO14_SCHMITT()
    {
        GPIO14 ^= 1u << 1u;
    }

    /**
     * Get GPIO14's PDE bit.
     */
    inline bool get_GPIO14_PDE()
    {
        return GPIO14 & (1u << 2u);
    }

    /**
     * Set GPIO14's PDE bit.
     */
    inline void set_GPIO14_PDE()
    {
        GPIO14 |= 1u << 2u;
    }

    /**
     * Clear GPIO14's PDE bit.
     */
    inline void clear_GPIO14_PDE()
    {
        GPIO14 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO14's PDE bit.
     */
    inline void toggle_GPIO14_PDE()
    {
        GPIO14 ^= 1u << 2u;
    }

    /**
     * Get GPIO14's PUE bit.
     */
    inline bool get_GPIO14_PUE()
    {
        return GPIO14 & (1u << 3u);
    }

    /**
     * Set GPIO14's PUE bit.
     */
    inline void set_GPIO14_PUE()
    {
        GPIO14 |= 1u << 3u;
    }

    /**
     * Clear GPIO14's PUE bit.
     */
    inline void clear_GPIO14_PUE()
    {
        GPIO14 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO14's PUE bit.
     */
    inline void toggle_GPIO14_PUE()
    {
        GPIO14 ^= 1u << 3u;
    }

    /**
     * Get GPIO14's DRIVE field.
     */
    inline PADS_BANK0_GPIO14_DRIVE get_GPIO14_DRIVE()
    {
        return PADS_BANK0_GPIO14_DRIVE((GPIO14 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO14's DRIVE field.
     */
    inline void set_GPIO14_DRIVE(PADS_BANK0_GPIO14_DRIVE value)
    {
        uint32_t curr = GPIO14;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO14 = curr;
    }

    /**
     * Get GPIO14's IE bit.
     */
    inline bool get_GPIO14_IE()
    {
        return GPIO14 & (1u << 6u);
    }

    /**
     * Set GPIO14's IE bit.
     */
    inline void set_GPIO14_IE()
    {
        GPIO14 |= 1u << 6u;
    }

    /**
     * Clear GPIO14's IE bit.
     */
    inline void clear_GPIO14_IE()
    {
        GPIO14 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO14's IE bit.
     */
    inline void toggle_GPIO14_IE()
    {
        GPIO14 ^= 1u << 6u;
    }

    /**
     * Get GPIO14's OD bit.
     */
    inline bool get_GPIO14_OD()
    {
        return GPIO14 & (1u << 7u);
    }

    /**
     * Set GPIO14's OD bit.
     */
    inline void set_GPIO14_OD()
    {
        GPIO14 |= 1u << 7u;
    }

    /**
     * Clear GPIO14's OD bit.
     */
    inline void clear_GPIO14_OD()
    {
        GPIO14 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO14's OD bit.
     */
    inline void toggle_GPIO14_OD()
    {
        GPIO14 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO14's bit fields.
     */
    inline void get_GPIO14(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO14_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO14;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO14_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO14's bit fields.
     */
    inline void set_GPIO14(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO14_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO14;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO14 = curr;
    }

    /**
     * Get GPIO15's SLEWFAST bit.
     */
    inline bool get_GPIO15_SLEWFAST()
    {
        return GPIO15 & (1u << 0u);
    }

    /**
     * Set GPIO15's SLEWFAST bit.
     */
    inline void set_GPIO15_SLEWFAST()
    {
        GPIO15 |= 1u << 0u;
    }

    /**
     * Clear GPIO15's SLEWFAST bit.
     */
    inline void clear_GPIO15_SLEWFAST()
    {
        GPIO15 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO15's SLEWFAST bit.
     */
    inline void toggle_GPIO15_SLEWFAST()
    {
        GPIO15 ^= 1u << 0u;
    }

    /**
     * Get GPIO15's SCHMITT bit.
     */
    inline bool get_GPIO15_SCHMITT()
    {
        return GPIO15 & (1u << 1u);
    }

    /**
     * Set GPIO15's SCHMITT bit.
     */
    inline void set_GPIO15_SCHMITT()
    {
        GPIO15 |= 1u << 1u;
    }

    /**
     * Clear GPIO15's SCHMITT bit.
     */
    inline void clear_GPIO15_SCHMITT()
    {
        GPIO15 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO15's SCHMITT bit.
     */
    inline void toggle_GPIO15_SCHMITT()
    {
        GPIO15 ^= 1u << 1u;
    }

    /**
     * Get GPIO15's PDE bit.
     */
    inline bool get_GPIO15_PDE()
    {
        return GPIO15 & (1u << 2u);
    }

    /**
     * Set GPIO15's PDE bit.
     */
    inline void set_GPIO15_PDE()
    {
        GPIO15 |= 1u << 2u;
    }

    /**
     * Clear GPIO15's PDE bit.
     */
    inline void clear_GPIO15_PDE()
    {
        GPIO15 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO15's PDE bit.
     */
    inline void toggle_GPIO15_PDE()
    {
        GPIO15 ^= 1u << 2u;
    }

    /**
     * Get GPIO15's PUE bit.
     */
    inline bool get_GPIO15_PUE()
    {
        return GPIO15 & (1u << 3u);
    }

    /**
     * Set GPIO15's PUE bit.
     */
    inline void set_GPIO15_PUE()
    {
        GPIO15 |= 1u << 3u;
    }

    /**
     * Clear GPIO15's PUE bit.
     */
    inline void clear_GPIO15_PUE()
    {
        GPIO15 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO15's PUE bit.
     */
    inline void toggle_GPIO15_PUE()
    {
        GPIO15 ^= 1u << 3u;
    }

    /**
     * Get GPIO15's DRIVE field.
     */
    inline PADS_BANK0_GPIO15_DRIVE get_GPIO15_DRIVE()
    {
        return PADS_BANK0_GPIO15_DRIVE((GPIO15 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO15's DRIVE field.
     */
    inline void set_GPIO15_DRIVE(PADS_BANK0_GPIO15_DRIVE value)
    {
        uint32_t curr = GPIO15;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO15 = curr;
    }

    /**
     * Get GPIO15's IE bit.
     */
    inline bool get_GPIO15_IE()
    {
        return GPIO15 & (1u << 6u);
    }

    /**
     * Set GPIO15's IE bit.
     */
    inline void set_GPIO15_IE()
    {
        GPIO15 |= 1u << 6u;
    }

    /**
     * Clear GPIO15's IE bit.
     */
    inline void clear_GPIO15_IE()
    {
        GPIO15 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO15's IE bit.
     */
    inline void toggle_GPIO15_IE()
    {
        GPIO15 ^= 1u << 6u;
    }

    /**
     * Get GPIO15's OD bit.
     */
    inline bool get_GPIO15_OD()
    {
        return GPIO15 & (1u << 7u);
    }

    /**
     * Set GPIO15's OD bit.
     */
    inline void set_GPIO15_OD()
    {
        GPIO15 |= 1u << 7u;
    }

    /**
     * Clear GPIO15's OD bit.
     */
    inline void clear_GPIO15_OD()
    {
        GPIO15 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO15's OD bit.
     */
    inline void toggle_GPIO15_OD()
    {
        GPIO15 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO15's bit fields.
     */
    inline void get_GPIO15(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO15_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO15;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO15_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO15's bit fields.
     */
    inline void set_GPIO15(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO15_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO15;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO15 = curr;
    }

    /**
     * Get GPIO16's SLEWFAST bit.
     */
    inline bool get_GPIO16_SLEWFAST()
    {
        return GPIO16 & (1u << 0u);
    }

    /**
     * Set GPIO16's SLEWFAST bit.
     */
    inline void set_GPIO16_SLEWFAST()
    {
        GPIO16 |= 1u << 0u;
    }

    /**
     * Clear GPIO16's SLEWFAST bit.
     */
    inline void clear_GPIO16_SLEWFAST()
    {
        GPIO16 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO16's SLEWFAST bit.
     */
    inline void toggle_GPIO16_SLEWFAST()
    {
        GPIO16 ^= 1u << 0u;
    }

    /**
     * Get GPIO16's SCHMITT bit.
     */
    inline bool get_GPIO16_SCHMITT()
    {
        return GPIO16 & (1u << 1u);
    }

    /**
     * Set GPIO16's SCHMITT bit.
     */
    inline void set_GPIO16_SCHMITT()
    {
        GPIO16 |= 1u << 1u;
    }

    /**
     * Clear GPIO16's SCHMITT bit.
     */
    inline void clear_GPIO16_SCHMITT()
    {
        GPIO16 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO16's SCHMITT bit.
     */
    inline void toggle_GPIO16_SCHMITT()
    {
        GPIO16 ^= 1u << 1u;
    }

    /**
     * Get GPIO16's PDE bit.
     */
    inline bool get_GPIO16_PDE()
    {
        return GPIO16 & (1u << 2u);
    }

    /**
     * Set GPIO16's PDE bit.
     */
    inline void set_GPIO16_PDE()
    {
        GPIO16 |= 1u << 2u;
    }

    /**
     * Clear GPIO16's PDE bit.
     */
    inline void clear_GPIO16_PDE()
    {
        GPIO16 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO16's PDE bit.
     */
    inline void toggle_GPIO16_PDE()
    {
        GPIO16 ^= 1u << 2u;
    }

    /**
     * Get GPIO16's PUE bit.
     */
    inline bool get_GPIO16_PUE()
    {
        return GPIO16 & (1u << 3u);
    }

    /**
     * Set GPIO16's PUE bit.
     */
    inline void set_GPIO16_PUE()
    {
        GPIO16 |= 1u << 3u;
    }

    /**
     * Clear GPIO16's PUE bit.
     */
    inline void clear_GPIO16_PUE()
    {
        GPIO16 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO16's PUE bit.
     */
    inline void toggle_GPIO16_PUE()
    {
        GPIO16 ^= 1u << 3u;
    }

    /**
     * Get GPIO16's DRIVE field.
     */
    inline PADS_BANK0_GPIO16_DRIVE get_GPIO16_DRIVE()
    {
        return PADS_BANK0_GPIO16_DRIVE((GPIO16 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO16's DRIVE field.
     */
    inline void set_GPIO16_DRIVE(PADS_BANK0_GPIO16_DRIVE value)
    {
        uint32_t curr = GPIO16;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO16 = curr;
    }

    /**
     * Get GPIO16's IE bit.
     */
    inline bool get_GPIO16_IE()
    {
        return GPIO16 & (1u << 6u);
    }

    /**
     * Set GPIO16's IE bit.
     */
    inline void set_GPIO16_IE()
    {
        GPIO16 |= 1u << 6u;
    }

    /**
     * Clear GPIO16's IE bit.
     */
    inline void clear_GPIO16_IE()
    {
        GPIO16 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO16's IE bit.
     */
    inline void toggle_GPIO16_IE()
    {
        GPIO16 ^= 1u << 6u;
    }

    /**
     * Get GPIO16's OD bit.
     */
    inline bool get_GPIO16_OD()
    {
        return GPIO16 & (1u << 7u);
    }

    /**
     * Set GPIO16's OD bit.
     */
    inline void set_GPIO16_OD()
    {
        GPIO16 |= 1u << 7u;
    }

    /**
     * Clear GPIO16's OD bit.
     */
    inline void clear_GPIO16_OD()
    {
        GPIO16 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO16's OD bit.
     */
    inline void toggle_GPIO16_OD()
    {
        GPIO16 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO16's bit fields.
     */
    inline void get_GPIO16(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO16_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO16;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO16_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO16's bit fields.
     */
    inline void set_GPIO16(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO16_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO16;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO16 = curr;
    }

    /**
     * Get GPIO17's SLEWFAST bit.
     */
    inline bool get_GPIO17_SLEWFAST()
    {
        return GPIO17 & (1u << 0u);
    }

    /**
     * Set GPIO17's SLEWFAST bit.
     */
    inline void set_GPIO17_SLEWFAST()
    {
        GPIO17 |= 1u << 0u;
    }

    /**
     * Clear GPIO17's SLEWFAST bit.
     */
    inline void clear_GPIO17_SLEWFAST()
    {
        GPIO17 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO17's SLEWFAST bit.
     */
    inline void toggle_GPIO17_SLEWFAST()
    {
        GPIO17 ^= 1u << 0u;
    }

    /**
     * Get GPIO17's SCHMITT bit.
     */
    inline bool get_GPIO17_SCHMITT()
    {
        return GPIO17 & (1u << 1u);
    }

    /**
     * Set GPIO17's SCHMITT bit.
     */
    inline void set_GPIO17_SCHMITT()
    {
        GPIO17 |= 1u << 1u;
    }

    /**
     * Clear GPIO17's SCHMITT bit.
     */
    inline void clear_GPIO17_SCHMITT()
    {
        GPIO17 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO17's SCHMITT bit.
     */
    inline void toggle_GPIO17_SCHMITT()
    {
        GPIO17 ^= 1u << 1u;
    }

    /**
     * Get GPIO17's PDE bit.
     */
    inline bool get_GPIO17_PDE()
    {
        return GPIO17 & (1u << 2u);
    }

    /**
     * Set GPIO17's PDE bit.
     */
    inline void set_GPIO17_PDE()
    {
        GPIO17 |= 1u << 2u;
    }

    /**
     * Clear GPIO17's PDE bit.
     */
    inline void clear_GPIO17_PDE()
    {
        GPIO17 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO17's PDE bit.
     */
    inline void toggle_GPIO17_PDE()
    {
        GPIO17 ^= 1u << 2u;
    }

    /**
     * Get GPIO17's PUE bit.
     */
    inline bool get_GPIO17_PUE()
    {
        return GPIO17 & (1u << 3u);
    }

    /**
     * Set GPIO17's PUE bit.
     */
    inline void set_GPIO17_PUE()
    {
        GPIO17 |= 1u << 3u;
    }

    /**
     * Clear GPIO17's PUE bit.
     */
    inline void clear_GPIO17_PUE()
    {
        GPIO17 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO17's PUE bit.
     */
    inline void toggle_GPIO17_PUE()
    {
        GPIO17 ^= 1u << 3u;
    }

    /**
     * Get GPIO17's DRIVE field.
     */
    inline PADS_BANK0_GPIO17_DRIVE get_GPIO17_DRIVE()
    {
        return PADS_BANK0_GPIO17_DRIVE((GPIO17 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO17's DRIVE field.
     */
    inline void set_GPIO17_DRIVE(PADS_BANK0_GPIO17_DRIVE value)
    {
        uint32_t curr = GPIO17;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO17 = curr;
    }

    /**
     * Get GPIO17's IE bit.
     */
    inline bool get_GPIO17_IE()
    {
        return GPIO17 & (1u << 6u);
    }

    /**
     * Set GPIO17's IE bit.
     */
    inline void set_GPIO17_IE()
    {
        GPIO17 |= 1u << 6u;
    }

    /**
     * Clear GPIO17's IE bit.
     */
    inline void clear_GPIO17_IE()
    {
        GPIO17 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO17's IE bit.
     */
    inline void toggle_GPIO17_IE()
    {
        GPIO17 ^= 1u << 6u;
    }

    /**
     * Get GPIO17's OD bit.
     */
    inline bool get_GPIO17_OD()
    {
        return GPIO17 & (1u << 7u);
    }

    /**
     * Set GPIO17's OD bit.
     */
    inline void set_GPIO17_OD()
    {
        GPIO17 |= 1u << 7u;
    }

    /**
     * Clear GPIO17's OD bit.
     */
    inline void clear_GPIO17_OD()
    {
        GPIO17 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO17's OD bit.
     */
    inline void toggle_GPIO17_OD()
    {
        GPIO17 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO17's bit fields.
     */
    inline void get_GPIO17(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO17_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO17;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO17_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO17's bit fields.
     */
    inline void set_GPIO17(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO17_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO17;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO17 = curr;
    }

    /**
     * Get GPIO18's SLEWFAST bit.
     */
    inline bool get_GPIO18_SLEWFAST()
    {
        return GPIO18 & (1u << 0u);
    }

    /**
     * Set GPIO18's SLEWFAST bit.
     */
    inline void set_GPIO18_SLEWFAST()
    {
        GPIO18 |= 1u << 0u;
    }

    /**
     * Clear GPIO18's SLEWFAST bit.
     */
    inline void clear_GPIO18_SLEWFAST()
    {
        GPIO18 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO18's SLEWFAST bit.
     */
    inline void toggle_GPIO18_SLEWFAST()
    {
        GPIO18 ^= 1u << 0u;
    }

    /**
     * Get GPIO18's SCHMITT bit.
     */
    inline bool get_GPIO18_SCHMITT()
    {
        return GPIO18 & (1u << 1u);
    }

    /**
     * Set GPIO18's SCHMITT bit.
     */
    inline void set_GPIO18_SCHMITT()
    {
        GPIO18 |= 1u << 1u;
    }

    /**
     * Clear GPIO18's SCHMITT bit.
     */
    inline void clear_GPIO18_SCHMITT()
    {
        GPIO18 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO18's SCHMITT bit.
     */
    inline void toggle_GPIO18_SCHMITT()
    {
        GPIO18 ^= 1u << 1u;
    }

    /**
     * Get GPIO18's PDE bit.
     */
    inline bool get_GPIO18_PDE()
    {
        return GPIO18 & (1u << 2u);
    }

    /**
     * Set GPIO18's PDE bit.
     */
    inline void set_GPIO18_PDE()
    {
        GPIO18 |= 1u << 2u;
    }

    /**
     * Clear GPIO18's PDE bit.
     */
    inline void clear_GPIO18_PDE()
    {
        GPIO18 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO18's PDE bit.
     */
    inline void toggle_GPIO18_PDE()
    {
        GPIO18 ^= 1u << 2u;
    }

    /**
     * Get GPIO18's PUE bit.
     */
    inline bool get_GPIO18_PUE()
    {
        return GPIO18 & (1u << 3u);
    }

    /**
     * Set GPIO18's PUE bit.
     */
    inline void set_GPIO18_PUE()
    {
        GPIO18 |= 1u << 3u;
    }

    /**
     * Clear GPIO18's PUE bit.
     */
    inline void clear_GPIO18_PUE()
    {
        GPIO18 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO18's PUE bit.
     */
    inline void toggle_GPIO18_PUE()
    {
        GPIO18 ^= 1u << 3u;
    }

    /**
     * Get GPIO18's DRIVE field.
     */
    inline PADS_BANK0_GPIO18_DRIVE get_GPIO18_DRIVE()
    {
        return PADS_BANK0_GPIO18_DRIVE((GPIO18 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO18's DRIVE field.
     */
    inline void set_GPIO18_DRIVE(PADS_BANK0_GPIO18_DRIVE value)
    {
        uint32_t curr = GPIO18;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO18 = curr;
    }

    /**
     * Get GPIO18's IE bit.
     */
    inline bool get_GPIO18_IE()
    {
        return GPIO18 & (1u << 6u);
    }

    /**
     * Set GPIO18's IE bit.
     */
    inline void set_GPIO18_IE()
    {
        GPIO18 |= 1u << 6u;
    }

    /**
     * Clear GPIO18's IE bit.
     */
    inline void clear_GPIO18_IE()
    {
        GPIO18 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO18's IE bit.
     */
    inline void toggle_GPIO18_IE()
    {
        GPIO18 ^= 1u << 6u;
    }

    /**
     * Get GPIO18's OD bit.
     */
    inline bool get_GPIO18_OD()
    {
        return GPIO18 & (1u << 7u);
    }

    /**
     * Set GPIO18's OD bit.
     */
    inline void set_GPIO18_OD()
    {
        GPIO18 |= 1u << 7u;
    }

    /**
     * Clear GPIO18's OD bit.
     */
    inline void clear_GPIO18_OD()
    {
        GPIO18 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO18's OD bit.
     */
    inline void toggle_GPIO18_OD()
    {
        GPIO18 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO18's bit fields.
     */
    inline void get_GPIO18(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO18_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO18;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO18_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO18's bit fields.
     */
    inline void set_GPIO18(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO18_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO18;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO18 = curr;
    }

    /**
     * Get GPIO19's SLEWFAST bit.
     */
    inline bool get_GPIO19_SLEWFAST()
    {
        return GPIO19 & (1u << 0u);
    }

    /**
     * Set GPIO19's SLEWFAST bit.
     */
    inline void set_GPIO19_SLEWFAST()
    {
        GPIO19 |= 1u << 0u;
    }

    /**
     * Clear GPIO19's SLEWFAST bit.
     */
    inline void clear_GPIO19_SLEWFAST()
    {
        GPIO19 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO19's SLEWFAST bit.
     */
    inline void toggle_GPIO19_SLEWFAST()
    {
        GPIO19 ^= 1u << 0u;
    }

    /**
     * Get GPIO19's SCHMITT bit.
     */
    inline bool get_GPIO19_SCHMITT()
    {
        return GPIO19 & (1u << 1u);
    }

    /**
     * Set GPIO19's SCHMITT bit.
     */
    inline void set_GPIO19_SCHMITT()
    {
        GPIO19 |= 1u << 1u;
    }

    /**
     * Clear GPIO19's SCHMITT bit.
     */
    inline void clear_GPIO19_SCHMITT()
    {
        GPIO19 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO19's SCHMITT bit.
     */
    inline void toggle_GPIO19_SCHMITT()
    {
        GPIO19 ^= 1u << 1u;
    }

    /**
     * Get GPIO19's PDE bit.
     */
    inline bool get_GPIO19_PDE()
    {
        return GPIO19 & (1u << 2u);
    }

    /**
     * Set GPIO19's PDE bit.
     */
    inline void set_GPIO19_PDE()
    {
        GPIO19 |= 1u << 2u;
    }

    /**
     * Clear GPIO19's PDE bit.
     */
    inline void clear_GPIO19_PDE()
    {
        GPIO19 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO19's PDE bit.
     */
    inline void toggle_GPIO19_PDE()
    {
        GPIO19 ^= 1u << 2u;
    }

    /**
     * Get GPIO19's PUE bit.
     */
    inline bool get_GPIO19_PUE()
    {
        return GPIO19 & (1u << 3u);
    }

    /**
     * Set GPIO19's PUE bit.
     */
    inline void set_GPIO19_PUE()
    {
        GPIO19 |= 1u << 3u;
    }

    /**
     * Clear GPIO19's PUE bit.
     */
    inline void clear_GPIO19_PUE()
    {
        GPIO19 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO19's PUE bit.
     */
    inline void toggle_GPIO19_PUE()
    {
        GPIO19 ^= 1u << 3u;
    }

    /**
     * Get GPIO19's DRIVE field.
     */
    inline PADS_BANK0_GPIO19_DRIVE get_GPIO19_DRIVE()
    {
        return PADS_BANK0_GPIO19_DRIVE((GPIO19 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO19's DRIVE field.
     */
    inline void set_GPIO19_DRIVE(PADS_BANK0_GPIO19_DRIVE value)
    {
        uint32_t curr = GPIO19;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO19 = curr;
    }

    /**
     * Get GPIO19's IE bit.
     */
    inline bool get_GPIO19_IE()
    {
        return GPIO19 & (1u << 6u);
    }

    /**
     * Set GPIO19's IE bit.
     */
    inline void set_GPIO19_IE()
    {
        GPIO19 |= 1u << 6u;
    }

    /**
     * Clear GPIO19's IE bit.
     */
    inline void clear_GPIO19_IE()
    {
        GPIO19 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO19's IE bit.
     */
    inline void toggle_GPIO19_IE()
    {
        GPIO19 ^= 1u << 6u;
    }

    /**
     * Get GPIO19's OD bit.
     */
    inline bool get_GPIO19_OD()
    {
        return GPIO19 & (1u << 7u);
    }

    /**
     * Set GPIO19's OD bit.
     */
    inline void set_GPIO19_OD()
    {
        GPIO19 |= 1u << 7u;
    }

    /**
     * Clear GPIO19's OD bit.
     */
    inline void clear_GPIO19_OD()
    {
        GPIO19 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO19's OD bit.
     */
    inline void toggle_GPIO19_OD()
    {
        GPIO19 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO19's bit fields.
     */
    inline void get_GPIO19(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO19_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO19;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO19_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO19's bit fields.
     */
    inline void set_GPIO19(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO19_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO19;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO19 = curr;
    }

    /**
     * Get GPIO20's SLEWFAST bit.
     */
    inline bool get_GPIO20_SLEWFAST()
    {
        return GPIO20 & (1u << 0u);
    }

    /**
     * Set GPIO20's SLEWFAST bit.
     */
    inline void set_GPIO20_SLEWFAST()
    {
        GPIO20 |= 1u << 0u;
    }

    /**
     * Clear GPIO20's SLEWFAST bit.
     */
    inline void clear_GPIO20_SLEWFAST()
    {
        GPIO20 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO20's SLEWFAST bit.
     */
    inline void toggle_GPIO20_SLEWFAST()
    {
        GPIO20 ^= 1u << 0u;
    }

    /**
     * Get GPIO20's SCHMITT bit.
     */
    inline bool get_GPIO20_SCHMITT()
    {
        return GPIO20 & (1u << 1u);
    }

    /**
     * Set GPIO20's SCHMITT bit.
     */
    inline void set_GPIO20_SCHMITT()
    {
        GPIO20 |= 1u << 1u;
    }

    /**
     * Clear GPIO20's SCHMITT bit.
     */
    inline void clear_GPIO20_SCHMITT()
    {
        GPIO20 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO20's SCHMITT bit.
     */
    inline void toggle_GPIO20_SCHMITT()
    {
        GPIO20 ^= 1u << 1u;
    }

    /**
     * Get GPIO20's PDE bit.
     */
    inline bool get_GPIO20_PDE()
    {
        return GPIO20 & (1u << 2u);
    }

    /**
     * Set GPIO20's PDE bit.
     */
    inline void set_GPIO20_PDE()
    {
        GPIO20 |= 1u << 2u;
    }

    /**
     * Clear GPIO20's PDE bit.
     */
    inline void clear_GPIO20_PDE()
    {
        GPIO20 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO20's PDE bit.
     */
    inline void toggle_GPIO20_PDE()
    {
        GPIO20 ^= 1u << 2u;
    }

    /**
     * Get GPIO20's PUE bit.
     */
    inline bool get_GPIO20_PUE()
    {
        return GPIO20 & (1u << 3u);
    }

    /**
     * Set GPIO20's PUE bit.
     */
    inline void set_GPIO20_PUE()
    {
        GPIO20 |= 1u << 3u;
    }

    /**
     * Clear GPIO20's PUE bit.
     */
    inline void clear_GPIO20_PUE()
    {
        GPIO20 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO20's PUE bit.
     */
    inline void toggle_GPIO20_PUE()
    {
        GPIO20 ^= 1u << 3u;
    }

    /**
     * Get GPIO20's DRIVE field.
     */
    inline PADS_BANK0_GPIO20_DRIVE get_GPIO20_DRIVE()
    {
        return PADS_BANK0_GPIO20_DRIVE((GPIO20 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO20's DRIVE field.
     */
    inline void set_GPIO20_DRIVE(PADS_BANK0_GPIO20_DRIVE value)
    {
        uint32_t curr = GPIO20;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO20 = curr;
    }

    /**
     * Get GPIO20's IE bit.
     */
    inline bool get_GPIO20_IE()
    {
        return GPIO20 & (1u << 6u);
    }

    /**
     * Set GPIO20's IE bit.
     */
    inline void set_GPIO20_IE()
    {
        GPIO20 |= 1u << 6u;
    }

    /**
     * Clear GPIO20's IE bit.
     */
    inline void clear_GPIO20_IE()
    {
        GPIO20 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO20's IE bit.
     */
    inline void toggle_GPIO20_IE()
    {
        GPIO20 ^= 1u << 6u;
    }

    /**
     * Get GPIO20's OD bit.
     */
    inline bool get_GPIO20_OD()
    {
        return GPIO20 & (1u << 7u);
    }

    /**
     * Set GPIO20's OD bit.
     */
    inline void set_GPIO20_OD()
    {
        GPIO20 |= 1u << 7u;
    }

    /**
     * Clear GPIO20's OD bit.
     */
    inline void clear_GPIO20_OD()
    {
        GPIO20 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO20's OD bit.
     */
    inline void toggle_GPIO20_OD()
    {
        GPIO20 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO20's bit fields.
     */
    inline void get_GPIO20(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO20_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO20;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO20_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO20's bit fields.
     */
    inline void set_GPIO20(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO20_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO20;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO20 = curr;
    }

    /**
     * Get GPIO21's SLEWFAST bit.
     */
    inline bool get_GPIO21_SLEWFAST()
    {
        return GPIO21 & (1u << 0u);
    }

    /**
     * Set GPIO21's SLEWFAST bit.
     */
    inline void set_GPIO21_SLEWFAST()
    {
        GPIO21 |= 1u << 0u;
    }

    /**
     * Clear GPIO21's SLEWFAST bit.
     */
    inline void clear_GPIO21_SLEWFAST()
    {
        GPIO21 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO21's SLEWFAST bit.
     */
    inline void toggle_GPIO21_SLEWFAST()
    {
        GPIO21 ^= 1u << 0u;
    }

    /**
     * Get GPIO21's SCHMITT bit.
     */
    inline bool get_GPIO21_SCHMITT()
    {
        return GPIO21 & (1u << 1u);
    }

    /**
     * Set GPIO21's SCHMITT bit.
     */
    inline void set_GPIO21_SCHMITT()
    {
        GPIO21 |= 1u << 1u;
    }

    /**
     * Clear GPIO21's SCHMITT bit.
     */
    inline void clear_GPIO21_SCHMITT()
    {
        GPIO21 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO21's SCHMITT bit.
     */
    inline void toggle_GPIO21_SCHMITT()
    {
        GPIO21 ^= 1u << 1u;
    }

    /**
     * Get GPIO21's PDE bit.
     */
    inline bool get_GPIO21_PDE()
    {
        return GPIO21 & (1u << 2u);
    }

    /**
     * Set GPIO21's PDE bit.
     */
    inline void set_GPIO21_PDE()
    {
        GPIO21 |= 1u << 2u;
    }

    /**
     * Clear GPIO21's PDE bit.
     */
    inline void clear_GPIO21_PDE()
    {
        GPIO21 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO21's PDE bit.
     */
    inline void toggle_GPIO21_PDE()
    {
        GPIO21 ^= 1u << 2u;
    }

    /**
     * Get GPIO21's PUE bit.
     */
    inline bool get_GPIO21_PUE()
    {
        return GPIO21 & (1u << 3u);
    }

    /**
     * Set GPIO21's PUE bit.
     */
    inline void set_GPIO21_PUE()
    {
        GPIO21 |= 1u << 3u;
    }

    /**
     * Clear GPIO21's PUE bit.
     */
    inline void clear_GPIO21_PUE()
    {
        GPIO21 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO21's PUE bit.
     */
    inline void toggle_GPIO21_PUE()
    {
        GPIO21 ^= 1u << 3u;
    }

    /**
     * Get GPIO21's DRIVE field.
     */
    inline PADS_BANK0_GPIO21_DRIVE get_GPIO21_DRIVE()
    {
        return PADS_BANK0_GPIO21_DRIVE((GPIO21 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO21's DRIVE field.
     */
    inline void set_GPIO21_DRIVE(PADS_BANK0_GPIO21_DRIVE value)
    {
        uint32_t curr = GPIO21;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO21 = curr;
    }

    /**
     * Get GPIO21's IE bit.
     */
    inline bool get_GPIO21_IE()
    {
        return GPIO21 & (1u << 6u);
    }

    /**
     * Set GPIO21's IE bit.
     */
    inline void set_GPIO21_IE()
    {
        GPIO21 |= 1u << 6u;
    }

    /**
     * Clear GPIO21's IE bit.
     */
    inline void clear_GPIO21_IE()
    {
        GPIO21 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO21's IE bit.
     */
    inline void toggle_GPIO21_IE()
    {
        GPIO21 ^= 1u << 6u;
    }

    /**
     * Get GPIO21's OD bit.
     */
    inline bool get_GPIO21_OD()
    {
        return GPIO21 & (1u << 7u);
    }

    /**
     * Set GPIO21's OD bit.
     */
    inline void set_GPIO21_OD()
    {
        GPIO21 |= 1u << 7u;
    }

    /**
     * Clear GPIO21's OD bit.
     */
    inline void clear_GPIO21_OD()
    {
        GPIO21 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO21's OD bit.
     */
    inline void toggle_GPIO21_OD()
    {
        GPIO21 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO21's bit fields.
     */
    inline void get_GPIO21(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO21_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO21;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO21_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO21's bit fields.
     */
    inline void set_GPIO21(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO21_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO21;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO21 = curr;
    }

    /**
     * Get GPIO22's SLEWFAST bit.
     */
    inline bool get_GPIO22_SLEWFAST()
    {
        return GPIO22 & (1u << 0u);
    }

    /**
     * Set GPIO22's SLEWFAST bit.
     */
    inline void set_GPIO22_SLEWFAST()
    {
        GPIO22 |= 1u << 0u;
    }

    /**
     * Clear GPIO22's SLEWFAST bit.
     */
    inline void clear_GPIO22_SLEWFAST()
    {
        GPIO22 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO22's SLEWFAST bit.
     */
    inline void toggle_GPIO22_SLEWFAST()
    {
        GPIO22 ^= 1u << 0u;
    }

    /**
     * Get GPIO22's SCHMITT bit.
     */
    inline bool get_GPIO22_SCHMITT()
    {
        return GPIO22 & (1u << 1u);
    }

    /**
     * Set GPIO22's SCHMITT bit.
     */
    inline void set_GPIO22_SCHMITT()
    {
        GPIO22 |= 1u << 1u;
    }

    /**
     * Clear GPIO22's SCHMITT bit.
     */
    inline void clear_GPIO22_SCHMITT()
    {
        GPIO22 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO22's SCHMITT bit.
     */
    inline void toggle_GPIO22_SCHMITT()
    {
        GPIO22 ^= 1u << 1u;
    }

    /**
     * Get GPIO22's PDE bit.
     */
    inline bool get_GPIO22_PDE()
    {
        return GPIO22 & (1u << 2u);
    }

    /**
     * Set GPIO22's PDE bit.
     */
    inline void set_GPIO22_PDE()
    {
        GPIO22 |= 1u << 2u;
    }

    /**
     * Clear GPIO22's PDE bit.
     */
    inline void clear_GPIO22_PDE()
    {
        GPIO22 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO22's PDE bit.
     */
    inline void toggle_GPIO22_PDE()
    {
        GPIO22 ^= 1u << 2u;
    }

    /**
     * Get GPIO22's PUE bit.
     */
    inline bool get_GPIO22_PUE()
    {
        return GPIO22 & (1u << 3u);
    }

    /**
     * Set GPIO22's PUE bit.
     */
    inline void set_GPIO22_PUE()
    {
        GPIO22 |= 1u << 3u;
    }

    /**
     * Clear GPIO22's PUE bit.
     */
    inline void clear_GPIO22_PUE()
    {
        GPIO22 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO22's PUE bit.
     */
    inline void toggle_GPIO22_PUE()
    {
        GPIO22 ^= 1u << 3u;
    }

    /**
     * Get GPIO22's DRIVE field.
     */
    inline PADS_BANK0_GPIO22_DRIVE get_GPIO22_DRIVE()
    {
        return PADS_BANK0_GPIO22_DRIVE((GPIO22 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO22's DRIVE field.
     */
    inline void set_GPIO22_DRIVE(PADS_BANK0_GPIO22_DRIVE value)
    {
        uint32_t curr = GPIO22;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO22 = curr;
    }

    /**
     * Get GPIO22's IE bit.
     */
    inline bool get_GPIO22_IE()
    {
        return GPIO22 & (1u << 6u);
    }

    /**
     * Set GPIO22's IE bit.
     */
    inline void set_GPIO22_IE()
    {
        GPIO22 |= 1u << 6u;
    }

    /**
     * Clear GPIO22's IE bit.
     */
    inline void clear_GPIO22_IE()
    {
        GPIO22 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO22's IE bit.
     */
    inline void toggle_GPIO22_IE()
    {
        GPIO22 ^= 1u << 6u;
    }

    /**
     * Get GPIO22's OD bit.
     */
    inline bool get_GPIO22_OD()
    {
        return GPIO22 & (1u << 7u);
    }

    /**
     * Set GPIO22's OD bit.
     */
    inline void set_GPIO22_OD()
    {
        GPIO22 |= 1u << 7u;
    }

    /**
     * Clear GPIO22's OD bit.
     */
    inline void clear_GPIO22_OD()
    {
        GPIO22 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO22's OD bit.
     */
    inline void toggle_GPIO22_OD()
    {
        GPIO22 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO22's bit fields.
     */
    inline void get_GPIO22(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO22_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO22;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO22_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO22's bit fields.
     */
    inline void set_GPIO22(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO22_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO22;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO22 = curr;
    }

    /**
     * Get GPIO23's SLEWFAST bit.
     */
    inline bool get_GPIO23_SLEWFAST()
    {
        return GPIO23 & (1u << 0u);
    }

    /**
     * Set GPIO23's SLEWFAST bit.
     */
    inline void set_GPIO23_SLEWFAST()
    {
        GPIO23 |= 1u << 0u;
    }

    /**
     * Clear GPIO23's SLEWFAST bit.
     */
    inline void clear_GPIO23_SLEWFAST()
    {
        GPIO23 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO23's SLEWFAST bit.
     */
    inline void toggle_GPIO23_SLEWFAST()
    {
        GPIO23 ^= 1u << 0u;
    }

    /**
     * Get GPIO23's SCHMITT bit.
     */
    inline bool get_GPIO23_SCHMITT()
    {
        return GPIO23 & (1u << 1u);
    }

    /**
     * Set GPIO23's SCHMITT bit.
     */
    inline void set_GPIO23_SCHMITT()
    {
        GPIO23 |= 1u << 1u;
    }

    /**
     * Clear GPIO23's SCHMITT bit.
     */
    inline void clear_GPIO23_SCHMITT()
    {
        GPIO23 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO23's SCHMITT bit.
     */
    inline void toggle_GPIO23_SCHMITT()
    {
        GPIO23 ^= 1u << 1u;
    }

    /**
     * Get GPIO23's PDE bit.
     */
    inline bool get_GPIO23_PDE()
    {
        return GPIO23 & (1u << 2u);
    }

    /**
     * Set GPIO23's PDE bit.
     */
    inline void set_GPIO23_PDE()
    {
        GPIO23 |= 1u << 2u;
    }

    /**
     * Clear GPIO23's PDE bit.
     */
    inline void clear_GPIO23_PDE()
    {
        GPIO23 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO23's PDE bit.
     */
    inline void toggle_GPIO23_PDE()
    {
        GPIO23 ^= 1u << 2u;
    }

    /**
     * Get GPIO23's PUE bit.
     */
    inline bool get_GPIO23_PUE()
    {
        return GPIO23 & (1u << 3u);
    }

    /**
     * Set GPIO23's PUE bit.
     */
    inline void set_GPIO23_PUE()
    {
        GPIO23 |= 1u << 3u;
    }

    /**
     * Clear GPIO23's PUE bit.
     */
    inline void clear_GPIO23_PUE()
    {
        GPIO23 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO23's PUE bit.
     */
    inline void toggle_GPIO23_PUE()
    {
        GPIO23 ^= 1u << 3u;
    }

    /**
     * Get GPIO23's DRIVE field.
     */
    inline PADS_BANK0_GPIO23_DRIVE get_GPIO23_DRIVE()
    {
        return PADS_BANK0_GPIO23_DRIVE((GPIO23 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO23's DRIVE field.
     */
    inline void set_GPIO23_DRIVE(PADS_BANK0_GPIO23_DRIVE value)
    {
        uint32_t curr = GPIO23;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO23 = curr;
    }

    /**
     * Get GPIO23's IE bit.
     */
    inline bool get_GPIO23_IE()
    {
        return GPIO23 & (1u << 6u);
    }

    /**
     * Set GPIO23's IE bit.
     */
    inline void set_GPIO23_IE()
    {
        GPIO23 |= 1u << 6u;
    }

    /**
     * Clear GPIO23's IE bit.
     */
    inline void clear_GPIO23_IE()
    {
        GPIO23 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO23's IE bit.
     */
    inline void toggle_GPIO23_IE()
    {
        GPIO23 ^= 1u << 6u;
    }

    /**
     * Get GPIO23's OD bit.
     */
    inline bool get_GPIO23_OD()
    {
        return GPIO23 & (1u << 7u);
    }

    /**
     * Set GPIO23's OD bit.
     */
    inline void set_GPIO23_OD()
    {
        GPIO23 |= 1u << 7u;
    }

    /**
     * Clear GPIO23's OD bit.
     */
    inline void clear_GPIO23_OD()
    {
        GPIO23 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO23's OD bit.
     */
    inline void toggle_GPIO23_OD()
    {
        GPIO23 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO23's bit fields.
     */
    inline void get_GPIO23(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO23_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO23;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO23_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO23's bit fields.
     */
    inline void set_GPIO23(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO23_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO23;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO23 = curr;
    }

    /**
     * Get GPIO24's SLEWFAST bit.
     */
    inline bool get_GPIO24_SLEWFAST()
    {
        return GPIO24 & (1u << 0u);
    }

    /**
     * Set GPIO24's SLEWFAST bit.
     */
    inline void set_GPIO24_SLEWFAST()
    {
        GPIO24 |= 1u << 0u;
    }

    /**
     * Clear GPIO24's SLEWFAST bit.
     */
    inline void clear_GPIO24_SLEWFAST()
    {
        GPIO24 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO24's SLEWFAST bit.
     */
    inline void toggle_GPIO24_SLEWFAST()
    {
        GPIO24 ^= 1u << 0u;
    }

    /**
     * Get GPIO24's SCHMITT bit.
     */
    inline bool get_GPIO24_SCHMITT()
    {
        return GPIO24 & (1u << 1u);
    }

    /**
     * Set GPIO24's SCHMITT bit.
     */
    inline void set_GPIO24_SCHMITT()
    {
        GPIO24 |= 1u << 1u;
    }

    /**
     * Clear GPIO24's SCHMITT bit.
     */
    inline void clear_GPIO24_SCHMITT()
    {
        GPIO24 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO24's SCHMITT bit.
     */
    inline void toggle_GPIO24_SCHMITT()
    {
        GPIO24 ^= 1u << 1u;
    }

    /**
     * Get GPIO24's PDE bit.
     */
    inline bool get_GPIO24_PDE()
    {
        return GPIO24 & (1u << 2u);
    }

    /**
     * Set GPIO24's PDE bit.
     */
    inline void set_GPIO24_PDE()
    {
        GPIO24 |= 1u << 2u;
    }

    /**
     * Clear GPIO24's PDE bit.
     */
    inline void clear_GPIO24_PDE()
    {
        GPIO24 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO24's PDE bit.
     */
    inline void toggle_GPIO24_PDE()
    {
        GPIO24 ^= 1u << 2u;
    }

    /**
     * Get GPIO24's PUE bit.
     */
    inline bool get_GPIO24_PUE()
    {
        return GPIO24 & (1u << 3u);
    }

    /**
     * Set GPIO24's PUE bit.
     */
    inline void set_GPIO24_PUE()
    {
        GPIO24 |= 1u << 3u;
    }

    /**
     * Clear GPIO24's PUE bit.
     */
    inline void clear_GPIO24_PUE()
    {
        GPIO24 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO24's PUE bit.
     */
    inline void toggle_GPIO24_PUE()
    {
        GPIO24 ^= 1u << 3u;
    }

    /**
     * Get GPIO24's DRIVE field.
     */
    inline PADS_BANK0_GPIO24_DRIVE get_GPIO24_DRIVE()
    {
        return PADS_BANK0_GPIO24_DRIVE((GPIO24 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO24's DRIVE field.
     */
    inline void set_GPIO24_DRIVE(PADS_BANK0_GPIO24_DRIVE value)
    {
        uint32_t curr = GPIO24;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO24 = curr;
    }

    /**
     * Get GPIO24's IE bit.
     */
    inline bool get_GPIO24_IE()
    {
        return GPIO24 & (1u << 6u);
    }

    /**
     * Set GPIO24's IE bit.
     */
    inline void set_GPIO24_IE()
    {
        GPIO24 |= 1u << 6u;
    }

    /**
     * Clear GPIO24's IE bit.
     */
    inline void clear_GPIO24_IE()
    {
        GPIO24 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO24's IE bit.
     */
    inline void toggle_GPIO24_IE()
    {
        GPIO24 ^= 1u << 6u;
    }

    /**
     * Get GPIO24's OD bit.
     */
    inline bool get_GPIO24_OD()
    {
        return GPIO24 & (1u << 7u);
    }

    /**
     * Set GPIO24's OD bit.
     */
    inline void set_GPIO24_OD()
    {
        GPIO24 |= 1u << 7u;
    }

    /**
     * Clear GPIO24's OD bit.
     */
    inline void clear_GPIO24_OD()
    {
        GPIO24 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO24's OD bit.
     */
    inline void toggle_GPIO24_OD()
    {
        GPIO24 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO24's bit fields.
     */
    inline void get_GPIO24(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO24_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO24;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO24_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO24's bit fields.
     */
    inline void set_GPIO24(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO24_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO24;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO24 = curr;
    }

    /**
     * Get GPIO25's SLEWFAST bit.
     */
    inline bool get_GPIO25_SLEWFAST()
    {
        return GPIO25 & (1u << 0u);
    }

    /**
     * Set GPIO25's SLEWFAST bit.
     */
    inline void set_GPIO25_SLEWFAST()
    {
        GPIO25 |= 1u << 0u;
    }

    /**
     * Clear GPIO25's SLEWFAST bit.
     */
    inline void clear_GPIO25_SLEWFAST()
    {
        GPIO25 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO25's SLEWFAST bit.
     */
    inline void toggle_GPIO25_SLEWFAST()
    {
        GPIO25 ^= 1u << 0u;
    }

    /**
     * Get GPIO25's SCHMITT bit.
     */
    inline bool get_GPIO25_SCHMITT()
    {
        return GPIO25 & (1u << 1u);
    }

    /**
     * Set GPIO25's SCHMITT bit.
     */
    inline void set_GPIO25_SCHMITT()
    {
        GPIO25 |= 1u << 1u;
    }

    /**
     * Clear GPIO25's SCHMITT bit.
     */
    inline void clear_GPIO25_SCHMITT()
    {
        GPIO25 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO25's SCHMITT bit.
     */
    inline void toggle_GPIO25_SCHMITT()
    {
        GPIO25 ^= 1u << 1u;
    }

    /**
     * Get GPIO25's PDE bit.
     */
    inline bool get_GPIO25_PDE()
    {
        return GPIO25 & (1u << 2u);
    }

    /**
     * Set GPIO25's PDE bit.
     */
    inline void set_GPIO25_PDE()
    {
        GPIO25 |= 1u << 2u;
    }

    /**
     * Clear GPIO25's PDE bit.
     */
    inline void clear_GPIO25_PDE()
    {
        GPIO25 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO25's PDE bit.
     */
    inline void toggle_GPIO25_PDE()
    {
        GPIO25 ^= 1u << 2u;
    }

    /**
     * Get GPIO25's PUE bit.
     */
    inline bool get_GPIO25_PUE()
    {
        return GPIO25 & (1u << 3u);
    }

    /**
     * Set GPIO25's PUE bit.
     */
    inline void set_GPIO25_PUE()
    {
        GPIO25 |= 1u << 3u;
    }

    /**
     * Clear GPIO25's PUE bit.
     */
    inline void clear_GPIO25_PUE()
    {
        GPIO25 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO25's PUE bit.
     */
    inline void toggle_GPIO25_PUE()
    {
        GPIO25 ^= 1u << 3u;
    }

    /**
     * Get GPIO25's DRIVE field.
     */
    inline PADS_BANK0_GPIO25_DRIVE get_GPIO25_DRIVE()
    {
        return PADS_BANK0_GPIO25_DRIVE((GPIO25 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO25's DRIVE field.
     */
    inline void set_GPIO25_DRIVE(PADS_BANK0_GPIO25_DRIVE value)
    {
        uint32_t curr = GPIO25;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO25 = curr;
    }

    /**
     * Get GPIO25's IE bit.
     */
    inline bool get_GPIO25_IE()
    {
        return GPIO25 & (1u << 6u);
    }

    /**
     * Set GPIO25's IE bit.
     */
    inline void set_GPIO25_IE()
    {
        GPIO25 |= 1u << 6u;
    }

    /**
     * Clear GPIO25's IE bit.
     */
    inline void clear_GPIO25_IE()
    {
        GPIO25 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO25's IE bit.
     */
    inline void toggle_GPIO25_IE()
    {
        GPIO25 ^= 1u << 6u;
    }

    /**
     * Get GPIO25's OD bit.
     */
    inline bool get_GPIO25_OD()
    {
        return GPIO25 & (1u << 7u);
    }

    /**
     * Set GPIO25's OD bit.
     */
    inline void set_GPIO25_OD()
    {
        GPIO25 |= 1u << 7u;
    }

    /**
     * Clear GPIO25's OD bit.
     */
    inline void clear_GPIO25_OD()
    {
        GPIO25 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO25's OD bit.
     */
    inline void toggle_GPIO25_OD()
    {
        GPIO25 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO25's bit fields.
     */
    inline void get_GPIO25(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO25_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO25;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO25_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO25's bit fields.
     */
    inline void set_GPIO25(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO25_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO25;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO25 = curr;
    }

    /**
     * Get GPIO26's SLEWFAST bit.
     */
    inline bool get_GPIO26_SLEWFAST()
    {
        return GPIO26 & (1u << 0u);
    }

    /**
     * Set GPIO26's SLEWFAST bit.
     */
    inline void set_GPIO26_SLEWFAST()
    {
        GPIO26 |= 1u << 0u;
    }

    /**
     * Clear GPIO26's SLEWFAST bit.
     */
    inline void clear_GPIO26_SLEWFAST()
    {
        GPIO26 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO26's SLEWFAST bit.
     */
    inline void toggle_GPIO26_SLEWFAST()
    {
        GPIO26 ^= 1u << 0u;
    }

    /**
     * Get GPIO26's SCHMITT bit.
     */
    inline bool get_GPIO26_SCHMITT()
    {
        return GPIO26 & (1u << 1u);
    }

    /**
     * Set GPIO26's SCHMITT bit.
     */
    inline void set_GPIO26_SCHMITT()
    {
        GPIO26 |= 1u << 1u;
    }

    /**
     * Clear GPIO26's SCHMITT bit.
     */
    inline void clear_GPIO26_SCHMITT()
    {
        GPIO26 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO26's SCHMITT bit.
     */
    inline void toggle_GPIO26_SCHMITT()
    {
        GPIO26 ^= 1u << 1u;
    }

    /**
     * Get GPIO26's PDE bit.
     */
    inline bool get_GPIO26_PDE()
    {
        return GPIO26 & (1u << 2u);
    }

    /**
     * Set GPIO26's PDE bit.
     */
    inline void set_GPIO26_PDE()
    {
        GPIO26 |= 1u << 2u;
    }

    /**
     * Clear GPIO26's PDE bit.
     */
    inline void clear_GPIO26_PDE()
    {
        GPIO26 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO26's PDE bit.
     */
    inline void toggle_GPIO26_PDE()
    {
        GPIO26 ^= 1u << 2u;
    }

    /**
     * Get GPIO26's PUE bit.
     */
    inline bool get_GPIO26_PUE()
    {
        return GPIO26 & (1u << 3u);
    }

    /**
     * Set GPIO26's PUE bit.
     */
    inline void set_GPIO26_PUE()
    {
        GPIO26 |= 1u << 3u;
    }

    /**
     * Clear GPIO26's PUE bit.
     */
    inline void clear_GPIO26_PUE()
    {
        GPIO26 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO26's PUE bit.
     */
    inline void toggle_GPIO26_PUE()
    {
        GPIO26 ^= 1u << 3u;
    }

    /**
     * Get GPIO26's DRIVE field.
     */
    inline PADS_BANK0_GPIO26_DRIVE get_GPIO26_DRIVE()
    {
        return PADS_BANK0_GPIO26_DRIVE((GPIO26 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO26's DRIVE field.
     */
    inline void set_GPIO26_DRIVE(PADS_BANK0_GPIO26_DRIVE value)
    {
        uint32_t curr = GPIO26;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO26 = curr;
    }

    /**
     * Get GPIO26's IE bit.
     */
    inline bool get_GPIO26_IE()
    {
        return GPIO26 & (1u << 6u);
    }

    /**
     * Set GPIO26's IE bit.
     */
    inline void set_GPIO26_IE()
    {
        GPIO26 |= 1u << 6u;
    }

    /**
     * Clear GPIO26's IE bit.
     */
    inline void clear_GPIO26_IE()
    {
        GPIO26 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO26's IE bit.
     */
    inline void toggle_GPIO26_IE()
    {
        GPIO26 ^= 1u << 6u;
    }

    /**
     * Get GPIO26's OD bit.
     */
    inline bool get_GPIO26_OD()
    {
        return GPIO26 & (1u << 7u);
    }

    /**
     * Set GPIO26's OD bit.
     */
    inline void set_GPIO26_OD()
    {
        GPIO26 |= 1u << 7u;
    }

    /**
     * Clear GPIO26's OD bit.
     */
    inline void clear_GPIO26_OD()
    {
        GPIO26 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO26's OD bit.
     */
    inline void toggle_GPIO26_OD()
    {
        GPIO26 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO26's bit fields.
     */
    inline void get_GPIO26(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO26_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO26;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO26_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO26's bit fields.
     */
    inline void set_GPIO26(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO26_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO26;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO26 = curr;
    }

    /**
     * Get GPIO27's SLEWFAST bit.
     */
    inline bool get_GPIO27_SLEWFAST()
    {
        return GPIO27 & (1u << 0u);
    }

    /**
     * Set GPIO27's SLEWFAST bit.
     */
    inline void set_GPIO27_SLEWFAST()
    {
        GPIO27 |= 1u << 0u;
    }

    /**
     * Clear GPIO27's SLEWFAST bit.
     */
    inline void clear_GPIO27_SLEWFAST()
    {
        GPIO27 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO27's SLEWFAST bit.
     */
    inline void toggle_GPIO27_SLEWFAST()
    {
        GPIO27 ^= 1u << 0u;
    }

    /**
     * Get GPIO27's SCHMITT bit.
     */
    inline bool get_GPIO27_SCHMITT()
    {
        return GPIO27 & (1u << 1u);
    }

    /**
     * Set GPIO27's SCHMITT bit.
     */
    inline void set_GPIO27_SCHMITT()
    {
        GPIO27 |= 1u << 1u;
    }

    /**
     * Clear GPIO27's SCHMITT bit.
     */
    inline void clear_GPIO27_SCHMITT()
    {
        GPIO27 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO27's SCHMITT bit.
     */
    inline void toggle_GPIO27_SCHMITT()
    {
        GPIO27 ^= 1u << 1u;
    }

    /**
     * Get GPIO27's PDE bit.
     */
    inline bool get_GPIO27_PDE()
    {
        return GPIO27 & (1u << 2u);
    }

    /**
     * Set GPIO27's PDE bit.
     */
    inline void set_GPIO27_PDE()
    {
        GPIO27 |= 1u << 2u;
    }

    /**
     * Clear GPIO27's PDE bit.
     */
    inline void clear_GPIO27_PDE()
    {
        GPIO27 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO27's PDE bit.
     */
    inline void toggle_GPIO27_PDE()
    {
        GPIO27 ^= 1u << 2u;
    }

    /**
     * Get GPIO27's PUE bit.
     */
    inline bool get_GPIO27_PUE()
    {
        return GPIO27 & (1u << 3u);
    }

    /**
     * Set GPIO27's PUE bit.
     */
    inline void set_GPIO27_PUE()
    {
        GPIO27 |= 1u << 3u;
    }

    /**
     * Clear GPIO27's PUE bit.
     */
    inline void clear_GPIO27_PUE()
    {
        GPIO27 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO27's PUE bit.
     */
    inline void toggle_GPIO27_PUE()
    {
        GPIO27 ^= 1u << 3u;
    }

    /**
     * Get GPIO27's DRIVE field.
     */
    inline PADS_BANK0_GPIO27_DRIVE get_GPIO27_DRIVE()
    {
        return PADS_BANK0_GPIO27_DRIVE((GPIO27 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO27's DRIVE field.
     */
    inline void set_GPIO27_DRIVE(PADS_BANK0_GPIO27_DRIVE value)
    {
        uint32_t curr = GPIO27;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO27 = curr;
    }

    /**
     * Get GPIO27's IE bit.
     */
    inline bool get_GPIO27_IE()
    {
        return GPIO27 & (1u << 6u);
    }

    /**
     * Set GPIO27's IE bit.
     */
    inline void set_GPIO27_IE()
    {
        GPIO27 |= 1u << 6u;
    }

    /**
     * Clear GPIO27's IE bit.
     */
    inline void clear_GPIO27_IE()
    {
        GPIO27 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO27's IE bit.
     */
    inline void toggle_GPIO27_IE()
    {
        GPIO27 ^= 1u << 6u;
    }

    /**
     * Get GPIO27's OD bit.
     */
    inline bool get_GPIO27_OD()
    {
        return GPIO27 & (1u << 7u);
    }

    /**
     * Set GPIO27's OD bit.
     */
    inline void set_GPIO27_OD()
    {
        GPIO27 |= 1u << 7u;
    }

    /**
     * Clear GPIO27's OD bit.
     */
    inline void clear_GPIO27_OD()
    {
        GPIO27 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO27's OD bit.
     */
    inline void toggle_GPIO27_OD()
    {
        GPIO27 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO27's bit fields.
     */
    inline void get_GPIO27(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO27_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO27;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO27_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO27's bit fields.
     */
    inline void set_GPIO27(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO27_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO27;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO27 = curr;
    }

    /**
     * Get GPIO28's SLEWFAST bit.
     */
    inline bool get_GPIO28_SLEWFAST()
    {
        return GPIO28 & (1u << 0u);
    }

    /**
     * Set GPIO28's SLEWFAST bit.
     */
    inline void set_GPIO28_SLEWFAST()
    {
        GPIO28 |= 1u << 0u;
    }

    /**
     * Clear GPIO28's SLEWFAST bit.
     */
    inline void clear_GPIO28_SLEWFAST()
    {
        GPIO28 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO28's SLEWFAST bit.
     */
    inline void toggle_GPIO28_SLEWFAST()
    {
        GPIO28 ^= 1u << 0u;
    }

    /**
     * Get GPIO28's SCHMITT bit.
     */
    inline bool get_GPIO28_SCHMITT()
    {
        return GPIO28 & (1u << 1u);
    }

    /**
     * Set GPIO28's SCHMITT bit.
     */
    inline void set_GPIO28_SCHMITT()
    {
        GPIO28 |= 1u << 1u;
    }

    /**
     * Clear GPIO28's SCHMITT bit.
     */
    inline void clear_GPIO28_SCHMITT()
    {
        GPIO28 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO28's SCHMITT bit.
     */
    inline void toggle_GPIO28_SCHMITT()
    {
        GPIO28 ^= 1u << 1u;
    }

    /**
     * Get GPIO28's PDE bit.
     */
    inline bool get_GPIO28_PDE()
    {
        return GPIO28 & (1u << 2u);
    }

    /**
     * Set GPIO28's PDE bit.
     */
    inline void set_GPIO28_PDE()
    {
        GPIO28 |= 1u << 2u;
    }

    /**
     * Clear GPIO28's PDE bit.
     */
    inline void clear_GPIO28_PDE()
    {
        GPIO28 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO28's PDE bit.
     */
    inline void toggle_GPIO28_PDE()
    {
        GPIO28 ^= 1u << 2u;
    }

    /**
     * Get GPIO28's PUE bit.
     */
    inline bool get_GPIO28_PUE()
    {
        return GPIO28 & (1u << 3u);
    }

    /**
     * Set GPIO28's PUE bit.
     */
    inline void set_GPIO28_PUE()
    {
        GPIO28 |= 1u << 3u;
    }

    /**
     * Clear GPIO28's PUE bit.
     */
    inline void clear_GPIO28_PUE()
    {
        GPIO28 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO28's PUE bit.
     */
    inline void toggle_GPIO28_PUE()
    {
        GPIO28 ^= 1u << 3u;
    }

    /**
     * Get GPIO28's DRIVE field.
     */
    inline PADS_BANK0_GPIO28_DRIVE get_GPIO28_DRIVE()
    {
        return PADS_BANK0_GPIO28_DRIVE((GPIO28 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO28's DRIVE field.
     */
    inline void set_GPIO28_DRIVE(PADS_BANK0_GPIO28_DRIVE value)
    {
        uint32_t curr = GPIO28;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO28 = curr;
    }

    /**
     * Get GPIO28's IE bit.
     */
    inline bool get_GPIO28_IE()
    {
        return GPIO28 & (1u << 6u);
    }

    /**
     * Set GPIO28's IE bit.
     */
    inline void set_GPIO28_IE()
    {
        GPIO28 |= 1u << 6u;
    }

    /**
     * Clear GPIO28's IE bit.
     */
    inline void clear_GPIO28_IE()
    {
        GPIO28 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO28's IE bit.
     */
    inline void toggle_GPIO28_IE()
    {
        GPIO28 ^= 1u << 6u;
    }

    /**
     * Get GPIO28's OD bit.
     */
    inline bool get_GPIO28_OD()
    {
        return GPIO28 & (1u << 7u);
    }

    /**
     * Set GPIO28's OD bit.
     */
    inline void set_GPIO28_OD()
    {
        GPIO28 |= 1u << 7u;
    }

    /**
     * Clear GPIO28's OD bit.
     */
    inline void clear_GPIO28_OD()
    {
        GPIO28 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO28's OD bit.
     */
    inline void toggle_GPIO28_OD()
    {
        GPIO28 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO28's bit fields.
     */
    inline void get_GPIO28(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO28_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO28;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO28_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO28's bit fields.
     */
    inline void set_GPIO28(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO28_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO28;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO28 = curr;
    }

    /**
     * Get GPIO29's SLEWFAST bit.
     */
    inline bool get_GPIO29_SLEWFAST()
    {
        return GPIO29 & (1u << 0u);
    }

    /**
     * Set GPIO29's SLEWFAST bit.
     */
    inline void set_GPIO29_SLEWFAST()
    {
        GPIO29 |= 1u << 0u;
    }

    /**
     * Clear GPIO29's SLEWFAST bit.
     */
    inline void clear_GPIO29_SLEWFAST()
    {
        GPIO29 &= ~(1u << 0u);
    }

    /**
     * Toggle GPIO29's SLEWFAST bit.
     */
    inline void toggle_GPIO29_SLEWFAST()
    {
        GPIO29 ^= 1u << 0u;
    }

    /**
     * Get GPIO29's SCHMITT bit.
     */
    inline bool get_GPIO29_SCHMITT()
    {
        return GPIO29 & (1u << 1u);
    }

    /**
     * Set GPIO29's SCHMITT bit.
     */
    inline void set_GPIO29_SCHMITT()
    {
        GPIO29 |= 1u << 1u;
    }

    /**
     * Clear GPIO29's SCHMITT bit.
     */
    inline void clear_GPIO29_SCHMITT()
    {
        GPIO29 &= ~(1u << 1u);
    }

    /**
     * Toggle GPIO29's SCHMITT bit.
     */
    inline void toggle_GPIO29_SCHMITT()
    {
        GPIO29 ^= 1u << 1u;
    }

    /**
     * Get GPIO29's PDE bit.
     */
    inline bool get_GPIO29_PDE()
    {
        return GPIO29 & (1u << 2u);
    }

    /**
     * Set GPIO29's PDE bit.
     */
    inline void set_GPIO29_PDE()
    {
        GPIO29 |= 1u << 2u;
    }

    /**
     * Clear GPIO29's PDE bit.
     */
    inline void clear_GPIO29_PDE()
    {
        GPIO29 &= ~(1u << 2u);
    }

    /**
     * Toggle GPIO29's PDE bit.
     */
    inline void toggle_GPIO29_PDE()
    {
        GPIO29 ^= 1u << 2u;
    }

    /**
     * Get GPIO29's PUE bit.
     */
    inline bool get_GPIO29_PUE()
    {
        return GPIO29 & (1u << 3u);
    }

    /**
     * Set GPIO29's PUE bit.
     */
    inline void set_GPIO29_PUE()
    {
        GPIO29 |= 1u << 3u;
    }

    /**
     * Clear GPIO29's PUE bit.
     */
    inline void clear_GPIO29_PUE()
    {
        GPIO29 &= ~(1u << 3u);
    }

    /**
     * Toggle GPIO29's PUE bit.
     */
    inline void toggle_GPIO29_PUE()
    {
        GPIO29 ^= 1u << 3u;
    }

    /**
     * Get GPIO29's DRIVE field.
     */
    inline PADS_BANK0_GPIO29_DRIVE get_GPIO29_DRIVE()
    {
        return PADS_BANK0_GPIO29_DRIVE((GPIO29 >> 4u) & 0b11u);
    }

    /**
     * Set GPIO29's DRIVE field.
     */
    inline void set_GPIO29_DRIVE(PADS_BANK0_GPIO29_DRIVE value)
    {
        uint32_t curr = GPIO29;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        GPIO29 = curr;
    }

    /**
     * Get GPIO29's IE bit.
     */
    inline bool get_GPIO29_IE()
    {
        return GPIO29 & (1u << 6u);
    }

    /**
     * Set GPIO29's IE bit.
     */
    inline void set_GPIO29_IE()
    {
        GPIO29 |= 1u << 6u;
    }

    /**
     * Clear GPIO29's IE bit.
     */
    inline void clear_GPIO29_IE()
    {
        GPIO29 &= ~(1u << 6u);
    }

    /**
     * Toggle GPIO29's IE bit.
     */
    inline void toggle_GPIO29_IE()
    {
        GPIO29 ^= 1u << 6u;
    }

    /**
     * Get GPIO29's OD bit.
     */
    inline bool get_GPIO29_OD()
    {
        return GPIO29 & (1u << 7u);
    }

    /**
     * Set GPIO29's OD bit.
     */
    inline void set_GPIO29_OD()
    {
        GPIO29 |= 1u << 7u;
    }

    /**
     * Clear GPIO29's OD bit.
     */
    inline void clear_GPIO29_OD()
    {
        GPIO29 &= ~(1u << 7u);
    }

    /**
     * Toggle GPIO29's OD bit.
     */
    inline void toggle_GPIO29_OD()
    {
        GPIO29 ^= 1u << 7u;
    }

    /**
     * Get all of GPIO29's bit fields.
     */
    inline void get_GPIO29(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                           PADS_BANK0_GPIO29_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = GPIO29;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_GPIO29_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of GPIO29's bit fields.
     */
    inline void set_GPIO29(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                           PADS_BANK0_GPIO29_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = GPIO29;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        GPIO29 = curr;
    }

    /**
     * Get SWCLK's SLEWFAST bit.
     */
    inline bool get_SWCLK_SLEWFAST()
    {
        return SWCLK & (1u << 0u);
    }

    /**
     * Set SWCLK's SLEWFAST bit.
     */
    inline void set_SWCLK_SLEWFAST()
    {
        SWCLK |= 1u << 0u;
    }

    /**
     * Clear SWCLK's SLEWFAST bit.
     */
    inline void clear_SWCLK_SLEWFAST()
    {
        SWCLK &= ~(1u << 0u);
    }

    /**
     * Toggle SWCLK's SLEWFAST bit.
     */
    inline void toggle_SWCLK_SLEWFAST()
    {
        SWCLK ^= 1u << 0u;
    }

    /**
     * Get SWCLK's SCHMITT bit.
     */
    inline bool get_SWCLK_SCHMITT()
    {
        return SWCLK & (1u << 1u);
    }

    /**
     * Set SWCLK's SCHMITT bit.
     */
    inline void set_SWCLK_SCHMITT()
    {
        SWCLK |= 1u << 1u;
    }

    /**
     * Clear SWCLK's SCHMITT bit.
     */
    inline void clear_SWCLK_SCHMITT()
    {
        SWCLK &= ~(1u << 1u);
    }

    /**
     * Toggle SWCLK's SCHMITT bit.
     */
    inline void toggle_SWCLK_SCHMITT()
    {
        SWCLK ^= 1u << 1u;
    }

    /**
     * Get SWCLK's PDE bit.
     */
    inline bool get_SWCLK_PDE()
    {
        return SWCLK & (1u << 2u);
    }

    /**
     * Set SWCLK's PDE bit.
     */
    inline void set_SWCLK_PDE()
    {
        SWCLK |= 1u << 2u;
    }

    /**
     * Clear SWCLK's PDE bit.
     */
    inline void clear_SWCLK_PDE()
    {
        SWCLK &= ~(1u << 2u);
    }

    /**
     * Toggle SWCLK's PDE bit.
     */
    inline void toggle_SWCLK_PDE()
    {
        SWCLK ^= 1u << 2u;
    }

    /**
     * Get SWCLK's PUE bit.
     */
    inline bool get_SWCLK_PUE()
    {
        return SWCLK & (1u << 3u);
    }

    /**
     * Set SWCLK's PUE bit.
     */
    inline void set_SWCLK_PUE()
    {
        SWCLK |= 1u << 3u;
    }

    /**
     * Clear SWCLK's PUE bit.
     */
    inline void clear_SWCLK_PUE()
    {
        SWCLK &= ~(1u << 3u);
    }

    /**
     * Toggle SWCLK's PUE bit.
     */
    inline void toggle_SWCLK_PUE()
    {
        SWCLK ^= 1u << 3u;
    }

    /**
     * Get SWCLK's DRIVE field.
     */
    inline PADS_BANK0_SWCLK_DRIVE get_SWCLK_DRIVE()
    {
        return PADS_BANK0_SWCLK_DRIVE((SWCLK >> 4u) & 0b11u);
    }

    /**
     * Set SWCLK's DRIVE field.
     */
    inline void set_SWCLK_DRIVE(PADS_BANK0_SWCLK_DRIVE value)
    {
        uint32_t curr = SWCLK;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SWCLK = curr;
    }

    /**
     * Get SWCLK's IE bit.
     */
    inline bool get_SWCLK_IE()
    {
        return SWCLK & (1u << 6u);
    }

    /**
     * Set SWCLK's IE bit.
     */
    inline void set_SWCLK_IE()
    {
        SWCLK |= 1u << 6u;
    }

    /**
     * Clear SWCLK's IE bit.
     */
    inline void clear_SWCLK_IE()
    {
        SWCLK &= ~(1u << 6u);
    }

    /**
     * Toggle SWCLK's IE bit.
     */
    inline void toggle_SWCLK_IE()
    {
        SWCLK ^= 1u << 6u;
    }

    /**
     * Get SWCLK's OD bit.
     */
    inline bool get_SWCLK_OD()
    {
        return SWCLK & (1u << 7u);
    }

    /**
     * Set SWCLK's OD bit.
     */
    inline void set_SWCLK_OD()
    {
        SWCLK |= 1u << 7u;
    }

    /**
     * Clear SWCLK's OD bit.
     */
    inline void clear_SWCLK_OD()
    {
        SWCLK &= ~(1u << 7u);
    }

    /**
     * Toggle SWCLK's OD bit.
     */
    inline void toggle_SWCLK_OD()
    {
        SWCLK ^= 1u << 7u;
    }

    /**
     * Get all of SWCLK's bit fields.
     */
    inline void get_SWCLK(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                          PADS_BANK0_SWCLK_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = SWCLK;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_SWCLK_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of SWCLK's bit fields.
     */
    inline void set_SWCLK(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                          PADS_BANK0_SWCLK_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = SWCLK;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        SWCLK = curr;
    }

    /**
     * Get SWD's SLEWFAST bit.
     */
    inline bool get_SWD_SLEWFAST()
    {
        return SWD & (1u << 0u);
    }

    /**
     * Set SWD's SLEWFAST bit.
     */
    inline void set_SWD_SLEWFAST()
    {
        SWD |= 1u << 0u;
    }

    /**
     * Clear SWD's SLEWFAST bit.
     */
    inline void clear_SWD_SLEWFAST()
    {
        SWD &= ~(1u << 0u);
    }

    /**
     * Toggle SWD's SLEWFAST bit.
     */
    inline void toggle_SWD_SLEWFAST()
    {
        SWD ^= 1u << 0u;
    }

    /**
     * Get SWD's SCHMITT bit.
     */
    inline bool get_SWD_SCHMITT()
    {
        return SWD & (1u << 1u);
    }

    /**
     * Set SWD's SCHMITT bit.
     */
    inline void set_SWD_SCHMITT()
    {
        SWD |= 1u << 1u;
    }

    /**
     * Clear SWD's SCHMITT bit.
     */
    inline void clear_SWD_SCHMITT()
    {
        SWD &= ~(1u << 1u);
    }

    /**
     * Toggle SWD's SCHMITT bit.
     */
    inline void toggle_SWD_SCHMITT()
    {
        SWD ^= 1u << 1u;
    }

    /**
     * Get SWD's PDE bit.
     */
    inline bool get_SWD_PDE()
    {
        return SWD & (1u << 2u);
    }

    /**
     * Set SWD's PDE bit.
     */
    inline void set_SWD_PDE()
    {
        SWD |= 1u << 2u;
    }

    /**
     * Clear SWD's PDE bit.
     */
    inline void clear_SWD_PDE()
    {
        SWD &= ~(1u << 2u);
    }

    /**
     * Toggle SWD's PDE bit.
     */
    inline void toggle_SWD_PDE()
    {
        SWD ^= 1u << 2u;
    }

    /**
     * Get SWD's PUE bit.
     */
    inline bool get_SWD_PUE()
    {
        return SWD & (1u << 3u);
    }

    /**
     * Set SWD's PUE bit.
     */
    inline void set_SWD_PUE()
    {
        SWD |= 1u << 3u;
    }

    /**
     * Clear SWD's PUE bit.
     */
    inline void clear_SWD_PUE()
    {
        SWD &= ~(1u << 3u);
    }

    /**
     * Toggle SWD's PUE bit.
     */
    inline void toggle_SWD_PUE()
    {
        SWD ^= 1u << 3u;
    }

    /**
     * Get SWD's DRIVE field.
     */
    inline PADS_BANK0_SWD_DRIVE get_SWD_DRIVE()
    {
        return PADS_BANK0_SWD_DRIVE((SWD >> 4u) & 0b11u);
    }

    /**
     * Set SWD's DRIVE field.
     */
    inline void set_SWD_DRIVE(PADS_BANK0_SWD_DRIVE value)
    {
        uint32_t curr = SWD;

        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(value) & 0b11u) << 4u;

        SWD = curr;
    }

    /**
     * Get SWD's IE bit.
     */
    inline bool get_SWD_IE()
    {
        return SWD & (1u << 6u);
    }

    /**
     * Set SWD's IE bit.
     */
    inline void set_SWD_IE()
    {
        SWD |= 1u << 6u;
    }

    /**
     * Clear SWD's IE bit.
     */
    inline void clear_SWD_IE()
    {
        SWD &= ~(1u << 6u);
    }

    /**
     * Toggle SWD's IE bit.
     */
    inline void toggle_SWD_IE()
    {
        SWD ^= 1u << 6u;
    }

    /**
     * Get SWD's OD bit.
     */
    inline bool get_SWD_OD()
    {
        return SWD & (1u << 7u);
    }

    /**
     * Set SWD's OD bit.
     */
    inline void set_SWD_OD()
    {
        SWD |= 1u << 7u;
    }

    /**
     * Clear SWD's OD bit.
     */
    inline void clear_SWD_OD()
    {
        SWD &= ~(1u << 7u);
    }

    /**
     * Toggle SWD's OD bit.
     */
    inline void toggle_SWD_OD()
    {
        SWD ^= 1u << 7u;
    }

    /**
     * Get all of SWD's bit fields.
     */
    inline void get_SWD(bool &SLEWFAST, bool &SCHMITT, bool &PDE, bool &PUE,
                        PADS_BANK0_SWD_DRIVE &DRIVE, bool &IE, bool &OD)
    {
        uint32_t curr = SWD;

        SLEWFAST = curr & (1u << 0u);
        SCHMITT = curr & (1u << 1u);
        PDE = curr & (1u << 2u);
        PUE = curr & (1u << 3u);
        DRIVE = PADS_BANK0_SWD_DRIVE((curr >> 4u) & 0b11u);
        IE = curr & (1u << 6u);
        OD = curr & (1u << 7u);
    }

    /**
     * Set all of SWD's bit fields.
     */
    inline void set_SWD(bool SLEWFAST, bool SCHMITT, bool PDE, bool PUE,
                        PADS_BANK0_SWD_DRIVE DRIVE, bool IE, bool OD)
    {
        uint32_t curr = SWD;

        curr &= ~(0b1u << 0u);
        curr |= (SLEWFAST & 0b1u) << 0u;
        curr &= ~(0b1u << 1u);
        curr |= (SCHMITT & 0b1u) << 1u;
        curr &= ~(0b1u << 2u);
        curr |= (PDE & 0b1u) << 2u;
        curr &= ~(0b1u << 3u);
        curr |= (PUE & 0b1u) << 3u;
        curr &= ~(0b11u << 4u);
        curr |= (std::to_underlying(DRIVE) & 0b11u) << 4u;
        curr &= ~(0b1u << 6u);
        curr |= (IE & 0b1u) << 6u;
        curr &= ~(0b1u << 7u);
        curr |= (OD & 0b1u) << 7u;

        SWD = curr;
    }
};

static_assert(sizeof(pads_bank0) == pads_bank0::size);

static volatile pads_bank0 *const PADS_BANK0 =
    reinterpret_cast<pads_bank0 *>(0x4001c000);

}; // namespace RP2040
