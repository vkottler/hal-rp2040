/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace RP2040
{

/**
 * Register block to control RTC
 */
struct [[gnu::packed]] rtc
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;       /*!< rtc's identifier. */
    static constexpr std::size_t size = 48; /*!< rtc's size in bytes. */

    /* Fields. */
    uint32_t
        CLKDIV_M1; /*!< (read-write) Divider minus 1 for the 1 second counter.
                      Safe to change the value when RTC is not enabled. */
    uint32_t SETUP_0;          /*!< (read-write) RTC setup register 0 */
    uint32_t SETUP_1;          /*!< (read-write) RTC setup register 1 */
    uint32_t CTRL;             /*!< (read-write) RTC Control and status */
    uint32_t IRQ_SETUP_0;      /*!< (read-write) Interrupt setup register 0 */
    uint32_t IRQ_SETUP_1;      /*!< (read-write) Interrupt setup register 1 */
    const uint32_t RTC_1 = {}; /*!< (read-only) RTC register 1. */
    const uint32_t RTC_0 = {}; /*!< (read-only) RTC register 0\n
                Read this before RTC 1! */
    const uint32_t INTR = {};  /*!< (read-only) Raw Interrupts */
    uint32_t INTE;             /*!< (read-write) Interrupt Enable */
    uint32_t INTF;             /*!< (read-write) Interrupt Force */
    const uint32_t INTS =
        {}; /*!< (read-only) Interrupt status after masking & forcing */

    /* Methods. */

    /**
     * Get CLKDIV_M1's CLKDIV_M1 field.
     */
    inline uint16_t get_CLKDIV_M1_CLKDIV_M1()
    {
        return (CLKDIV_M1 >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set CLKDIV_M1's CLKDIV_M1 field.
     */
    inline void set_CLKDIV_M1_CLKDIV_M1(uint16_t value)
    {
        uint32_t curr = CLKDIV_M1;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        CLKDIV_M1 = curr;
    }

    /**
     * Get SETUP_0's DAY field.
     */
    inline uint8_t get_SETUP_0_DAY()
    {
        return (SETUP_0 >> 0u) & 0b11111u;
    }

    /**
     * Set SETUP_0's DAY field.
     */
    inline void set_SETUP_0_DAY(uint8_t value)
    {
        uint32_t curr = SETUP_0;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        SETUP_0 = curr;
    }

    /**
     * Get SETUP_0's MONTH field.
     */
    inline uint8_t get_SETUP_0_MONTH()
    {
        return (SETUP_0 >> 8u) & 0b1111u;
    }

    /**
     * Set SETUP_0's MONTH field.
     */
    inline void set_SETUP_0_MONTH(uint8_t value)
    {
        uint32_t curr = SETUP_0;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        SETUP_0 = curr;
    }

    /**
     * Get SETUP_0's YEAR field.
     */
    inline uint16_t get_SETUP_0_YEAR()
    {
        return (SETUP_0 >> 12u) & 0b111111111111u;
    }

    /**
     * Set SETUP_0's YEAR field.
     */
    inline void set_SETUP_0_YEAR(uint16_t value)
    {
        uint32_t curr = SETUP_0;

        curr &= ~(0b111111111111u << 12u);
        curr |= (value & 0b111111111111u) << 12u;

        SETUP_0 = curr;
    }

    /**
     * Get all of SETUP_0's bit fields.
     */
    inline void get_SETUP_0(uint8_t &DAY, uint8_t &MONTH, uint16_t &YEAR)
    {
        uint32_t curr = SETUP_0;

        DAY = (curr >> 0u) & 0b11111u;
        MONTH = (curr >> 8u) & 0b1111u;
        YEAR = (curr >> 12u) & 0b111111111111u;
    }

    /**
     * Set all of SETUP_0's bit fields.
     */
    inline void set_SETUP_0(uint8_t DAY, uint8_t MONTH, uint16_t YEAR)
    {
        uint32_t curr = SETUP_0;

        curr &= ~(0b11111u << 0u);
        curr |= (DAY & 0b11111u) << 0u;
        curr &= ~(0b1111u << 8u);
        curr |= (MONTH & 0b1111u) << 8u;
        curr &= ~(0b111111111111u << 12u);
        curr |= (YEAR & 0b111111111111u) << 12u;

        SETUP_0 = curr;
    }

    /**
     * Get SETUP_1's SEC field.
     */
    inline uint8_t get_SETUP_1_SEC()
    {
        return (SETUP_1 >> 0u) & 0b111111u;
    }

    /**
     * Set SETUP_1's SEC field.
     */
    inline void set_SETUP_1_SEC(uint8_t value)
    {
        uint32_t curr = SETUP_1;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        SETUP_1 = curr;
    }

    /**
     * Get SETUP_1's MIN field.
     */
    inline uint8_t get_SETUP_1_MIN()
    {
        return (SETUP_1 >> 8u) & 0b111111u;
    }

    /**
     * Set SETUP_1's MIN field.
     */
    inline void set_SETUP_1_MIN(uint8_t value)
    {
        uint32_t curr = SETUP_1;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        SETUP_1 = curr;
    }

    /**
     * Get SETUP_1's HOUR field.
     */
    inline uint8_t get_SETUP_1_HOUR()
    {
        return (SETUP_1 >> 16u) & 0b11111u;
    }

    /**
     * Set SETUP_1's HOUR field.
     */
    inline void set_SETUP_1_HOUR(uint8_t value)
    {
        uint32_t curr = SETUP_1;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        SETUP_1 = curr;
    }

    /**
     * Get SETUP_1's DOTW field.
     */
    inline uint8_t get_SETUP_1_DOTW()
    {
        return (SETUP_1 >> 24u) & 0b111u;
    }

    /**
     * Set SETUP_1's DOTW field.
     */
    inline void set_SETUP_1_DOTW(uint8_t value)
    {
        uint32_t curr = SETUP_1;

        curr &= ~(0b111u << 24u);
        curr |= (value & 0b111u) << 24u;

        SETUP_1 = curr;
    }

    /**
     * Get all of SETUP_1's bit fields.
     */
    inline void get_SETUP_1(uint8_t &SEC, uint8_t &MIN, uint8_t &HOUR,
                            uint8_t &DOTW)
    {
        uint32_t curr = SETUP_1;

        SEC = (curr >> 0u) & 0b111111u;
        MIN = (curr >> 8u) & 0b111111u;
        HOUR = (curr >> 16u) & 0b11111u;
        DOTW = (curr >> 24u) & 0b111u;
    }

    /**
     * Set all of SETUP_1's bit fields.
     */
    inline void set_SETUP_1(uint8_t SEC, uint8_t MIN, uint8_t HOUR,
                            uint8_t DOTW)
    {
        uint32_t curr = SETUP_1;

        curr &= ~(0b111111u << 0u);
        curr |= (SEC & 0b111111u) << 0u;
        curr &= ~(0b111111u << 8u);
        curr |= (MIN & 0b111111u) << 8u;
        curr &= ~(0b11111u << 16u);
        curr |= (HOUR & 0b11111u) << 16u;
        curr &= ~(0b111u << 24u);
        curr |= (DOTW & 0b111u) << 24u;

        SETUP_1 = curr;
    }

    /**
     * Get CTRL's RTC_ENABLE bit.
     */
    inline bool get_CTRL_RTC_ENABLE()
    {
        return CTRL & (1u << 0u);
    }

    /**
     * Set CTRL's RTC_ENABLE bit.
     */
    inline void set_CTRL_RTC_ENABLE()
    {
        CTRL |= 1u << 0u;
    }

    /**
     * Clear CTRL's RTC_ENABLE bit.
     */
    inline void clear_CTRL_RTC_ENABLE()
    {
        CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle CTRL's RTC_ENABLE bit.
     */
    inline void toggle_CTRL_RTC_ENABLE()
    {
        CTRL ^= 1u << 0u;
    }

    /**
     * Get CTRL's RTC_ACTIVE bit.
     */
    inline bool get_CTRL_RTC_ACTIVE()
    {
        return CTRL & (1u << 1u);
    }

    /**
     * Get CTRL's LOAD bit.
     */
    inline bool get_CTRL_LOAD()
    {
        return CTRL & (1u << 4u);
    }

    /**
     * Set CTRL's LOAD bit.
     */
    inline void set_CTRL_LOAD()
    {
        CTRL |= 1u << 4u;
    }

    /**
     * Clear CTRL's LOAD bit.
     */
    inline void clear_CTRL_LOAD()
    {
        CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle CTRL's LOAD bit.
     */
    inline void toggle_CTRL_LOAD()
    {
        CTRL ^= 1u << 4u;
    }

    /**
     * Get CTRL's FORCE_NOTLEAPYEAR bit.
     */
    inline bool get_CTRL_FORCE_NOTLEAPYEAR()
    {
        return CTRL & (1u << 8u);
    }

    /**
     * Set CTRL's FORCE_NOTLEAPYEAR bit.
     */
    inline void set_CTRL_FORCE_NOTLEAPYEAR()
    {
        CTRL |= 1u << 8u;
    }

    /**
     * Clear CTRL's FORCE_NOTLEAPYEAR bit.
     */
    inline void clear_CTRL_FORCE_NOTLEAPYEAR()
    {
        CTRL &= ~(1u << 8u);
    }

    /**
     * Toggle CTRL's FORCE_NOTLEAPYEAR bit.
     */
    inline void toggle_CTRL_FORCE_NOTLEAPYEAR()
    {
        CTRL ^= 1u << 8u;
    }

    /**
     * Get all of CTRL's bit fields.
     */
    inline void get_CTRL(bool &RTC_ENABLE, bool &RTC_ACTIVE, bool &LOAD,
                         bool &FORCE_NOTLEAPYEAR)
    {
        uint32_t curr = CTRL;

        RTC_ENABLE = curr & (1u << 0u);
        RTC_ACTIVE = curr & (1u << 1u);
        LOAD = curr & (1u << 4u);
        FORCE_NOTLEAPYEAR = curr & (1u << 8u);
    }

    /**
     * Set all of CTRL's bit fields.
     */
    inline void set_CTRL(bool RTC_ENABLE, bool LOAD, bool FORCE_NOTLEAPYEAR)
    {
        uint32_t curr = CTRL;

        curr &= ~(0b1u << 0u);
        curr |= (RTC_ENABLE & 0b1u) << 0u;
        curr &= ~(0b1u << 4u);
        curr |= (LOAD & 0b1u) << 4u;
        curr &= ~(0b1u << 8u);
        curr |= (FORCE_NOTLEAPYEAR & 0b1u) << 8u;

        CTRL = curr;
    }

    /**
     * Get IRQ_SETUP_0's DAY field.
     */
    inline uint8_t get_IRQ_SETUP_0_DAY()
    {
        return (IRQ_SETUP_0 >> 0u) & 0b11111u;
    }

    /**
     * Set IRQ_SETUP_0's DAY field.
     */
    inline void set_IRQ_SETUP_0_DAY(uint8_t value)
    {
        uint32_t curr = IRQ_SETUP_0;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        IRQ_SETUP_0 = curr;
    }

    /**
     * Get IRQ_SETUP_0's MONTH field.
     */
    inline uint8_t get_IRQ_SETUP_0_MONTH()
    {
        return (IRQ_SETUP_0 >> 8u) & 0b1111u;
    }

    /**
     * Set IRQ_SETUP_0's MONTH field.
     */
    inline void set_IRQ_SETUP_0_MONTH(uint8_t value)
    {
        uint32_t curr = IRQ_SETUP_0;

        curr &= ~(0b1111u << 8u);
        curr |= (value & 0b1111u) << 8u;

        IRQ_SETUP_0 = curr;
    }

    /**
     * Get IRQ_SETUP_0's YEAR field.
     */
    inline uint16_t get_IRQ_SETUP_0_YEAR()
    {
        return (IRQ_SETUP_0 >> 12u) & 0b111111111111u;
    }

    /**
     * Set IRQ_SETUP_0's YEAR field.
     */
    inline void set_IRQ_SETUP_0_YEAR(uint16_t value)
    {
        uint32_t curr = IRQ_SETUP_0;

        curr &= ~(0b111111111111u << 12u);
        curr |= (value & 0b111111111111u) << 12u;

        IRQ_SETUP_0 = curr;
    }

    /**
     * Get IRQ_SETUP_0's DAY_ENA bit.
     */
    inline bool get_IRQ_SETUP_0_DAY_ENA()
    {
        return IRQ_SETUP_0 & (1u << 24u);
    }

    /**
     * Set IRQ_SETUP_0's DAY_ENA bit.
     */
    inline void set_IRQ_SETUP_0_DAY_ENA()
    {
        IRQ_SETUP_0 |= 1u << 24u;
    }

    /**
     * Clear IRQ_SETUP_0's DAY_ENA bit.
     */
    inline void clear_IRQ_SETUP_0_DAY_ENA()
    {
        IRQ_SETUP_0 &= ~(1u << 24u);
    }

    /**
     * Toggle IRQ_SETUP_0's DAY_ENA bit.
     */
    inline void toggle_IRQ_SETUP_0_DAY_ENA()
    {
        IRQ_SETUP_0 ^= 1u << 24u;
    }

    /**
     * Get IRQ_SETUP_0's MONTH_ENA bit.
     */
    inline bool get_IRQ_SETUP_0_MONTH_ENA()
    {
        return IRQ_SETUP_0 & (1u << 25u);
    }

    /**
     * Set IRQ_SETUP_0's MONTH_ENA bit.
     */
    inline void set_IRQ_SETUP_0_MONTH_ENA()
    {
        IRQ_SETUP_0 |= 1u << 25u;
    }

    /**
     * Clear IRQ_SETUP_0's MONTH_ENA bit.
     */
    inline void clear_IRQ_SETUP_0_MONTH_ENA()
    {
        IRQ_SETUP_0 &= ~(1u << 25u);
    }

    /**
     * Toggle IRQ_SETUP_0's MONTH_ENA bit.
     */
    inline void toggle_IRQ_SETUP_0_MONTH_ENA()
    {
        IRQ_SETUP_0 ^= 1u << 25u;
    }

    /**
     * Get IRQ_SETUP_0's YEAR_ENA bit.
     */
    inline bool get_IRQ_SETUP_0_YEAR_ENA()
    {
        return IRQ_SETUP_0 & (1u << 26u);
    }

    /**
     * Set IRQ_SETUP_0's YEAR_ENA bit.
     */
    inline void set_IRQ_SETUP_0_YEAR_ENA()
    {
        IRQ_SETUP_0 |= 1u << 26u;
    }

    /**
     * Clear IRQ_SETUP_0's YEAR_ENA bit.
     */
    inline void clear_IRQ_SETUP_0_YEAR_ENA()
    {
        IRQ_SETUP_0 &= ~(1u << 26u);
    }

    /**
     * Toggle IRQ_SETUP_0's YEAR_ENA bit.
     */
    inline void toggle_IRQ_SETUP_0_YEAR_ENA()
    {
        IRQ_SETUP_0 ^= 1u << 26u;
    }

    /**
     * Get IRQ_SETUP_0's MATCH_ENA bit.
     */
    inline bool get_IRQ_SETUP_0_MATCH_ENA()
    {
        return IRQ_SETUP_0 & (1u << 28u);
    }

    /**
     * Set IRQ_SETUP_0's MATCH_ENA bit.
     */
    inline void set_IRQ_SETUP_0_MATCH_ENA()
    {
        IRQ_SETUP_0 |= 1u << 28u;
    }

    /**
     * Clear IRQ_SETUP_0's MATCH_ENA bit.
     */
    inline void clear_IRQ_SETUP_0_MATCH_ENA()
    {
        IRQ_SETUP_0 &= ~(1u << 28u);
    }

    /**
     * Toggle IRQ_SETUP_0's MATCH_ENA bit.
     */
    inline void toggle_IRQ_SETUP_0_MATCH_ENA()
    {
        IRQ_SETUP_0 ^= 1u << 28u;
    }

    /**
     * Get IRQ_SETUP_0's MATCH_ACTIVE bit.
     */
    inline bool get_IRQ_SETUP_0_MATCH_ACTIVE()
    {
        return IRQ_SETUP_0 & (1u << 29u);
    }

    /**
     * Get all of IRQ_SETUP_0's bit fields.
     */
    inline void get_IRQ_SETUP_0(uint8_t &DAY, uint8_t &MONTH, uint16_t &YEAR,
                                bool &DAY_ENA, bool &MONTH_ENA, bool &YEAR_ENA,
                                bool &MATCH_ENA, bool &MATCH_ACTIVE)
    {
        uint32_t curr = IRQ_SETUP_0;

        DAY = (curr >> 0u) & 0b11111u;
        MONTH = (curr >> 8u) & 0b1111u;
        YEAR = (curr >> 12u) & 0b111111111111u;
        DAY_ENA = curr & (1u << 24u);
        MONTH_ENA = curr & (1u << 25u);
        YEAR_ENA = curr & (1u << 26u);
        MATCH_ENA = curr & (1u << 28u);
        MATCH_ACTIVE = curr & (1u << 29u);
    }

    /**
     * Set all of IRQ_SETUP_0's bit fields.
     */
    inline void set_IRQ_SETUP_0(uint8_t DAY, uint8_t MONTH, uint16_t YEAR,
                                bool DAY_ENA, bool MONTH_ENA, bool YEAR_ENA,
                                bool MATCH_ENA)
    {
        uint32_t curr = IRQ_SETUP_0;

        curr &= ~(0b11111u << 0u);
        curr |= (DAY & 0b11111u) << 0u;
        curr &= ~(0b1111u << 8u);
        curr |= (MONTH & 0b1111u) << 8u;
        curr &= ~(0b111111111111u << 12u);
        curr |= (YEAR & 0b111111111111u) << 12u;
        curr &= ~(0b1u << 24u);
        curr |= (DAY_ENA & 0b1u) << 24u;
        curr &= ~(0b1u << 25u);
        curr |= (MONTH_ENA & 0b1u) << 25u;
        curr &= ~(0b1u << 26u);
        curr |= (YEAR_ENA & 0b1u) << 26u;
        curr &= ~(0b1u << 28u);
        curr |= (MATCH_ENA & 0b1u) << 28u;

        IRQ_SETUP_0 = curr;
    }

    /**
     * Get IRQ_SETUP_1's SEC field.
     */
    inline uint8_t get_IRQ_SETUP_1_SEC()
    {
        return (IRQ_SETUP_1 >> 0u) & 0b111111u;
    }

    /**
     * Set IRQ_SETUP_1's SEC field.
     */
    inline void set_IRQ_SETUP_1_SEC(uint8_t value)
    {
        uint32_t curr = IRQ_SETUP_1;

        curr &= ~(0b111111u << 0u);
        curr |= (value & 0b111111u) << 0u;

        IRQ_SETUP_1 = curr;
    }

    /**
     * Get IRQ_SETUP_1's MIN field.
     */
    inline uint8_t get_IRQ_SETUP_1_MIN()
    {
        return (IRQ_SETUP_1 >> 8u) & 0b111111u;
    }

    /**
     * Set IRQ_SETUP_1's MIN field.
     */
    inline void set_IRQ_SETUP_1_MIN(uint8_t value)
    {
        uint32_t curr = IRQ_SETUP_1;

        curr &= ~(0b111111u << 8u);
        curr |= (value & 0b111111u) << 8u;

        IRQ_SETUP_1 = curr;
    }

    /**
     * Get IRQ_SETUP_1's HOUR field.
     */
    inline uint8_t get_IRQ_SETUP_1_HOUR()
    {
        return (IRQ_SETUP_1 >> 16u) & 0b11111u;
    }

    /**
     * Set IRQ_SETUP_1's HOUR field.
     */
    inline void set_IRQ_SETUP_1_HOUR(uint8_t value)
    {
        uint32_t curr = IRQ_SETUP_1;

        curr &= ~(0b11111u << 16u);
        curr |= (value & 0b11111u) << 16u;

        IRQ_SETUP_1 = curr;
    }

    /**
     * Get IRQ_SETUP_1's DOTW field.
     */
    inline uint8_t get_IRQ_SETUP_1_DOTW()
    {
        return (IRQ_SETUP_1 >> 24u) & 0b111u;
    }

    /**
     * Set IRQ_SETUP_1's DOTW field.
     */
    inline void set_IRQ_SETUP_1_DOTW(uint8_t value)
    {
        uint32_t curr = IRQ_SETUP_1;

        curr &= ~(0b111u << 24u);
        curr |= (value & 0b111u) << 24u;

        IRQ_SETUP_1 = curr;
    }

    /**
     * Get IRQ_SETUP_1's SEC_ENA bit.
     */
    inline bool get_IRQ_SETUP_1_SEC_ENA()
    {
        return IRQ_SETUP_1 & (1u << 28u);
    }

    /**
     * Set IRQ_SETUP_1's SEC_ENA bit.
     */
    inline void set_IRQ_SETUP_1_SEC_ENA()
    {
        IRQ_SETUP_1 |= 1u << 28u;
    }

    /**
     * Clear IRQ_SETUP_1's SEC_ENA bit.
     */
    inline void clear_IRQ_SETUP_1_SEC_ENA()
    {
        IRQ_SETUP_1 &= ~(1u << 28u);
    }

    /**
     * Toggle IRQ_SETUP_1's SEC_ENA bit.
     */
    inline void toggle_IRQ_SETUP_1_SEC_ENA()
    {
        IRQ_SETUP_1 ^= 1u << 28u;
    }

    /**
     * Get IRQ_SETUP_1's MIN_ENA bit.
     */
    inline bool get_IRQ_SETUP_1_MIN_ENA()
    {
        return IRQ_SETUP_1 & (1u << 29u);
    }

    /**
     * Set IRQ_SETUP_1's MIN_ENA bit.
     */
    inline void set_IRQ_SETUP_1_MIN_ENA()
    {
        IRQ_SETUP_1 |= 1u << 29u;
    }

    /**
     * Clear IRQ_SETUP_1's MIN_ENA bit.
     */
    inline void clear_IRQ_SETUP_1_MIN_ENA()
    {
        IRQ_SETUP_1 &= ~(1u << 29u);
    }

    /**
     * Toggle IRQ_SETUP_1's MIN_ENA bit.
     */
    inline void toggle_IRQ_SETUP_1_MIN_ENA()
    {
        IRQ_SETUP_1 ^= 1u << 29u;
    }

    /**
     * Get IRQ_SETUP_1's HOUR_ENA bit.
     */
    inline bool get_IRQ_SETUP_1_HOUR_ENA()
    {
        return IRQ_SETUP_1 & (1u << 30u);
    }

    /**
     * Set IRQ_SETUP_1's HOUR_ENA bit.
     */
    inline void set_IRQ_SETUP_1_HOUR_ENA()
    {
        IRQ_SETUP_1 |= 1u << 30u;
    }

    /**
     * Clear IRQ_SETUP_1's HOUR_ENA bit.
     */
    inline void clear_IRQ_SETUP_1_HOUR_ENA()
    {
        IRQ_SETUP_1 &= ~(1u << 30u);
    }

    /**
     * Toggle IRQ_SETUP_1's HOUR_ENA bit.
     */
    inline void toggle_IRQ_SETUP_1_HOUR_ENA()
    {
        IRQ_SETUP_1 ^= 1u << 30u;
    }

    /**
     * Get IRQ_SETUP_1's DOTW_ENA bit.
     */
    inline bool get_IRQ_SETUP_1_DOTW_ENA()
    {
        return IRQ_SETUP_1 & (1u << 31u);
    }

    /**
     * Set IRQ_SETUP_1's DOTW_ENA bit.
     */
    inline void set_IRQ_SETUP_1_DOTW_ENA()
    {
        IRQ_SETUP_1 |= 1u << 31u;
    }

    /**
     * Clear IRQ_SETUP_1's DOTW_ENA bit.
     */
    inline void clear_IRQ_SETUP_1_DOTW_ENA()
    {
        IRQ_SETUP_1 &= ~(1u << 31u);
    }

    /**
     * Toggle IRQ_SETUP_1's DOTW_ENA bit.
     */
    inline void toggle_IRQ_SETUP_1_DOTW_ENA()
    {
        IRQ_SETUP_1 ^= 1u << 31u;
    }

    /**
     * Get all of IRQ_SETUP_1's bit fields.
     */
    inline void get_IRQ_SETUP_1(uint8_t &SEC, uint8_t &MIN, uint8_t &HOUR,
                                uint8_t &DOTW, bool &SEC_ENA, bool &MIN_ENA,
                                bool &HOUR_ENA, bool &DOTW_ENA)
    {
        uint32_t curr = IRQ_SETUP_1;

        SEC = (curr >> 0u) & 0b111111u;
        MIN = (curr >> 8u) & 0b111111u;
        HOUR = (curr >> 16u) & 0b11111u;
        DOTW = (curr >> 24u) & 0b111u;
        SEC_ENA = curr & (1u << 28u);
        MIN_ENA = curr & (1u << 29u);
        HOUR_ENA = curr & (1u << 30u);
        DOTW_ENA = curr & (1u << 31u);
    }

    /**
     * Set all of IRQ_SETUP_1's bit fields.
     */
    inline void set_IRQ_SETUP_1(uint8_t SEC, uint8_t MIN, uint8_t HOUR,
                                uint8_t DOTW, bool SEC_ENA, bool MIN_ENA,
                                bool HOUR_ENA, bool DOTW_ENA)
    {
        uint32_t curr = IRQ_SETUP_1;

        curr &= ~(0b111111u << 0u);
        curr |= (SEC & 0b111111u) << 0u;
        curr &= ~(0b111111u << 8u);
        curr |= (MIN & 0b111111u) << 8u;
        curr &= ~(0b11111u << 16u);
        curr |= (HOUR & 0b11111u) << 16u;
        curr &= ~(0b111u << 24u);
        curr |= (DOTW & 0b111u) << 24u;
        curr &= ~(0b1u << 28u);
        curr |= (SEC_ENA & 0b1u) << 28u;
        curr &= ~(0b1u << 29u);
        curr |= (MIN_ENA & 0b1u) << 29u;
        curr &= ~(0b1u << 30u);
        curr |= (HOUR_ENA & 0b1u) << 30u;
        curr &= ~(0b1u << 31u);
        curr |= (DOTW_ENA & 0b1u) << 31u;

        IRQ_SETUP_1 = curr;
    }

    /**
     * Get RTC_1's DAY field.
     */
    inline uint8_t get_RTC_1_DAY()
    {
        return (RTC_1 >> 0u) & 0b11111u;
    }

    /**
     * Get RTC_1's MONTH field.
     */
    inline uint8_t get_RTC_1_MONTH()
    {
        return (RTC_1 >> 8u) & 0b1111u;
    }

    /**
     * Get RTC_1's YEAR field.
     */
    inline uint16_t get_RTC_1_YEAR()
    {
        return (RTC_1 >> 12u) & 0b111111111111u;
    }

    /**
     * Get all of RTC_1's bit fields.
     */
    inline void get_RTC_1(uint8_t &DAY, uint8_t &MONTH, uint16_t &YEAR)
    {
        uint32_t curr = RTC_1;

        DAY = (curr >> 0u) & 0b11111u;
        MONTH = (curr >> 8u) & 0b1111u;
        YEAR = (curr >> 12u) & 0b111111111111u;
    }

    /**
     * Get RTC_0's SEC field.
     */
    inline uint8_t get_RTC_0_SEC()
    {
        return (RTC_0 >> 0u) & 0b111111u;
    }

    /**
     * Get RTC_0's MIN field.
     */
    inline uint8_t get_RTC_0_MIN()
    {
        return (RTC_0 >> 8u) & 0b111111u;
    }

    /**
     * Get RTC_0's HOUR field.
     */
    inline uint8_t get_RTC_0_HOUR()
    {
        return (RTC_0 >> 16u) & 0b11111u;
    }

    /**
     * Get RTC_0's DOTW field.
     */
    inline uint8_t get_RTC_0_DOTW()
    {
        return (RTC_0 >> 24u) & 0b111u;
    }

    /**
     * Get all of RTC_0's bit fields.
     */
    inline void get_RTC_0(uint8_t &SEC, uint8_t &MIN, uint8_t &HOUR,
                          uint8_t &DOTW)
    {
        uint32_t curr = RTC_0;

        SEC = (curr >> 0u) & 0b111111u;
        MIN = (curr >> 8u) & 0b111111u;
        HOUR = (curr >> 16u) & 0b11111u;
        DOTW = (curr >> 24u) & 0b111u;
    }

    /**
     * Get INTR's RTC bit.
     */
    inline bool get_INTR_RTC()
    {
        return INTR & (1u << 0u);
    }

    /**
     * Get INTE's RTC bit.
     */
    inline bool get_INTE_RTC()
    {
        return INTE & (1u << 0u);
    }

    /**
     * Set INTE's RTC bit.
     */
    inline void set_INTE_RTC()
    {
        INTE |= 1u << 0u;
    }

    /**
     * Clear INTE's RTC bit.
     */
    inline void clear_INTE_RTC()
    {
        INTE &= ~(1u << 0u);
    }

    /**
     * Toggle INTE's RTC bit.
     */
    inline void toggle_INTE_RTC()
    {
        INTE ^= 1u << 0u;
    }

    /**
     * Get INTF's RTC bit.
     */
    inline bool get_INTF_RTC()
    {
        return INTF & (1u << 0u);
    }

    /**
     * Set INTF's RTC bit.
     */
    inline void set_INTF_RTC()
    {
        INTF |= 1u << 0u;
    }

    /**
     * Clear INTF's RTC bit.
     */
    inline void clear_INTF_RTC()
    {
        INTF &= ~(1u << 0u);
    }

    /**
     * Toggle INTF's RTC bit.
     */
    inline void toggle_INTF_RTC()
    {
        INTF ^= 1u << 0u;
    }

    /**
     * Get INTS's RTC bit.
     */
    inline bool get_INTS_RTC()
    {
        return INTS & (1u << 0u);
    }
};

static_assert(sizeof(rtc) == rtc::size);

static volatile rtc *const RTC = reinterpret_cast<rtc *>(0x4005c000);

}; // namespace RP2040
