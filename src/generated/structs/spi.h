/**
 * \file
 * \brief Generated by ifgen (3.0.0).
 */
#pragma once

#include "../ifgen/common.h"

namespace RP2040
{

struct [[gnu::packed]] spi
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;         /*!< spi's identifier. */
    static constexpr std::size_t size = 4096; /*!< spi's size in bytes. */

    /* Fields. */
    uint32_t
        SSPCR0; /*!< (read-write) Control register 0, SSPCR0 on page 3-4 */
    uint32_t
        SSPCR1;     /*!< (read-write) Control register 1, SSPCR1 on page 3-5 */
    uint32_t SSPDR; /*!< (read-write) Data register, SSPDR on page 3-6 */
    const uint32_t SSPSR =
        {};           /*!< (read-only) Status register, SSPSR on page 3-7 */
    uint32_t SSPCPSR; /*!< (read-write) Clock prescale register, SSPCPSR on
                         page 3-8 */
    uint32_t SSPIMSC; /*!< (read-write) Interrupt mask set or clear register,
                         SSPIMSC on page 3-9 */
    const uint32_t SSPRIS = {}; /*!< (read-only) Raw interrupt status register,
                                   SSPRIS on page 3-10 */
    const uint32_t SSPMIS = {}; /*!< (read-only) Masked interrupt status
                                   register, SSPMIS on page 3-11 */
    uint32_t SSPICR; /*!< (read-write) Interrupt clear register, SSPICR on page
                        3-11 */
    uint32_t SSPDMACR; /*!< (read-write) DMA control register, SSPDMACR on page
                          3-12 */
    static constexpr std::size_t reserved_padding0_length = 1006;
    const uint32_t reserved_padding0[reserved_padding0_length] = {};
    const uint32_t SSPPERIPHID0 =
        {}; /*!< (read-only) Peripheral identification registers,
               SSPPeriphID0-3 on page 3-13 */
    const uint32_t SSPPERIPHID1 =
        {}; /*!< (read-only) Peripheral identification registers,
               SSPPeriphID0-3 on page 3-13 */
    const uint32_t SSPPERIPHID2 =
        {}; /*!< (read-only) Peripheral identification registers,
               SSPPeriphID0-3 on page 3-13 */
    const uint32_t SSPPERIPHID3 =
        {}; /*!< (read-only) Peripheral identification registers,
               SSPPeriphID0-3 on page 3-13 */
    const uint32_t SSPPCELLID0 =
        {}; /*!< (read-only) PrimeCell identification registers, SSPPCellID0-3
               on page 3-16 */
    const uint32_t SSPPCELLID1 =
        {}; /*!< (read-only) PrimeCell identification registers, SSPPCellID0-3
               on page 3-16 */
    const uint32_t SSPPCELLID2 =
        {}; /*!< (read-only) PrimeCell identification registers, SSPPCellID0-3
               on page 3-16 */
    const uint32_t SSPPCELLID3 =
        {}; /*!< (read-only) PrimeCell identification registers, SSPPCellID0-3
               on page 3-16 */

    /* Methods. */

    /**
     * Get SSPCR0's DSS field.
     */
    uint8_t get_SSPCR0_DSS()
    {
        return (SSPCR0 >> 0u) & 0b1111u;
    }

    /**
     * Set SSPCR0's DSS field.
     */
    inline void set_SSPCR0_DSS(uint8_t value)
    {
        uint32_t curr = SSPCR0;

        curr &= ~(0b1111u << 0u);
        curr |= (value & 0b1111u) << 0u;

        SSPCR0 = curr;
    }

    /**
     * Get SSPCR0's FRF field.
     */
    uint8_t get_SSPCR0_FRF()
    {
        return (SSPCR0 >> 4u) & 0b11u;
    }

    /**
     * Set SSPCR0's FRF field.
     */
    inline void set_SSPCR0_FRF(uint8_t value)
    {
        uint32_t curr = SSPCR0;

        curr &= ~(0b11u << 4u);
        curr |= (value & 0b11u) << 4u;

        SSPCR0 = curr;
    }

    /**
     * Get SSPCR0's SPO bit.
     */
    bool get_SSPCR0_SPO()
    {
        return SSPCR0 & (1u << 6u);
    }

    /**
     * Set SSPCR0's SPO bit.
     */
    inline void set_SSPCR0_SPO()
    {
        SSPCR0 |= 1u << 6u;
    }

    /**
     * Clear SSPCR0's SPO bit.
     */
    inline void clear_SSPCR0_SPO()
    {
        SSPCR0 &= ~(1u << 6u);
    }

    /**
     * Toggle SSPCR0's SPO bit.
     */
    inline void toggle_SSPCR0_SPO()
    {
        SSPCR0 ^= 1u << 6u;
    }

    /**
     * Get SSPCR0's SPH bit.
     */
    bool get_SSPCR0_SPH()
    {
        return SSPCR0 & (1u << 7u);
    }

    /**
     * Set SSPCR0's SPH bit.
     */
    inline void set_SSPCR0_SPH()
    {
        SSPCR0 |= 1u << 7u;
    }

    /**
     * Clear SSPCR0's SPH bit.
     */
    inline void clear_SSPCR0_SPH()
    {
        SSPCR0 &= ~(1u << 7u);
    }

    /**
     * Toggle SSPCR0's SPH bit.
     */
    inline void toggle_SSPCR0_SPH()
    {
        SSPCR0 ^= 1u << 7u;
    }

    /**
     * Get SSPCR0's SCR field.
     */
    uint8_t get_SSPCR0_SCR()
    {
        return (SSPCR0 >> 8u) & 0b11111111u;
    }

    /**
     * Set SSPCR0's SCR field.
     */
    inline void set_SSPCR0_SCR(uint8_t value)
    {
        uint32_t curr = SSPCR0;

        curr &= ~(0b11111111u << 8u);
        curr |= (value & 0b11111111u) << 8u;

        SSPCR0 = curr;
    }

    /**
     * Get SSPCR1's LBM bit.
     */
    bool get_SSPCR1_LBM()
    {
        return SSPCR1 & (1u << 0u);
    }

    /**
     * Set SSPCR1's LBM bit.
     */
    inline void set_SSPCR1_LBM()
    {
        SSPCR1 |= 1u << 0u;
    }

    /**
     * Clear SSPCR1's LBM bit.
     */
    inline void clear_SSPCR1_LBM()
    {
        SSPCR1 &= ~(1u << 0u);
    }

    /**
     * Toggle SSPCR1's LBM bit.
     */
    inline void toggle_SSPCR1_LBM()
    {
        SSPCR1 ^= 1u << 0u;
    }

    /**
     * Get SSPCR1's SSE bit.
     */
    bool get_SSPCR1_SSE()
    {
        return SSPCR1 & (1u << 1u);
    }

    /**
     * Set SSPCR1's SSE bit.
     */
    inline void set_SSPCR1_SSE()
    {
        SSPCR1 |= 1u << 1u;
    }

    /**
     * Clear SSPCR1's SSE bit.
     */
    inline void clear_SSPCR1_SSE()
    {
        SSPCR1 &= ~(1u << 1u);
    }

    /**
     * Toggle SSPCR1's SSE bit.
     */
    inline void toggle_SSPCR1_SSE()
    {
        SSPCR1 ^= 1u << 1u;
    }

    /**
     * Get SSPCR1's MS bit.
     */
    bool get_SSPCR1_MS()
    {
        return SSPCR1 & (1u << 2u);
    }

    /**
     * Set SSPCR1's MS bit.
     */
    inline void set_SSPCR1_MS()
    {
        SSPCR1 |= 1u << 2u;
    }

    /**
     * Clear SSPCR1's MS bit.
     */
    inline void clear_SSPCR1_MS()
    {
        SSPCR1 &= ~(1u << 2u);
    }

    /**
     * Toggle SSPCR1's MS bit.
     */
    inline void toggle_SSPCR1_MS()
    {
        SSPCR1 ^= 1u << 2u;
    }

    /**
     * Get SSPCR1's SOD bit.
     */
    bool get_SSPCR1_SOD()
    {
        return SSPCR1 & (1u << 3u);
    }

    /**
     * Set SSPCR1's SOD bit.
     */
    inline void set_SSPCR1_SOD()
    {
        SSPCR1 |= 1u << 3u;
    }

    /**
     * Clear SSPCR1's SOD bit.
     */
    inline void clear_SSPCR1_SOD()
    {
        SSPCR1 &= ~(1u << 3u);
    }

    /**
     * Toggle SSPCR1's SOD bit.
     */
    inline void toggle_SSPCR1_SOD()
    {
        SSPCR1 ^= 1u << 3u;
    }

    /**
     * Get SSPDR's DATA field.
     */
    uint16_t get_SSPDR_DATA()
    {
        return (SSPDR >> 0u) & 0b1111111111111111u;
    }

    /**
     * Set SSPDR's DATA field.
     */
    inline void set_SSPDR_DATA(uint16_t value)
    {
        uint32_t curr = SSPDR;

        curr &= ~(0b1111111111111111u << 0u);
        curr |= (value & 0b1111111111111111u) << 0u;

        SSPDR = curr;
    }

    /**
     * Get SSPSR's TFE bit.
     */
    bool get_SSPSR_TFE()
    {
        return SSPSR & (1u << 0u);
    }

    /**
     * Get SSPSR's TNF bit.
     */
    bool get_SSPSR_TNF()
    {
        return SSPSR & (1u << 1u);
    }

    /**
     * Get SSPSR's RNE bit.
     */
    bool get_SSPSR_RNE()
    {
        return SSPSR & (1u << 2u);
    }

    /**
     * Get SSPSR's RFF bit.
     */
    bool get_SSPSR_RFF()
    {
        return SSPSR & (1u << 3u);
    }

    /**
     * Get SSPSR's BSY bit.
     */
    bool get_SSPSR_BSY()
    {
        return SSPSR & (1u << 4u);
    }

    /**
     * Get SSPCPSR's CPSDVSR field.
     */
    uint8_t get_SSPCPSR_CPSDVSR()
    {
        return (SSPCPSR >> 0u) & 0b11111111u;
    }

    /**
     * Set SSPCPSR's CPSDVSR field.
     */
    inline void set_SSPCPSR_CPSDVSR(uint8_t value)
    {
        uint32_t curr = SSPCPSR;

        curr &= ~(0b11111111u << 0u);
        curr |= (value & 0b11111111u) << 0u;

        SSPCPSR = curr;
    }

    /**
     * Get SSPIMSC's RORIM bit.
     */
    bool get_SSPIMSC_RORIM()
    {
        return SSPIMSC & (1u << 0u);
    }

    /**
     * Set SSPIMSC's RORIM bit.
     */
    inline void set_SSPIMSC_RORIM()
    {
        SSPIMSC |= 1u << 0u;
    }

    /**
     * Clear SSPIMSC's RORIM bit.
     */
    inline void clear_SSPIMSC_RORIM()
    {
        SSPIMSC &= ~(1u << 0u);
    }

    /**
     * Toggle SSPIMSC's RORIM bit.
     */
    inline void toggle_SSPIMSC_RORIM()
    {
        SSPIMSC ^= 1u << 0u;
    }

    /**
     * Get SSPIMSC's RTIM bit.
     */
    bool get_SSPIMSC_RTIM()
    {
        return SSPIMSC & (1u << 1u);
    }

    /**
     * Set SSPIMSC's RTIM bit.
     */
    inline void set_SSPIMSC_RTIM()
    {
        SSPIMSC |= 1u << 1u;
    }

    /**
     * Clear SSPIMSC's RTIM bit.
     */
    inline void clear_SSPIMSC_RTIM()
    {
        SSPIMSC &= ~(1u << 1u);
    }

    /**
     * Toggle SSPIMSC's RTIM bit.
     */
    inline void toggle_SSPIMSC_RTIM()
    {
        SSPIMSC ^= 1u << 1u;
    }

    /**
     * Get SSPIMSC's RXIM bit.
     */
    bool get_SSPIMSC_RXIM()
    {
        return SSPIMSC & (1u << 2u);
    }

    /**
     * Set SSPIMSC's RXIM bit.
     */
    inline void set_SSPIMSC_RXIM()
    {
        SSPIMSC |= 1u << 2u;
    }

    /**
     * Clear SSPIMSC's RXIM bit.
     */
    inline void clear_SSPIMSC_RXIM()
    {
        SSPIMSC &= ~(1u << 2u);
    }

    /**
     * Toggle SSPIMSC's RXIM bit.
     */
    inline void toggle_SSPIMSC_RXIM()
    {
        SSPIMSC ^= 1u << 2u;
    }

    /**
     * Get SSPIMSC's TXIM bit.
     */
    bool get_SSPIMSC_TXIM()
    {
        return SSPIMSC & (1u << 3u);
    }

    /**
     * Set SSPIMSC's TXIM bit.
     */
    inline void set_SSPIMSC_TXIM()
    {
        SSPIMSC |= 1u << 3u;
    }

    /**
     * Clear SSPIMSC's TXIM bit.
     */
    inline void clear_SSPIMSC_TXIM()
    {
        SSPIMSC &= ~(1u << 3u);
    }

    /**
     * Toggle SSPIMSC's TXIM bit.
     */
    inline void toggle_SSPIMSC_TXIM()
    {
        SSPIMSC ^= 1u << 3u;
    }

    /**
     * Get SSPRIS's RORRIS bit.
     */
    bool get_SSPRIS_RORRIS()
    {
        return SSPRIS & (1u << 0u);
    }

    /**
     * Get SSPRIS's RTRIS bit.
     */
    bool get_SSPRIS_RTRIS()
    {
        return SSPRIS & (1u << 1u);
    }

    /**
     * Get SSPRIS's RXRIS bit.
     */
    bool get_SSPRIS_RXRIS()
    {
        return SSPRIS & (1u << 2u);
    }

    /**
     * Get SSPRIS's TXRIS bit.
     */
    bool get_SSPRIS_TXRIS()
    {
        return SSPRIS & (1u << 3u);
    }

    /**
     * Get SSPMIS's RORMIS bit.
     */
    bool get_SSPMIS_RORMIS()
    {
        return SSPMIS & (1u << 0u);
    }

    /**
     * Get SSPMIS's RTMIS bit.
     */
    bool get_SSPMIS_RTMIS()
    {
        return SSPMIS & (1u << 1u);
    }

    /**
     * Get SSPMIS's RXMIS bit.
     */
    bool get_SSPMIS_RXMIS()
    {
        return SSPMIS & (1u << 2u);
    }

    /**
     * Get SSPMIS's TXMIS bit.
     */
    bool get_SSPMIS_TXMIS()
    {
        return SSPMIS & (1u << 3u);
    }

    /**
     * Get SSPICR's RORIC bit.
     */
    bool get_SSPICR_RORIC()
    {
        return SSPICR & (1u << 0u);
    }

    /**
     * Set SSPICR's RORIC bit.
     */
    inline void set_SSPICR_RORIC()
    {
        SSPICR |= 1u << 0u;
    }

    /**
     * Clear SSPICR's RORIC bit.
     */
    inline void clear_SSPICR_RORIC()
    {
        SSPICR &= ~(1u << 0u);
    }

    /**
     * Toggle SSPICR's RORIC bit.
     */
    inline void toggle_SSPICR_RORIC()
    {
        SSPICR ^= 1u << 0u;
    }

    /**
     * Get SSPICR's RTIC bit.
     */
    bool get_SSPICR_RTIC()
    {
        return SSPICR & (1u << 1u);
    }

    /**
     * Set SSPICR's RTIC bit.
     */
    inline void set_SSPICR_RTIC()
    {
        SSPICR |= 1u << 1u;
    }

    /**
     * Clear SSPICR's RTIC bit.
     */
    inline void clear_SSPICR_RTIC()
    {
        SSPICR &= ~(1u << 1u);
    }

    /**
     * Toggle SSPICR's RTIC bit.
     */
    inline void toggle_SSPICR_RTIC()
    {
        SSPICR ^= 1u << 1u;
    }

    /**
     * Get SSPDMACR's RXDMAE bit.
     */
    bool get_SSPDMACR_RXDMAE()
    {
        return SSPDMACR & (1u << 0u);
    }

    /**
     * Set SSPDMACR's RXDMAE bit.
     */
    inline void set_SSPDMACR_RXDMAE()
    {
        SSPDMACR |= 1u << 0u;
    }

    /**
     * Clear SSPDMACR's RXDMAE bit.
     */
    inline void clear_SSPDMACR_RXDMAE()
    {
        SSPDMACR &= ~(1u << 0u);
    }

    /**
     * Toggle SSPDMACR's RXDMAE bit.
     */
    inline void toggle_SSPDMACR_RXDMAE()
    {
        SSPDMACR ^= 1u << 0u;
    }

    /**
     * Get SSPDMACR's TXDMAE bit.
     */
    bool get_SSPDMACR_TXDMAE()
    {
        return SSPDMACR & (1u << 1u);
    }

    /**
     * Set SSPDMACR's TXDMAE bit.
     */
    inline void set_SSPDMACR_TXDMAE()
    {
        SSPDMACR |= 1u << 1u;
    }

    /**
     * Clear SSPDMACR's TXDMAE bit.
     */
    inline void clear_SSPDMACR_TXDMAE()
    {
        SSPDMACR &= ~(1u << 1u);
    }

    /**
     * Toggle SSPDMACR's TXDMAE bit.
     */
    inline void toggle_SSPDMACR_TXDMAE()
    {
        SSPDMACR ^= 1u << 1u;
    }

    /**
     * Get SSPPERIPHID0's PARTNUMBER0 field.
     */
    uint8_t get_SSPPERIPHID0_PARTNUMBER0()
    {
        return (SSPPERIPHID0 >> 0u) & 0b11111111u;
    }

    /**
     * Get SSPPERIPHID1's PARTNUMBER1 field.
     */
    uint8_t get_SSPPERIPHID1_PARTNUMBER1()
    {
        return (SSPPERIPHID1 >> 0u) & 0b1111u;
    }

    /**
     * Get SSPPERIPHID1's DESIGNER0 field.
     */
    uint8_t get_SSPPERIPHID1_DESIGNER0()
    {
        return (SSPPERIPHID1 >> 4u) & 0b1111u;
    }

    /**
     * Get SSPPERIPHID2's DESIGNER1 field.
     */
    uint8_t get_SSPPERIPHID2_DESIGNER1()
    {
        return (SSPPERIPHID2 >> 0u) & 0b1111u;
    }

    /**
     * Get SSPPERIPHID2's REVISION field.
     */
    uint8_t get_SSPPERIPHID2_REVISION()
    {
        return (SSPPERIPHID2 >> 4u) & 0b1111u;
    }

    /**
     * Get SSPPERIPHID3's CONFIGURATION field.
     */
    uint8_t get_SSPPERIPHID3_CONFIGURATION()
    {
        return (SSPPERIPHID3 >> 0u) & 0b11111111u;
    }

    /**
     * Get SSPPCELLID0's SSPPCELLID0 field.
     */
    uint8_t get_SSPPCELLID0_SSPPCELLID0()
    {
        return (SSPPCELLID0 >> 0u) & 0b11111111u;
    }

    /**
     * Get SSPPCELLID1's SSPPCELLID1 field.
     */
    uint8_t get_SSPPCELLID1_SSPPCELLID1()
    {
        return (SSPPCELLID1 >> 0u) & 0b11111111u;
    }

    /**
     * Get SSPPCELLID2's SSPPCELLID2 field.
     */
    uint8_t get_SSPPCELLID2_SSPPCELLID2()
    {
        return (SSPPCELLID2 >> 0u) & 0b11111111u;
    }

    /**
     * Get SSPPCELLID3's SSPPCELLID3 field.
     */
    uint8_t get_SSPPCELLID3_SSPPCELLID3()
    {
        return (SSPPCELLID3 >> 0u) & 0b11111111u;
    }
};

static_assert(sizeof(spi) == spi::size);

static volatile spi *const SPI0 = reinterpret_cast<spi *>(0x4003c000);

static volatile spi *const SPI1 = reinterpret_cast<spi *>(0x40040000);

}; // namespace RP2040
