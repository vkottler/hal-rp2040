/**
 * \file
 * \brief Generated by ifgen (2.6.3).
 */
#pragma once

#include "../ifgen/common.h"

namespace RP2040
{

/**
 * USB FS/LS controller device registers
 */
struct [[gnu::packed]] usbctrl_regs
{
    /* Constant attributes. */
    static constexpr uint16_t id = 1;        /*!< usbctrl_regs's identifier. */
    static constexpr std::size_t size = 156; /*!< usbctrl_regs's size in bytes. */

    /* Fields. */
    uint32_t ADDR_ENDP;                         /*!< (read-write) Device address and endpoint control */
    uint32_t ADDR_ENDP1;                        /*!< (read-write) Interrupt endpoint 1. Only valid for HOST mode. */
    uint32_t ADDR_ENDP2;                        /*!< (read-write) Interrupt endpoint 2. Only valid for HOST mode. */
    uint32_t ADDR_ENDP3;                        /*!< (read-write) Interrupt endpoint 3. Only valid for HOST mode. */
    uint32_t ADDR_ENDP4;                        /*!< (read-write) Interrupt endpoint 4. Only valid for HOST mode. */
    uint32_t ADDR_ENDP5;                        /*!< (read-write) Interrupt endpoint 5. Only valid for HOST mode. */
    uint32_t ADDR_ENDP6;                        /*!< (read-write) Interrupt endpoint 6. Only valid for HOST mode. */
    uint32_t ADDR_ENDP7;                        /*!< (read-write) Interrupt endpoint 7. Only valid for HOST mode. */
    uint32_t ADDR_ENDP8;                        /*!< (read-write) Interrupt endpoint 8. Only valid for HOST mode. */
    uint32_t ADDR_ENDP9;                        /*!< (read-write) Interrupt endpoint 9. Only valid for HOST mode. */
    uint32_t ADDR_ENDP10;                       /*!< (read-write) Interrupt endpoint 10. Only valid for HOST mode. */
    uint32_t ADDR_ENDP11;                       /*!< (read-write) Interrupt endpoint 11. Only valid for HOST mode. */
    uint32_t ADDR_ENDP12;                       /*!< (read-write) Interrupt endpoint 12. Only valid for HOST mode. */
    uint32_t ADDR_ENDP13;                       /*!< (read-write) Interrupt endpoint 13. Only valid for HOST mode. */
    uint32_t ADDR_ENDP14;                       /*!< (read-write) Interrupt endpoint 14. Only valid for HOST mode. */
    uint32_t ADDR_ENDP15;                       /*!< (read-write) Interrupt endpoint 15. Only valid for HOST mode. */
    uint32_t MAIN_CTRL;                         /*!< (read-write) Main control register */
    uint32_t SOF_WR;                            /*!< (write-only) Set the SOF (Start of Frame) frame number in the host controller. The SOF packet is sent every 1ms and the host will increment the frame number by 1 each time. */
    const uint32_t SOF_RD = {};                 /*!< (read-only) Read the last SOF (Start of Frame) frame number seen. In device mode the last SOF received from the host. In host mode the last SOF sent by the host. */
    uint32_t SIE_CTRL;                          /*!< (read-write) SIE control register */
    uint32_t SIE_STATUS;                        /*!< (read-write) SIE status register */
    uint32_t INT_EP_CTRL;                       /*!< (read-write) interrupt endpoint control register */
    uint32_t BUFF_STATUS;                       /*!< (read-write) Buffer status register. A bit set here indicates that a buffer has completed on the endpoint (if the buffer interrupt is enabled). It is possible for 2 buffers to be completed, so clearing the buffer status bit may instantly re set it on the next clock cycle. */
    const uint32_t BUFF_CPU_SHOULD_HANDLE = {}; /*!< (read-only) Which of the double buffers should be handled. Only valid if using an interrupt per buffer (i.e. not per 2 buffers). Not valid for host interrupt endpoint polling because they are only single buffered. */
    uint32_t EP_ABORT;                          /*!< (read-write) Device only: Can be set to ignore the buffer control register for this endpoint in case you would like to revoke a buffer. A NAK will be sent for every access to the endpoint until this bit is cleared. A corresponding bit in `EP_ABORT_DONE` is set when it is safe to modify the buffer control register. */
    uint32_t EP_ABORT_DONE;                     /*!< (read-write) Device only: Used in conjunction with `EP_ABORT`. Set once an endpoint is idle so the programmer knows it is safe to modify the buffer control register. */
    uint32_t EP_STALL_ARM;                      /*!< (read-write) Device: this bit must be set in conjunction with the `STALL` bit in the buffer control register to send a STALL on EP0. The device controller clears these bits when a SETUP packet is received because the USB spec requires that a STALL condition is cleared when a SETUP packet is received. */
    uint32_t NAK_POLL;                          /*!< (read-write) Used by the host controller. Sets the wait time in microseconds before trying again if the device replies with a NAK. */
    uint32_t EP_STATUS_STALL_NAK;               /*!< (read-write) Device: bits are set when the `IRQ_ON_NAK` or `IRQ_ON_STALL` bits are set. For EP0 this comes from `SIE_CTRL`. For all other endpoints it comes from the endpoint control register. */
    uint32_t USB_MUXING;                        /*!< (read-write) Where to connect the USB controller. Should be to_phy by default. */
    uint32_t USB_PWR;                           /*!< (read-write) Overrides for the power signals in the event that the VBUS signals are not hooked up to GPIO. Set the value of the override and then the override enable to switch over to the override value. */
    uint32_t USBPHY_DIRECT;                     /*!< (read-write) This register allows for direct control of the USB phy. Use in conjunction with usbphy_direct_override register to enable each override bit. */
    uint32_t USBPHY_DIRECT_OVERRIDE;            /*!< (read-write) Override enable for each control in usbphy_direct */
    uint32_t USBPHY_TRIM;                       /*!< (read-write) Used to adjust trim values of USB phy pull down resistors. */
    const uint32_t reserved_padding0 = {};
    const uint32_t INTR = {};                   /*!< (read-only) Raw Interrupts */
    uint32_t INTE;                              /*!< (read-write) Interrupt Enable */
    uint32_t INTF;                              /*!< (read-write) Interrupt Force */
    const uint32_t INTS = {};                   /*!< (read-only) Interrupt status after masking & forcing */

    /* Methods. */

    /**
     * Get ADDR_ENDP's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP_ADDRESS()
    {
        return (ADDR_ENDP >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP's ADDRESS field.
     */
    inline void set_ADDR_ENDP_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP = curr;
    }

    /**
     * Get ADDR_ENDP's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP_ENDPOINT()
    {
        return (ADDR_ENDP >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP's ENDPOINT field.
     */
    inline void set_ADDR_ENDP_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP = curr;
    }

    /**
     * Get ADDR_ENDP1's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP1_ADDRESS()
    {
        return (ADDR_ENDP1 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP1's ADDRESS field.
     */
    inline void set_ADDR_ENDP1_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP1;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP1 = curr;
    }

    /**
     * Get ADDR_ENDP1's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP1_ENDPOINT()
    {
        return (ADDR_ENDP1 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP1's ENDPOINT field.
     */
    inline void set_ADDR_ENDP1_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP1;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP1 = curr;
    }

    /**
     * Get ADDR_ENDP1's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP1_INTEP_DIR()
    {
        return ADDR_ENDP1 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP1's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP1_INTEP_DIR()
    {
        ADDR_ENDP1 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP1's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP1_INTEP_DIR()
    {
        ADDR_ENDP1 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP1's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP1_INTEP_DIR()
    {
        ADDR_ENDP1 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP1's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP1_INTEP_PREAMBLE()
    {
        return ADDR_ENDP1 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP1's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP1_INTEP_PREAMBLE()
    {
        ADDR_ENDP1 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP1's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP1_INTEP_PREAMBLE()
    {
        ADDR_ENDP1 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP1's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP1_INTEP_PREAMBLE()
    {
        ADDR_ENDP1 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP2's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP2_ADDRESS()
    {
        return (ADDR_ENDP2 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP2's ADDRESS field.
     */
    inline void set_ADDR_ENDP2_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP2;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP2 = curr;
    }

    /**
     * Get ADDR_ENDP2's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP2_ENDPOINT()
    {
        return (ADDR_ENDP2 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP2's ENDPOINT field.
     */
    inline void set_ADDR_ENDP2_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP2;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP2 = curr;
    }

    /**
     * Get ADDR_ENDP2's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP2_INTEP_DIR()
    {
        return ADDR_ENDP2 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP2's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP2_INTEP_DIR()
    {
        ADDR_ENDP2 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP2's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP2_INTEP_DIR()
    {
        ADDR_ENDP2 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP2's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP2_INTEP_DIR()
    {
        ADDR_ENDP2 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP2's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP2_INTEP_PREAMBLE()
    {
        return ADDR_ENDP2 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP2's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP2_INTEP_PREAMBLE()
    {
        ADDR_ENDP2 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP2's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP2_INTEP_PREAMBLE()
    {
        ADDR_ENDP2 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP2's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP2_INTEP_PREAMBLE()
    {
        ADDR_ENDP2 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP3's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP3_ADDRESS()
    {
        return (ADDR_ENDP3 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP3's ADDRESS field.
     */
    inline void set_ADDR_ENDP3_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP3;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP3 = curr;
    }

    /**
     * Get ADDR_ENDP3's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP3_ENDPOINT()
    {
        return (ADDR_ENDP3 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP3's ENDPOINT field.
     */
    inline void set_ADDR_ENDP3_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP3;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP3 = curr;
    }

    /**
     * Get ADDR_ENDP3's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP3_INTEP_DIR()
    {
        return ADDR_ENDP3 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP3's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP3_INTEP_DIR()
    {
        ADDR_ENDP3 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP3's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP3_INTEP_DIR()
    {
        ADDR_ENDP3 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP3's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP3_INTEP_DIR()
    {
        ADDR_ENDP3 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP3's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP3_INTEP_PREAMBLE()
    {
        return ADDR_ENDP3 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP3's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP3_INTEP_PREAMBLE()
    {
        ADDR_ENDP3 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP3's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP3_INTEP_PREAMBLE()
    {
        ADDR_ENDP3 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP3's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP3_INTEP_PREAMBLE()
    {
        ADDR_ENDP3 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP4's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP4_ADDRESS()
    {
        return (ADDR_ENDP4 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP4's ADDRESS field.
     */
    inline void set_ADDR_ENDP4_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP4;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP4 = curr;
    }

    /**
     * Get ADDR_ENDP4's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP4_ENDPOINT()
    {
        return (ADDR_ENDP4 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP4's ENDPOINT field.
     */
    inline void set_ADDR_ENDP4_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP4;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP4 = curr;
    }

    /**
     * Get ADDR_ENDP4's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP4_INTEP_DIR()
    {
        return ADDR_ENDP4 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP4's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP4_INTEP_DIR()
    {
        ADDR_ENDP4 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP4's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP4_INTEP_DIR()
    {
        ADDR_ENDP4 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP4's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP4_INTEP_DIR()
    {
        ADDR_ENDP4 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP4's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP4_INTEP_PREAMBLE()
    {
        return ADDR_ENDP4 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP4's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP4_INTEP_PREAMBLE()
    {
        ADDR_ENDP4 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP4's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP4_INTEP_PREAMBLE()
    {
        ADDR_ENDP4 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP4's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP4_INTEP_PREAMBLE()
    {
        ADDR_ENDP4 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP5's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP5_ADDRESS()
    {
        return (ADDR_ENDP5 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP5's ADDRESS field.
     */
    inline void set_ADDR_ENDP5_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP5;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP5 = curr;
    }

    /**
     * Get ADDR_ENDP5's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP5_ENDPOINT()
    {
        return (ADDR_ENDP5 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP5's ENDPOINT field.
     */
    inline void set_ADDR_ENDP5_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP5;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP5 = curr;
    }

    /**
     * Get ADDR_ENDP5's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP5_INTEP_DIR()
    {
        return ADDR_ENDP5 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP5's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP5_INTEP_DIR()
    {
        ADDR_ENDP5 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP5's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP5_INTEP_DIR()
    {
        ADDR_ENDP5 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP5's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP5_INTEP_DIR()
    {
        ADDR_ENDP5 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP5's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP5_INTEP_PREAMBLE()
    {
        return ADDR_ENDP5 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP5's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP5_INTEP_PREAMBLE()
    {
        ADDR_ENDP5 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP5's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP5_INTEP_PREAMBLE()
    {
        ADDR_ENDP5 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP5's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP5_INTEP_PREAMBLE()
    {
        ADDR_ENDP5 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP6's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP6_ADDRESS()
    {
        return (ADDR_ENDP6 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP6's ADDRESS field.
     */
    inline void set_ADDR_ENDP6_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP6;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP6 = curr;
    }

    /**
     * Get ADDR_ENDP6's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP6_ENDPOINT()
    {
        return (ADDR_ENDP6 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP6's ENDPOINT field.
     */
    inline void set_ADDR_ENDP6_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP6;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP6 = curr;
    }

    /**
     * Get ADDR_ENDP6's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP6_INTEP_DIR()
    {
        return ADDR_ENDP6 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP6's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP6_INTEP_DIR()
    {
        ADDR_ENDP6 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP6's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP6_INTEP_DIR()
    {
        ADDR_ENDP6 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP6's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP6_INTEP_DIR()
    {
        ADDR_ENDP6 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP6's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP6_INTEP_PREAMBLE()
    {
        return ADDR_ENDP6 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP6's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP6_INTEP_PREAMBLE()
    {
        ADDR_ENDP6 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP6's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP6_INTEP_PREAMBLE()
    {
        ADDR_ENDP6 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP6's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP6_INTEP_PREAMBLE()
    {
        ADDR_ENDP6 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP7's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP7_ADDRESS()
    {
        return (ADDR_ENDP7 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP7's ADDRESS field.
     */
    inline void set_ADDR_ENDP7_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP7;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP7 = curr;
    }

    /**
     * Get ADDR_ENDP7's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP7_ENDPOINT()
    {
        return (ADDR_ENDP7 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP7's ENDPOINT field.
     */
    inline void set_ADDR_ENDP7_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP7;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP7 = curr;
    }

    /**
     * Get ADDR_ENDP7's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP7_INTEP_DIR()
    {
        return ADDR_ENDP7 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP7's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP7_INTEP_DIR()
    {
        ADDR_ENDP7 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP7's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP7_INTEP_DIR()
    {
        ADDR_ENDP7 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP7's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP7_INTEP_DIR()
    {
        ADDR_ENDP7 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP7's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP7_INTEP_PREAMBLE()
    {
        return ADDR_ENDP7 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP7's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP7_INTEP_PREAMBLE()
    {
        ADDR_ENDP7 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP7's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP7_INTEP_PREAMBLE()
    {
        ADDR_ENDP7 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP7's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP7_INTEP_PREAMBLE()
    {
        ADDR_ENDP7 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP8's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP8_ADDRESS()
    {
        return (ADDR_ENDP8 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP8's ADDRESS field.
     */
    inline void set_ADDR_ENDP8_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP8;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP8 = curr;
    }

    /**
     * Get ADDR_ENDP8's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP8_ENDPOINT()
    {
        return (ADDR_ENDP8 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP8's ENDPOINT field.
     */
    inline void set_ADDR_ENDP8_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP8;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP8 = curr;
    }

    /**
     * Get ADDR_ENDP8's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP8_INTEP_DIR()
    {
        return ADDR_ENDP8 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP8's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP8_INTEP_DIR()
    {
        ADDR_ENDP8 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP8's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP8_INTEP_DIR()
    {
        ADDR_ENDP8 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP8's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP8_INTEP_DIR()
    {
        ADDR_ENDP8 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP8's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP8_INTEP_PREAMBLE()
    {
        return ADDR_ENDP8 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP8's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP8_INTEP_PREAMBLE()
    {
        ADDR_ENDP8 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP8's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP8_INTEP_PREAMBLE()
    {
        ADDR_ENDP8 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP8's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP8_INTEP_PREAMBLE()
    {
        ADDR_ENDP8 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP9's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP9_ADDRESS()
    {
        return (ADDR_ENDP9 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP9's ADDRESS field.
     */
    inline void set_ADDR_ENDP9_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP9;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP9 = curr;
    }

    /**
     * Get ADDR_ENDP9's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP9_ENDPOINT()
    {
        return (ADDR_ENDP9 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP9's ENDPOINT field.
     */
    inline void set_ADDR_ENDP9_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP9;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP9 = curr;
    }

    /**
     * Get ADDR_ENDP9's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP9_INTEP_DIR()
    {
        return ADDR_ENDP9 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP9's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP9_INTEP_DIR()
    {
        ADDR_ENDP9 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP9's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP9_INTEP_DIR()
    {
        ADDR_ENDP9 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP9's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP9_INTEP_DIR()
    {
        ADDR_ENDP9 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP9's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP9_INTEP_PREAMBLE()
    {
        return ADDR_ENDP9 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP9's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP9_INTEP_PREAMBLE()
    {
        ADDR_ENDP9 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP9's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP9_INTEP_PREAMBLE()
    {
        ADDR_ENDP9 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP9's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP9_INTEP_PREAMBLE()
    {
        ADDR_ENDP9 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP10's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP10_ADDRESS()
    {
        return (ADDR_ENDP10 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP10's ADDRESS field.
     */
    inline void set_ADDR_ENDP10_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP10;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP10 = curr;
    }

    /**
     * Get ADDR_ENDP10's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP10_ENDPOINT()
    {
        return (ADDR_ENDP10 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP10's ENDPOINT field.
     */
    inline void set_ADDR_ENDP10_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP10;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP10 = curr;
    }

    /**
     * Get ADDR_ENDP10's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP10_INTEP_DIR()
    {
        return ADDR_ENDP10 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP10's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP10_INTEP_DIR()
    {
        ADDR_ENDP10 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP10's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP10_INTEP_DIR()
    {
        ADDR_ENDP10 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP10's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP10_INTEP_DIR()
    {
        ADDR_ENDP10 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP10's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP10_INTEP_PREAMBLE()
    {
        return ADDR_ENDP10 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP10's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP10_INTEP_PREAMBLE()
    {
        ADDR_ENDP10 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP10's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP10_INTEP_PREAMBLE()
    {
        ADDR_ENDP10 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP10's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP10_INTEP_PREAMBLE()
    {
        ADDR_ENDP10 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP11's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP11_ADDRESS()
    {
        return (ADDR_ENDP11 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP11's ADDRESS field.
     */
    inline void set_ADDR_ENDP11_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP11;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP11 = curr;
    }

    /**
     * Get ADDR_ENDP11's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP11_ENDPOINT()
    {
        return (ADDR_ENDP11 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP11's ENDPOINT field.
     */
    inline void set_ADDR_ENDP11_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP11;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP11 = curr;
    }

    /**
     * Get ADDR_ENDP11's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP11_INTEP_DIR()
    {
        return ADDR_ENDP11 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP11's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP11_INTEP_DIR()
    {
        ADDR_ENDP11 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP11's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP11_INTEP_DIR()
    {
        ADDR_ENDP11 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP11's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP11_INTEP_DIR()
    {
        ADDR_ENDP11 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP11's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP11_INTEP_PREAMBLE()
    {
        return ADDR_ENDP11 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP11's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP11_INTEP_PREAMBLE()
    {
        ADDR_ENDP11 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP11's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP11_INTEP_PREAMBLE()
    {
        ADDR_ENDP11 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP11's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP11_INTEP_PREAMBLE()
    {
        ADDR_ENDP11 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP12's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP12_ADDRESS()
    {
        return (ADDR_ENDP12 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP12's ADDRESS field.
     */
    inline void set_ADDR_ENDP12_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP12;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP12 = curr;
    }

    /**
     * Get ADDR_ENDP12's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP12_ENDPOINT()
    {
        return (ADDR_ENDP12 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP12's ENDPOINT field.
     */
    inline void set_ADDR_ENDP12_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP12;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP12 = curr;
    }

    /**
     * Get ADDR_ENDP12's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP12_INTEP_DIR()
    {
        return ADDR_ENDP12 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP12's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP12_INTEP_DIR()
    {
        ADDR_ENDP12 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP12's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP12_INTEP_DIR()
    {
        ADDR_ENDP12 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP12's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP12_INTEP_DIR()
    {
        ADDR_ENDP12 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP12's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP12_INTEP_PREAMBLE()
    {
        return ADDR_ENDP12 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP12's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP12_INTEP_PREAMBLE()
    {
        ADDR_ENDP12 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP12's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP12_INTEP_PREAMBLE()
    {
        ADDR_ENDP12 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP12's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP12_INTEP_PREAMBLE()
    {
        ADDR_ENDP12 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP13's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP13_ADDRESS()
    {
        return (ADDR_ENDP13 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP13's ADDRESS field.
     */
    inline void set_ADDR_ENDP13_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP13;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP13 = curr;
    }

    /**
     * Get ADDR_ENDP13's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP13_ENDPOINT()
    {
        return (ADDR_ENDP13 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP13's ENDPOINT field.
     */
    inline void set_ADDR_ENDP13_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP13;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP13 = curr;
    }

    /**
     * Get ADDR_ENDP13's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP13_INTEP_DIR()
    {
        return ADDR_ENDP13 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP13's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP13_INTEP_DIR()
    {
        ADDR_ENDP13 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP13's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP13_INTEP_DIR()
    {
        ADDR_ENDP13 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP13's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP13_INTEP_DIR()
    {
        ADDR_ENDP13 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP13's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP13_INTEP_PREAMBLE()
    {
        return ADDR_ENDP13 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP13's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP13_INTEP_PREAMBLE()
    {
        ADDR_ENDP13 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP13's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP13_INTEP_PREAMBLE()
    {
        ADDR_ENDP13 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP13's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP13_INTEP_PREAMBLE()
    {
        ADDR_ENDP13 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP14's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP14_ADDRESS()
    {
        return (ADDR_ENDP14 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP14's ADDRESS field.
     */
    inline void set_ADDR_ENDP14_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP14;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP14 = curr;
    }

    /**
     * Get ADDR_ENDP14's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP14_ENDPOINT()
    {
        return (ADDR_ENDP14 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP14's ENDPOINT field.
     */
    inline void set_ADDR_ENDP14_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP14;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP14 = curr;
    }

    /**
     * Get ADDR_ENDP14's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP14_INTEP_DIR()
    {
        return ADDR_ENDP14 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP14's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP14_INTEP_DIR()
    {
        ADDR_ENDP14 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP14's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP14_INTEP_DIR()
    {
        ADDR_ENDP14 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP14's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP14_INTEP_DIR()
    {
        ADDR_ENDP14 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP14's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP14_INTEP_PREAMBLE()
    {
        return ADDR_ENDP14 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP14's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP14_INTEP_PREAMBLE()
    {
        ADDR_ENDP14 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP14's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP14_INTEP_PREAMBLE()
    {
        ADDR_ENDP14 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP14's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP14_INTEP_PREAMBLE()
    {
        ADDR_ENDP14 ^= 1u << 26u;
    }

    /**
     * Get ADDR_ENDP15's ADDRESS field.
     */
    uint8_t get_ADDR_ENDP15_ADDRESS()
    {
        return (ADDR_ENDP15 >> 0u) & 0b1111111u;
    }

    /**
     * Set ADDR_ENDP15's ADDRESS field.
     */
    inline void set_ADDR_ENDP15_ADDRESS(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP15;

        curr &= ~(0b1111111u << 0u);
        curr |= (value & 0b1111111u) << 0u;

        ADDR_ENDP15 = curr;
    }

    /**
     * Get ADDR_ENDP15's ENDPOINT field.
     */
    uint8_t get_ADDR_ENDP15_ENDPOINT()
    {
        return (ADDR_ENDP15 >> 16u) & 0b1111u;
    }

    /**
     * Set ADDR_ENDP15's ENDPOINT field.
     */
    inline void set_ADDR_ENDP15_ENDPOINT(uint8_t value)
    {
        uint32_t curr = ADDR_ENDP15;

        curr &= ~(0b1111u << 16u);
        curr |= (value & 0b1111u) << 16u;

        ADDR_ENDP15 = curr;
    }

    /**
     * Get ADDR_ENDP15's INTEP_DIR bit.
     */
    bool get_ADDR_ENDP15_INTEP_DIR()
    {
        return ADDR_ENDP15 & (1u << 25u);
    }

    /**
     * Set ADDR_ENDP15's INTEP_DIR bit.
     */
    inline void set_ADDR_ENDP15_INTEP_DIR()
    {
        ADDR_ENDP15 |= 1u << 25u;
    }

    /**
     * Clear ADDR_ENDP15's INTEP_DIR bit.
     */
    inline void clear_ADDR_ENDP15_INTEP_DIR()
    {
        ADDR_ENDP15 &= ~(1u << 25u);
    }

    /**
     * Toggle ADDR_ENDP15's INTEP_DIR bit.
     */
    inline void toggle_ADDR_ENDP15_INTEP_DIR()
    {
        ADDR_ENDP15 ^= 1u << 25u;
    }

    /**
     * Get ADDR_ENDP15's INTEP_PREAMBLE bit.
     */
    bool get_ADDR_ENDP15_INTEP_PREAMBLE()
    {
        return ADDR_ENDP15 & (1u << 26u);
    }

    /**
     * Set ADDR_ENDP15's INTEP_PREAMBLE bit.
     */
    inline void set_ADDR_ENDP15_INTEP_PREAMBLE()
    {
        ADDR_ENDP15 |= 1u << 26u;
    }

    /**
     * Clear ADDR_ENDP15's INTEP_PREAMBLE bit.
     */
    inline void clear_ADDR_ENDP15_INTEP_PREAMBLE()
    {
        ADDR_ENDP15 &= ~(1u << 26u);
    }

    /**
     * Toggle ADDR_ENDP15's INTEP_PREAMBLE bit.
     */
    inline void toggle_ADDR_ENDP15_INTEP_PREAMBLE()
    {
        ADDR_ENDP15 ^= 1u << 26u;
    }

    /**
     * Get MAIN_CTRL's CONTROLLER_EN bit.
     */
    bool get_MAIN_CTRL_CONTROLLER_EN()
    {
        return MAIN_CTRL & (1u << 0u);
    }

    /**
     * Set MAIN_CTRL's CONTROLLER_EN bit.
     */
    inline void set_MAIN_CTRL_CONTROLLER_EN()
    {
        MAIN_CTRL |= 1u << 0u;
    }

    /**
     * Clear MAIN_CTRL's CONTROLLER_EN bit.
     */
    inline void clear_MAIN_CTRL_CONTROLLER_EN()
    {
        MAIN_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle MAIN_CTRL's CONTROLLER_EN bit.
     */
    inline void toggle_MAIN_CTRL_CONTROLLER_EN()
    {
        MAIN_CTRL ^= 1u << 0u;
    }

    /**
     * Get MAIN_CTRL's HOST_NDEVICE bit.
     */
    bool get_MAIN_CTRL_HOST_NDEVICE()
    {
        return MAIN_CTRL & (1u << 1u);
    }

    /**
     * Set MAIN_CTRL's HOST_NDEVICE bit.
     */
    inline void set_MAIN_CTRL_HOST_NDEVICE()
    {
        MAIN_CTRL |= 1u << 1u;
    }

    /**
     * Clear MAIN_CTRL's HOST_NDEVICE bit.
     */
    inline void clear_MAIN_CTRL_HOST_NDEVICE()
    {
        MAIN_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle MAIN_CTRL's HOST_NDEVICE bit.
     */
    inline void toggle_MAIN_CTRL_HOST_NDEVICE()
    {
        MAIN_CTRL ^= 1u << 1u;
    }

    /**
     * Get MAIN_CTRL's SIM_TIMING bit.
     */
    bool get_MAIN_CTRL_SIM_TIMING()
    {
        return MAIN_CTRL & (1u << 31u);
    }

    /**
     * Set MAIN_CTRL's SIM_TIMING bit.
     */
    inline void set_MAIN_CTRL_SIM_TIMING()
    {
        MAIN_CTRL |= 1u << 31u;
    }

    /**
     * Clear MAIN_CTRL's SIM_TIMING bit.
     */
    inline void clear_MAIN_CTRL_SIM_TIMING()
    {
        MAIN_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle MAIN_CTRL's SIM_TIMING bit.
     */
    inline void toggle_MAIN_CTRL_SIM_TIMING()
    {
        MAIN_CTRL ^= 1u << 31u;
    }

    /**
     * Set SOF_WR's COUNT field.
     */
    inline void set_SOF_WR_COUNT(uint16_t value)
    {
        uint32_t curr = SOF_WR;

        curr &= ~(0b11111111111u << 0u);
        curr |= (value & 0b11111111111u) << 0u;

        SOF_WR = curr;
    }

    /**
     * Get SOF_RD's COUNT field.
     */
    uint16_t get_SOF_RD_COUNT()
    {
        return (SOF_RD >> 0u) & 0b11111111111u;
    }

    /**
     * Get SIE_CTRL's START_TRANS bit.
     */
    bool get_SIE_CTRL_START_TRANS()
    {
        return SIE_CTRL & (1u << 0u);
    }

    /**
     * Set SIE_CTRL's START_TRANS bit.
     */
    inline void set_SIE_CTRL_START_TRANS()
    {
        SIE_CTRL |= 1u << 0u;
    }

    /**
     * Clear SIE_CTRL's START_TRANS bit.
     */
    inline void clear_SIE_CTRL_START_TRANS()
    {
        SIE_CTRL &= ~(1u << 0u);
    }

    /**
     * Toggle SIE_CTRL's START_TRANS bit.
     */
    inline void toggle_SIE_CTRL_START_TRANS()
    {
        SIE_CTRL ^= 1u << 0u;
    }

    /**
     * Get SIE_CTRL's SEND_SETUP bit.
     */
    bool get_SIE_CTRL_SEND_SETUP()
    {
        return SIE_CTRL & (1u << 1u);
    }

    /**
     * Set SIE_CTRL's SEND_SETUP bit.
     */
    inline void set_SIE_CTRL_SEND_SETUP()
    {
        SIE_CTRL |= 1u << 1u;
    }

    /**
     * Clear SIE_CTRL's SEND_SETUP bit.
     */
    inline void clear_SIE_CTRL_SEND_SETUP()
    {
        SIE_CTRL &= ~(1u << 1u);
    }

    /**
     * Toggle SIE_CTRL's SEND_SETUP bit.
     */
    inline void toggle_SIE_CTRL_SEND_SETUP()
    {
        SIE_CTRL ^= 1u << 1u;
    }

    /**
     * Get SIE_CTRL's SEND_DATA bit.
     */
    bool get_SIE_CTRL_SEND_DATA()
    {
        return SIE_CTRL & (1u << 2u);
    }

    /**
     * Set SIE_CTRL's SEND_DATA bit.
     */
    inline void set_SIE_CTRL_SEND_DATA()
    {
        SIE_CTRL |= 1u << 2u;
    }

    /**
     * Clear SIE_CTRL's SEND_DATA bit.
     */
    inline void clear_SIE_CTRL_SEND_DATA()
    {
        SIE_CTRL &= ~(1u << 2u);
    }

    /**
     * Toggle SIE_CTRL's SEND_DATA bit.
     */
    inline void toggle_SIE_CTRL_SEND_DATA()
    {
        SIE_CTRL ^= 1u << 2u;
    }

    /**
     * Get SIE_CTRL's RECEIVE_DATA bit.
     */
    bool get_SIE_CTRL_RECEIVE_DATA()
    {
        return SIE_CTRL & (1u << 3u);
    }

    /**
     * Set SIE_CTRL's RECEIVE_DATA bit.
     */
    inline void set_SIE_CTRL_RECEIVE_DATA()
    {
        SIE_CTRL |= 1u << 3u;
    }

    /**
     * Clear SIE_CTRL's RECEIVE_DATA bit.
     */
    inline void clear_SIE_CTRL_RECEIVE_DATA()
    {
        SIE_CTRL &= ~(1u << 3u);
    }

    /**
     * Toggle SIE_CTRL's RECEIVE_DATA bit.
     */
    inline void toggle_SIE_CTRL_RECEIVE_DATA()
    {
        SIE_CTRL ^= 1u << 3u;
    }

    /**
     * Get SIE_CTRL's STOP_TRANS bit.
     */
    bool get_SIE_CTRL_STOP_TRANS()
    {
        return SIE_CTRL & (1u << 4u);
    }

    /**
     * Set SIE_CTRL's STOP_TRANS bit.
     */
    inline void set_SIE_CTRL_STOP_TRANS()
    {
        SIE_CTRL |= 1u << 4u;
    }

    /**
     * Clear SIE_CTRL's STOP_TRANS bit.
     */
    inline void clear_SIE_CTRL_STOP_TRANS()
    {
        SIE_CTRL &= ~(1u << 4u);
    }

    /**
     * Toggle SIE_CTRL's STOP_TRANS bit.
     */
    inline void toggle_SIE_CTRL_STOP_TRANS()
    {
        SIE_CTRL ^= 1u << 4u;
    }

    /**
     * Get SIE_CTRL's PREAMBLE_EN bit.
     */
    bool get_SIE_CTRL_PREAMBLE_EN()
    {
        return SIE_CTRL & (1u << 6u);
    }

    /**
     * Set SIE_CTRL's PREAMBLE_EN bit.
     */
    inline void set_SIE_CTRL_PREAMBLE_EN()
    {
        SIE_CTRL |= 1u << 6u;
    }

    /**
     * Clear SIE_CTRL's PREAMBLE_EN bit.
     */
    inline void clear_SIE_CTRL_PREAMBLE_EN()
    {
        SIE_CTRL &= ~(1u << 6u);
    }

    /**
     * Toggle SIE_CTRL's PREAMBLE_EN bit.
     */
    inline void toggle_SIE_CTRL_PREAMBLE_EN()
    {
        SIE_CTRL ^= 1u << 6u;
    }

    /**
     * Get SIE_CTRL's SOF_SYNC bit.
     */
    bool get_SIE_CTRL_SOF_SYNC()
    {
        return SIE_CTRL & (1u << 8u);
    }

    /**
     * Set SIE_CTRL's SOF_SYNC bit.
     */
    inline void set_SIE_CTRL_SOF_SYNC()
    {
        SIE_CTRL |= 1u << 8u;
    }

    /**
     * Clear SIE_CTRL's SOF_SYNC bit.
     */
    inline void clear_SIE_CTRL_SOF_SYNC()
    {
        SIE_CTRL &= ~(1u << 8u);
    }

    /**
     * Toggle SIE_CTRL's SOF_SYNC bit.
     */
    inline void toggle_SIE_CTRL_SOF_SYNC()
    {
        SIE_CTRL ^= 1u << 8u;
    }

    /**
     * Get SIE_CTRL's SOF_EN bit.
     */
    bool get_SIE_CTRL_SOF_EN()
    {
        return SIE_CTRL & (1u << 9u);
    }

    /**
     * Set SIE_CTRL's SOF_EN bit.
     */
    inline void set_SIE_CTRL_SOF_EN()
    {
        SIE_CTRL |= 1u << 9u;
    }

    /**
     * Clear SIE_CTRL's SOF_EN bit.
     */
    inline void clear_SIE_CTRL_SOF_EN()
    {
        SIE_CTRL &= ~(1u << 9u);
    }

    /**
     * Toggle SIE_CTRL's SOF_EN bit.
     */
    inline void toggle_SIE_CTRL_SOF_EN()
    {
        SIE_CTRL ^= 1u << 9u;
    }

    /**
     * Get SIE_CTRL's KEEP_ALIVE_EN bit.
     */
    bool get_SIE_CTRL_KEEP_ALIVE_EN()
    {
        return SIE_CTRL & (1u << 10u);
    }

    /**
     * Set SIE_CTRL's KEEP_ALIVE_EN bit.
     */
    inline void set_SIE_CTRL_KEEP_ALIVE_EN()
    {
        SIE_CTRL |= 1u << 10u;
    }

    /**
     * Clear SIE_CTRL's KEEP_ALIVE_EN bit.
     */
    inline void clear_SIE_CTRL_KEEP_ALIVE_EN()
    {
        SIE_CTRL &= ~(1u << 10u);
    }

    /**
     * Toggle SIE_CTRL's KEEP_ALIVE_EN bit.
     */
    inline void toggle_SIE_CTRL_KEEP_ALIVE_EN()
    {
        SIE_CTRL ^= 1u << 10u;
    }

    /**
     * Get SIE_CTRL's VBUS_EN bit.
     */
    bool get_SIE_CTRL_VBUS_EN()
    {
        return SIE_CTRL & (1u << 11u);
    }

    /**
     * Set SIE_CTRL's VBUS_EN bit.
     */
    inline void set_SIE_CTRL_VBUS_EN()
    {
        SIE_CTRL |= 1u << 11u;
    }

    /**
     * Clear SIE_CTRL's VBUS_EN bit.
     */
    inline void clear_SIE_CTRL_VBUS_EN()
    {
        SIE_CTRL &= ~(1u << 11u);
    }

    /**
     * Toggle SIE_CTRL's VBUS_EN bit.
     */
    inline void toggle_SIE_CTRL_VBUS_EN()
    {
        SIE_CTRL ^= 1u << 11u;
    }

    /**
     * Get SIE_CTRL's RESUME bit.
     */
    bool get_SIE_CTRL_RESUME()
    {
        return SIE_CTRL & (1u << 12u);
    }

    /**
     * Set SIE_CTRL's RESUME bit.
     */
    inline void set_SIE_CTRL_RESUME()
    {
        SIE_CTRL |= 1u << 12u;
    }

    /**
     * Clear SIE_CTRL's RESUME bit.
     */
    inline void clear_SIE_CTRL_RESUME()
    {
        SIE_CTRL &= ~(1u << 12u);
    }

    /**
     * Toggle SIE_CTRL's RESUME bit.
     */
    inline void toggle_SIE_CTRL_RESUME()
    {
        SIE_CTRL ^= 1u << 12u;
    }

    /**
     * Get SIE_CTRL's RESET_BUS bit.
     */
    bool get_SIE_CTRL_RESET_BUS()
    {
        return SIE_CTRL & (1u << 13u);
    }

    /**
     * Set SIE_CTRL's RESET_BUS bit.
     */
    inline void set_SIE_CTRL_RESET_BUS()
    {
        SIE_CTRL |= 1u << 13u;
    }

    /**
     * Clear SIE_CTRL's RESET_BUS bit.
     */
    inline void clear_SIE_CTRL_RESET_BUS()
    {
        SIE_CTRL &= ~(1u << 13u);
    }

    /**
     * Toggle SIE_CTRL's RESET_BUS bit.
     */
    inline void toggle_SIE_CTRL_RESET_BUS()
    {
        SIE_CTRL ^= 1u << 13u;
    }

    /**
     * Get SIE_CTRL's PULLDOWN_EN bit.
     */
    bool get_SIE_CTRL_PULLDOWN_EN()
    {
        return SIE_CTRL & (1u << 15u);
    }

    /**
     * Set SIE_CTRL's PULLDOWN_EN bit.
     */
    inline void set_SIE_CTRL_PULLDOWN_EN()
    {
        SIE_CTRL |= 1u << 15u;
    }

    /**
     * Clear SIE_CTRL's PULLDOWN_EN bit.
     */
    inline void clear_SIE_CTRL_PULLDOWN_EN()
    {
        SIE_CTRL &= ~(1u << 15u);
    }

    /**
     * Toggle SIE_CTRL's PULLDOWN_EN bit.
     */
    inline void toggle_SIE_CTRL_PULLDOWN_EN()
    {
        SIE_CTRL ^= 1u << 15u;
    }

    /**
     * Get SIE_CTRL's PULLUP_EN bit.
     */
    bool get_SIE_CTRL_PULLUP_EN()
    {
        return SIE_CTRL & (1u << 16u);
    }

    /**
     * Set SIE_CTRL's PULLUP_EN bit.
     */
    inline void set_SIE_CTRL_PULLUP_EN()
    {
        SIE_CTRL |= 1u << 16u;
    }

    /**
     * Clear SIE_CTRL's PULLUP_EN bit.
     */
    inline void clear_SIE_CTRL_PULLUP_EN()
    {
        SIE_CTRL &= ~(1u << 16u);
    }

    /**
     * Toggle SIE_CTRL's PULLUP_EN bit.
     */
    inline void toggle_SIE_CTRL_PULLUP_EN()
    {
        SIE_CTRL ^= 1u << 16u;
    }

    /**
     * Get SIE_CTRL's RPU_OPT bit.
     */
    bool get_SIE_CTRL_RPU_OPT()
    {
        return SIE_CTRL & (1u << 17u);
    }

    /**
     * Set SIE_CTRL's RPU_OPT bit.
     */
    inline void set_SIE_CTRL_RPU_OPT()
    {
        SIE_CTRL |= 1u << 17u;
    }

    /**
     * Clear SIE_CTRL's RPU_OPT bit.
     */
    inline void clear_SIE_CTRL_RPU_OPT()
    {
        SIE_CTRL &= ~(1u << 17u);
    }

    /**
     * Toggle SIE_CTRL's RPU_OPT bit.
     */
    inline void toggle_SIE_CTRL_RPU_OPT()
    {
        SIE_CTRL ^= 1u << 17u;
    }

    /**
     * Get SIE_CTRL's TRANSCEIVER_PD bit.
     */
    bool get_SIE_CTRL_TRANSCEIVER_PD()
    {
        return SIE_CTRL & (1u << 18u);
    }

    /**
     * Set SIE_CTRL's TRANSCEIVER_PD bit.
     */
    inline void set_SIE_CTRL_TRANSCEIVER_PD()
    {
        SIE_CTRL |= 1u << 18u;
    }

    /**
     * Clear SIE_CTRL's TRANSCEIVER_PD bit.
     */
    inline void clear_SIE_CTRL_TRANSCEIVER_PD()
    {
        SIE_CTRL &= ~(1u << 18u);
    }

    /**
     * Toggle SIE_CTRL's TRANSCEIVER_PD bit.
     */
    inline void toggle_SIE_CTRL_TRANSCEIVER_PD()
    {
        SIE_CTRL ^= 1u << 18u;
    }

    /**
     * Get SIE_CTRL's DIRECT_DM bit.
     */
    bool get_SIE_CTRL_DIRECT_DM()
    {
        return SIE_CTRL & (1u << 24u);
    }

    /**
     * Set SIE_CTRL's DIRECT_DM bit.
     */
    inline void set_SIE_CTRL_DIRECT_DM()
    {
        SIE_CTRL |= 1u << 24u;
    }

    /**
     * Clear SIE_CTRL's DIRECT_DM bit.
     */
    inline void clear_SIE_CTRL_DIRECT_DM()
    {
        SIE_CTRL &= ~(1u << 24u);
    }

    /**
     * Toggle SIE_CTRL's DIRECT_DM bit.
     */
    inline void toggle_SIE_CTRL_DIRECT_DM()
    {
        SIE_CTRL ^= 1u << 24u;
    }

    /**
     * Get SIE_CTRL's DIRECT_DP bit.
     */
    bool get_SIE_CTRL_DIRECT_DP()
    {
        return SIE_CTRL & (1u << 25u);
    }

    /**
     * Set SIE_CTRL's DIRECT_DP bit.
     */
    inline void set_SIE_CTRL_DIRECT_DP()
    {
        SIE_CTRL |= 1u << 25u;
    }

    /**
     * Clear SIE_CTRL's DIRECT_DP bit.
     */
    inline void clear_SIE_CTRL_DIRECT_DP()
    {
        SIE_CTRL &= ~(1u << 25u);
    }

    /**
     * Toggle SIE_CTRL's DIRECT_DP bit.
     */
    inline void toggle_SIE_CTRL_DIRECT_DP()
    {
        SIE_CTRL ^= 1u << 25u;
    }

    /**
     * Get SIE_CTRL's DIRECT_EN bit.
     */
    bool get_SIE_CTRL_DIRECT_EN()
    {
        return SIE_CTRL & (1u << 26u);
    }

    /**
     * Set SIE_CTRL's DIRECT_EN bit.
     */
    inline void set_SIE_CTRL_DIRECT_EN()
    {
        SIE_CTRL |= 1u << 26u;
    }

    /**
     * Clear SIE_CTRL's DIRECT_EN bit.
     */
    inline void clear_SIE_CTRL_DIRECT_EN()
    {
        SIE_CTRL &= ~(1u << 26u);
    }

    /**
     * Toggle SIE_CTRL's DIRECT_EN bit.
     */
    inline void toggle_SIE_CTRL_DIRECT_EN()
    {
        SIE_CTRL ^= 1u << 26u;
    }

    /**
     * Get SIE_CTRL's EP0_INT_NAK bit.
     */
    bool get_SIE_CTRL_EP0_INT_NAK()
    {
        return SIE_CTRL & (1u << 27u);
    }

    /**
     * Set SIE_CTRL's EP0_INT_NAK bit.
     */
    inline void set_SIE_CTRL_EP0_INT_NAK()
    {
        SIE_CTRL |= 1u << 27u;
    }

    /**
     * Clear SIE_CTRL's EP0_INT_NAK bit.
     */
    inline void clear_SIE_CTRL_EP0_INT_NAK()
    {
        SIE_CTRL &= ~(1u << 27u);
    }

    /**
     * Toggle SIE_CTRL's EP0_INT_NAK bit.
     */
    inline void toggle_SIE_CTRL_EP0_INT_NAK()
    {
        SIE_CTRL ^= 1u << 27u;
    }

    /**
     * Get SIE_CTRL's EP0_INT_2BUF bit.
     */
    bool get_SIE_CTRL_EP0_INT_2BUF()
    {
        return SIE_CTRL & (1u << 28u);
    }

    /**
     * Set SIE_CTRL's EP0_INT_2BUF bit.
     */
    inline void set_SIE_CTRL_EP0_INT_2BUF()
    {
        SIE_CTRL |= 1u << 28u;
    }

    /**
     * Clear SIE_CTRL's EP0_INT_2BUF bit.
     */
    inline void clear_SIE_CTRL_EP0_INT_2BUF()
    {
        SIE_CTRL &= ~(1u << 28u);
    }

    /**
     * Toggle SIE_CTRL's EP0_INT_2BUF bit.
     */
    inline void toggle_SIE_CTRL_EP0_INT_2BUF()
    {
        SIE_CTRL ^= 1u << 28u;
    }

    /**
     * Get SIE_CTRL's EP0_INT_1BUF bit.
     */
    bool get_SIE_CTRL_EP0_INT_1BUF()
    {
        return SIE_CTRL & (1u << 29u);
    }

    /**
     * Set SIE_CTRL's EP0_INT_1BUF bit.
     */
    inline void set_SIE_CTRL_EP0_INT_1BUF()
    {
        SIE_CTRL |= 1u << 29u;
    }

    /**
     * Clear SIE_CTRL's EP0_INT_1BUF bit.
     */
    inline void clear_SIE_CTRL_EP0_INT_1BUF()
    {
        SIE_CTRL &= ~(1u << 29u);
    }

    /**
     * Toggle SIE_CTRL's EP0_INT_1BUF bit.
     */
    inline void toggle_SIE_CTRL_EP0_INT_1BUF()
    {
        SIE_CTRL ^= 1u << 29u;
    }

    /**
     * Get SIE_CTRL's EP0_DOUBLE_BUF bit.
     */
    bool get_SIE_CTRL_EP0_DOUBLE_BUF()
    {
        return SIE_CTRL & (1u << 30u);
    }

    /**
     * Set SIE_CTRL's EP0_DOUBLE_BUF bit.
     */
    inline void set_SIE_CTRL_EP0_DOUBLE_BUF()
    {
        SIE_CTRL |= 1u << 30u;
    }

    /**
     * Clear SIE_CTRL's EP0_DOUBLE_BUF bit.
     */
    inline void clear_SIE_CTRL_EP0_DOUBLE_BUF()
    {
        SIE_CTRL &= ~(1u << 30u);
    }

    /**
     * Toggle SIE_CTRL's EP0_DOUBLE_BUF bit.
     */
    inline void toggle_SIE_CTRL_EP0_DOUBLE_BUF()
    {
        SIE_CTRL ^= 1u << 30u;
    }

    /**
     * Get SIE_CTRL's EP0_INT_STALL bit.
     */
    bool get_SIE_CTRL_EP0_INT_STALL()
    {
        return SIE_CTRL & (1u << 31u);
    }

    /**
     * Set SIE_CTRL's EP0_INT_STALL bit.
     */
    inline void set_SIE_CTRL_EP0_INT_STALL()
    {
        SIE_CTRL |= 1u << 31u;
    }

    /**
     * Clear SIE_CTRL's EP0_INT_STALL bit.
     */
    inline void clear_SIE_CTRL_EP0_INT_STALL()
    {
        SIE_CTRL &= ~(1u << 31u);
    }

    /**
     * Toggle SIE_CTRL's EP0_INT_STALL bit.
     */
    inline void toggle_SIE_CTRL_EP0_INT_STALL()
    {
        SIE_CTRL ^= 1u << 31u;
    }

    /**
     * Get SIE_STATUS's VBUS_DETECTED bit.
     */
    bool get_SIE_STATUS_VBUS_DETECTED()
    {
        return SIE_STATUS & (1u << 0u);
    }

    /**
     * Get SIE_STATUS's LINE_STATE field.
     */
    uint8_t get_SIE_STATUS_LINE_STATE()
    {
        return (SIE_STATUS >> 2u) & 0b11u;
    }

    /**
     * Get SIE_STATUS's SUSPENDED bit.
     */
    bool get_SIE_STATUS_SUSPENDED()
    {
        return SIE_STATUS & (1u << 4u);
    }

    /**
     * Set SIE_STATUS's SUSPENDED bit.
     */
    inline void set_SIE_STATUS_SUSPENDED()
    {
        SIE_STATUS |= 1u << 4u;
    }

    /**
     * Clear SIE_STATUS's SUSPENDED bit.
     */
    inline void clear_SIE_STATUS_SUSPENDED()
    {
        SIE_STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle SIE_STATUS's SUSPENDED bit.
     */
    inline void toggle_SIE_STATUS_SUSPENDED()
    {
        SIE_STATUS ^= 1u << 4u;
    }

    /**
     * Get SIE_STATUS's SPEED field.
     */
    uint8_t get_SIE_STATUS_SPEED()
    {
        return (SIE_STATUS >> 8u) & 0b11u;
    }

    /**
     * Set SIE_STATUS's SPEED field.
     */
    inline void set_SIE_STATUS_SPEED(uint8_t value)
    {
        uint32_t curr = SIE_STATUS;

        curr &= ~(0b11u << 8u);
        curr |= (value & 0b11u) << 8u;

        SIE_STATUS = curr;
    }

    /**
     * Get SIE_STATUS's VBUS_OVER_CURR bit.
     */
    bool get_SIE_STATUS_VBUS_OVER_CURR()
    {
        return SIE_STATUS & (1u << 10u);
    }

    /**
     * Get SIE_STATUS's RESUME bit.
     */
    bool get_SIE_STATUS_RESUME()
    {
        return SIE_STATUS & (1u << 11u);
    }

    /**
     * Set SIE_STATUS's RESUME bit.
     */
    inline void set_SIE_STATUS_RESUME()
    {
        SIE_STATUS |= 1u << 11u;
    }

    /**
     * Clear SIE_STATUS's RESUME bit.
     */
    inline void clear_SIE_STATUS_RESUME()
    {
        SIE_STATUS &= ~(1u << 11u);
    }

    /**
     * Toggle SIE_STATUS's RESUME bit.
     */
    inline void toggle_SIE_STATUS_RESUME()
    {
        SIE_STATUS ^= 1u << 11u;
    }

    /**
     * Get SIE_STATUS's CONNECTED bit.
     */
    bool get_SIE_STATUS_CONNECTED()
    {
        return SIE_STATUS & (1u << 16u);
    }

    /**
     * Set SIE_STATUS's CONNECTED bit.
     */
    inline void set_SIE_STATUS_CONNECTED()
    {
        SIE_STATUS |= 1u << 16u;
    }

    /**
     * Clear SIE_STATUS's CONNECTED bit.
     */
    inline void clear_SIE_STATUS_CONNECTED()
    {
        SIE_STATUS &= ~(1u << 16u);
    }

    /**
     * Toggle SIE_STATUS's CONNECTED bit.
     */
    inline void toggle_SIE_STATUS_CONNECTED()
    {
        SIE_STATUS ^= 1u << 16u;
    }

    /**
     * Get SIE_STATUS's SETUP_REC bit.
     */
    bool get_SIE_STATUS_SETUP_REC()
    {
        return SIE_STATUS & (1u << 17u);
    }

    /**
     * Set SIE_STATUS's SETUP_REC bit.
     */
    inline void set_SIE_STATUS_SETUP_REC()
    {
        SIE_STATUS |= 1u << 17u;
    }

    /**
     * Clear SIE_STATUS's SETUP_REC bit.
     */
    inline void clear_SIE_STATUS_SETUP_REC()
    {
        SIE_STATUS &= ~(1u << 17u);
    }

    /**
     * Toggle SIE_STATUS's SETUP_REC bit.
     */
    inline void toggle_SIE_STATUS_SETUP_REC()
    {
        SIE_STATUS ^= 1u << 17u;
    }

    /**
     * Get SIE_STATUS's TRANS_COMPLETE bit.
     */
    bool get_SIE_STATUS_TRANS_COMPLETE()
    {
        return SIE_STATUS & (1u << 18u);
    }

    /**
     * Set SIE_STATUS's TRANS_COMPLETE bit.
     */
    inline void set_SIE_STATUS_TRANS_COMPLETE()
    {
        SIE_STATUS |= 1u << 18u;
    }

    /**
     * Clear SIE_STATUS's TRANS_COMPLETE bit.
     */
    inline void clear_SIE_STATUS_TRANS_COMPLETE()
    {
        SIE_STATUS &= ~(1u << 18u);
    }

    /**
     * Toggle SIE_STATUS's TRANS_COMPLETE bit.
     */
    inline void toggle_SIE_STATUS_TRANS_COMPLETE()
    {
        SIE_STATUS ^= 1u << 18u;
    }

    /**
     * Get SIE_STATUS's BUS_RESET bit.
     */
    bool get_SIE_STATUS_BUS_RESET()
    {
        return SIE_STATUS & (1u << 19u);
    }

    /**
     * Set SIE_STATUS's BUS_RESET bit.
     */
    inline void set_SIE_STATUS_BUS_RESET()
    {
        SIE_STATUS |= 1u << 19u;
    }

    /**
     * Clear SIE_STATUS's BUS_RESET bit.
     */
    inline void clear_SIE_STATUS_BUS_RESET()
    {
        SIE_STATUS &= ~(1u << 19u);
    }

    /**
     * Toggle SIE_STATUS's BUS_RESET bit.
     */
    inline void toggle_SIE_STATUS_BUS_RESET()
    {
        SIE_STATUS ^= 1u << 19u;
    }

    /**
     * Get SIE_STATUS's CRC_ERROR bit.
     */
    bool get_SIE_STATUS_CRC_ERROR()
    {
        return SIE_STATUS & (1u << 24u);
    }

    /**
     * Set SIE_STATUS's CRC_ERROR bit.
     */
    inline void set_SIE_STATUS_CRC_ERROR()
    {
        SIE_STATUS |= 1u << 24u;
    }

    /**
     * Clear SIE_STATUS's CRC_ERROR bit.
     */
    inline void clear_SIE_STATUS_CRC_ERROR()
    {
        SIE_STATUS &= ~(1u << 24u);
    }

    /**
     * Toggle SIE_STATUS's CRC_ERROR bit.
     */
    inline void toggle_SIE_STATUS_CRC_ERROR()
    {
        SIE_STATUS ^= 1u << 24u;
    }

    /**
     * Get SIE_STATUS's BIT_STUFF_ERROR bit.
     */
    bool get_SIE_STATUS_BIT_STUFF_ERROR()
    {
        return SIE_STATUS & (1u << 25u);
    }

    /**
     * Set SIE_STATUS's BIT_STUFF_ERROR bit.
     */
    inline void set_SIE_STATUS_BIT_STUFF_ERROR()
    {
        SIE_STATUS |= 1u << 25u;
    }

    /**
     * Clear SIE_STATUS's BIT_STUFF_ERROR bit.
     */
    inline void clear_SIE_STATUS_BIT_STUFF_ERROR()
    {
        SIE_STATUS &= ~(1u << 25u);
    }

    /**
     * Toggle SIE_STATUS's BIT_STUFF_ERROR bit.
     */
    inline void toggle_SIE_STATUS_BIT_STUFF_ERROR()
    {
        SIE_STATUS ^= 1u << 25u;
    }

    /**
     * Get SIE_STATUS's RX_OVERFLOW bit.
     */
    bool get_SIE_STATUS_RX_OVERFLOW()
    {
        return SIE_STATUS & (1u << 26u);
    }

    /**
     * Set SIE_STATUS's RX_OVERFLOW bit.
     */
    inline void set_SIE_STATUS_RX_OVERFLOW()
    {
        SIE_STATUS |= 1u << 26u;
    }

    /**
     * Clear SIE_STATUS's RX_OVERFLOW bit.
     */
    inline void clear_SIE_STATUS_RX_OVERFLOW()
    {
        SIE_STATUS &= ~(1u << 26u);
    }

    /**
     * Toggle SIE_STATUS's RX_OVERFLOW bit.
     */
    inline void toggle_SIE_STATUS_RX_OVERFLOW()
    {
        SIE_STATUS ^= 1u << 26u;
    }

    /**
     * Get SIE_STATUS's RX_TIMEOUT bit.
     */
    bool get_SIE_STATUS_RX_TIMEOUT()
    {
        return SIE_STATUS & (1u << 27u);
    }

    /**
     * Set SIE_STATUS's RX_TIMEOUT bit.
     */
    inline void set_SIE_STATUS_RX_TIMEOUT()
    {
        SIE_STATUS |= 1u << 27u;
    }

    /**
     * Clear SIE_STATUS's RX_TIMEOUT bit.
     */
    inline void clear_SIE_STATUS_RX_TIMEOUT()
    {
        SIE_STATUS &= ~(1u << 27u);
    }

    /**
     * Toggle SIE_STATUS's RX_TIMEOUT bit.
     */
    inline void toggle_SIE_STATUS_RX_TIMEOUT()
    {
        SIE_STATUS ^= 1u << 27u;
    }

    /**
     * Get SIE_STATUS's NAK_REC bit.
     */
    bool get_SIE_STATUS_NAK_REC()
    {
        return SIE_STATUS & (1u << 28u);
    }

    /**
     * Set SIE_STATUS's NAK_REC bit.
     */
    inline void set_SIE_STATUS_NAK_REC()
    {
        SIE_STATUS |= 1u << 28u;
    }

    /**
     * Clear SIE_STATUS's NAK_REC bit.
     */
    inline void clear_SIE_STATUS_NAK_REC()
    {
        SIE_STATUS &= ~(1u << 28u);
    }

    /**
     * Toggle SIE_STATUS's NAK_REC bit.
     */
    inline void toggle_SIE_STATUS_NAK_REC()
    {
        SIE_STATUS ^= 1u << 28u;
    }

    /**
     * Get SIE_STATUS's STALL_REC bit.
     */
    bool get_SIE_STATUS_STALL_REC()
    {
        return SIE_STATUS & (1u << 29u);
    }

    /**
     * Set SIE_STATUS's STALL_REC bit.
     */
    inline void set_SIE_STATUS_STALL_REC()
    {
        SIE_STATUS |= 1u << 29u;
    }

    /**
     * Clear SIE_STATUS's STALL_REC bit.
     */
    inline void clear_SIE_STATUS_STALL_REC()
    {
        SIE_STATUS &= ~(1u << 29u);
    }

    /**
     * Toggle SIE_STATUS's STALL_REC bit.
     */
    inline void toggle_SIE_STATUS_STALL_REC()
    {
        SIE_STATUS ^= 1u << 29u;
    }

    /**
     * Get SIE_STATUS's ACK_REC bit.
     */
    bool get_SIE_STATUS_ACK_REC()
    {
        return SIE_STATUS & (1u << 30u);
    }

    /**
     * Set SIE_STATUS's ACK_REC bit.
     */
    inline void set_SIE_STATUS_ACK_REC()
    {
        SIE_STATUS |= 1u << 30u;
    }

    /**
     * Clear SIE_STATUS's ACK_REC bit.
     */
    inline void clear_SIE_STATUS_ACK_REC()
    {
        SIE_STATUS &= ~(1u << 30u);
    }

    /**
     * Toggle SIE_STATUS's ACK_REC bit.
     */
    inline void toggle_SIE_STATUS_ACK_REC()
    {
        SIE_STATUS ^= 1u << 30u;
    }

    /**
     * Get SIE_STATUS's DATA_SEQ_ERROR bit.
     */
    bool get_SIE_STATUS_DATA_SEQ_ERROR()
    {
        return SIE_STATUS & (1u << 31u);
    }

    /**
     * Set SIE_STATUS's DATA_SEQ_ERROR bit.
     */
    inline void set_SIE_STATUS_DATA_SEQ_ERROR()
    {
        SIE_STATUS |= 1u << 31u;
    }

    /**
     * Clear SIE_STATUS's DATA_SEQ_ERROR bit.
     */
    inline void clear_SIE_STATUS_DATA_SEQ_ERROR()
    {
        SIE_STATUS &= ~(1u << 31u);
    }

    /**
     * Toggle SIE_STATUS's DATA_SEQ_ERROR bit.
     */
    inline void toggle_SIE_STATUS_DATA_SEQ_ERROR()
    {
        SIE_STATUS ^= 1u << 31u;
    }

    /**
     * Get INT_EP_CTRL's INT_EP_ACTIVE field.
     */
    uint16_t get_INT_EP_CTRL_INT_EP_ACTIVE()
    {
        return (INT_EP_CTRL >> 1u) & 0b111111111111111u;
    }

    /**
     * Set INT_EP_CTRL's INT_EP_ACTIVE field.
     */
    inline void set_INT_EP_CTRL_INT_EP_ACTIVE(uint16_t value)
    {
        uint32_t curr = INT_EP_CTRL;

        curr &= ~(0b111111111111111u << 1u);
        curr |= (value & 0b111111111111111u) << 1u;

        INT_EP_CTRL = curr;
    }

    /**
     * Get BUFF_STATUS's EP0_IN bit.
     */
    bool get_BUFF_STATUS_EP0_IN()
    {
        return BUFF_STATUS & (1u << 0u);
    }

    /**
     * Set BUFF_STATUS's EP0_IN bit.
     */
    inline void set_BUFF_STATUS_EP0_IN()
    {
        BUFF_STATUS |= 1u << 0u;
    }

    /**
     * Clear BUFF_STATUS's EP0_IN bit.
     */
    inline void clear_BUFF_STATUS_EP0_IN()
    {
        BUFF_STATUS &= ~(1u << 0u);
    }

    /**
     * Toggle BUFF_STATUS's EP0_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP0_IN()
    {
        BUFF_STATUS ^= 1u << 0u;
    }

    /**
     * Get BUFF_STATUS's EP0_OUT bit.
     */
    bool get_BUFF_STATUS_EP0_OUT()
    {
        return BUFF_STATUS & (1u << 1u);
    }

    /**
     * Set BUFF_STATUS's EP0_OUT bit.
     */
    inline void set_BUFF_STATUS_EP0_OUT()
    {
        BUFF_STATUS |= 1u << 1u;
    }

    /**
     * Clear BUFF_STATUS's EP0_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP0_OUT()
    {
        BUFF_STATUS &= ~(1u << 1u);
    }

    /**
     * Toggle BUFF_STATUS's EP0_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP0_OUT()
    {
        BUFF_STATUS ^= 1u << 1u;
    }

    /**
     * Get BUFF_STATUS's EP1_IN bit.
     */
    bool get_BUFF_STATUS_EP1_IN()
    {
        return BUFF_STATUS & (1u << 2u);
    }

    /**
     * Set BUFF_STATUS's EP1_IN bit.
     */
    inline void set_BUFF_STATUS_EP1_IN()
    {
        BUFF_STATUS |= 1u << 2u;
    }

    /**
     * Clear BUFF_STATUS's EP1_IN bit.
     */
    inline void clear_BUFF_STATUS_EP1_IN()
    {
        BUFF_STATUS &= ~(1u << 2u);
    }

    /**
     * Toggle BUFF_STATUS's EP1_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP1_IN()
    {
        BUFF_STATUS ^= 1u << 2u;
    }

    /**
     * Get BUFF_STATUS's EP1_OUT bit.
     */
    bool get_BUFF_STATUS_EP1_OUT()
    {
        return BUFF_STATUS & (1u << 3u);
    }

    /**
     * Set BUFF_STATUS's EP1_OUT bit.
     */
    inline void set_BUFF_STATUS_EP1_OUT()
    {
        BUFF_STATUS |= 1u << 3u;
    }

    /**
     * Clear BUFF_STATUS's EP1_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP1_OUT()
    {
        BUFF_STATUS &= ~(1u << 3u);
    }

    /**
     * Toggle BUFF_STATUS's EP1_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP1_OUT()
    {
        BUFF_STATUS ^= 1u << 3u;
    }

    /**
     * Get BUFF_STATUS's EP2_IN bit.
     */
    bool get_BUFF_STATUS_EP2_IN()
    {
        return BUFF_STATUS & (1u << 4u);
    }

    /**
     * Set BUFF_STATUS's EP2_IN bit.
     */
    inline void set_BUFF_STATUS_EP2_IN()
    {
        BUFF_STATUS |= 1u << 4u;
    }

    /**
     * Clear BUFF_STATUS's EP2_IN bit.
     */
    inline void clear_BUFF_STATUS_EP2_IN()
    {
        BUFF_STATUS &= ~(1u << 4u);
    }

    /**
     * Toggle BUFF_STATUS's EP2_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP2_IN()
    {
        BUFF_STATUS ^= 1u << 4u;
    }

    /**
     * Get BUFF_STATUS's EP2_OUT bit.
     */
    bool get_BUFF_STATUS_EP2_OUT()
    {
        return BUFF_STATUS & (1u << 5u);
    }

    /**
     * Set BUFF_STATUS's EP2_OUT bit.
     */
    inline void set_BUFF_STATUS_EP2_OUT()
    {
        BUFF_STATUS |= 1u << 5u;
    }

    /**
     * Clear BUFF_STATUS's EP2_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP2_OUT()
    {
        BUFF_STATUS &= ~(1u << 5u);
    }

    /**
     * Toggle BUFF_STATUS's EP2_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP2_OUT()
    {
        BUFF_STATUS ^= 1u << 5u;
    }

    /**
     * Get BUFF_STATUS's EP3_IN bit.
     */
    bool get_BUFF_STATUS_EP3_IN()
    {
        return BUFF_STATUS & (1u << 6u);
    }

    /**
     * Set BUFF_STATUS's EP3_IN bit.
     */
    inline void set_BUFF_STATUS_EP3_IN()
    {
        BUFF_STATUS |= 1u << 6u;
    }

    /**
     * Clear BUFF_STATUS's EP3_IN bit.
     */
    inline void clear_BUFF_STATUS_EP3_IN()
    {
        BUFF_STATUS &= ~(1u << 6u);
    }

    /**
     * Toggle BUFF_STATUS's EP3_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP3_IN()
    {
        BUFF_STATUS ^= 1u << 6u;
    }

    /**
     * Get BUFF_STATUS's EP3_OUT bit.
     */
    bool get_BUFF_STATUS_EP3_OUT()
    {
        return BUFF_STATUS & (1u << 7u);
    }

    /**
     * Set BUFF_STATUS's EP3_OUT bit.
     */
    inline void set_BUFF_STATUS_EP3_OUT()
    {
        BUFF_STATUS |= 1u << 7u;
    }

    /**
     * Clear BUFF_STATUS's EP3_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP3_OUT()
    {
        BUFF_STATUS &= ~(1u << 7u);
    }

    /**
     * Toggle BUFF_STATUS's EP3_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP3_OUT()
    {
        BUFF_STATUS ^= 1u << 7u;
    }

    /**
     * Get BUFF_STATUS's EP4_IN bit.
     */
    bool get_BUFF_STATUS_EP4_IN()
    {
        return BUFF_STATUS & (1u << 8u);
    }

    /**
     * Set BUFF_STATUS's EP4_IN bit.
     */
    inline void set_BUFF_STATUS_EP4_IN()
    {
        BUFF_STATUS |= 1u << 8u;
    }

    /**
     * Clear BUFF_STATUS's EP4_IN bit.
     */
    inline void clear_BUFF_STATUS_EP4_IN()
    {
        BUFF_STATUS &= ~(1u << 8u);
    }

    /**
     * Toggle BUFF_STATUS's EP4_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP4_IN()
    {
        BUFF_STATUS ^= 1u << 8u;
    }

    /**
     * Get BUFF_STATUS's EP4_OUT bit.
     */
    bool get_BUFF_STATUS_EP4_OUT()
    {
        return BUFF_STATUS & (1u << 9u);
    }

    /**
     * Set BUFF_STATUS's EP4_OUT bit.
     */
    inline void set_BUFF_STATUS_EP4_OUT()
    {
        BUFF_STATUS |= 1u << 9u;
    }

    /**
     * Clear BUFF_STATUS's EP4_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP4_OUT()
    {
        BUFF_STATUS &= ~(1u << 9u);
    }

    /**
     * Toggle BUFF_STATUS's EP4_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP4_OUT()
    {
        BUFF_STATUS ^= 1u << 9u;
    }

    /**
     * Get BUFF_STATUS's EP5_IN bit.
     */
    bool get_BUFF_STATUS_EP5_IN()
    {
        return BUFF_STATUS & (1u << 10u);
    }

    /**
     * Set BUFF_STATUS's EP5_IN bit.
     */
    inline void set_BUFF_STATUS_EP5_IN()
    {
        BUFF_STATUS |= 1u << 10u;
    }

    /**
     * Clear BUFF_STATUS's EP5_IN bit.
     */
    inline void clear_BUFF_STATUS_EP5_IN()
    {
        BUFF_STATUS &= ~(1u << 10u);
    }

    /**
     * Toggle BUFF_STATUS's EP5_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP5_IN()
    {
        BUFF_STATUS ^= 1u << 10u;
    }

    /**
     * Get BUFF_STATUS's EP5_OUT bit.
     */
    bool get_BUFF_STATUS_EP5_OUT()
    {
        return BUFF_STATUS & (1u << 11u);
    }

    /**
     * Set BUFF_STATUS's EP5_OUT bit.
     */
    inline void set_BUFF_STATUS_EP5_OUT()
    {
        BUFF_STATUS |= 1u << 11u;
    }

    /**
     * Clear BUFF_STATUS's EP5_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP5_OUT()
    {
        BUFF_STATUS &= ~(1u << 11u);
    }

    /**
     * Toggle BUFF_STATUS's EP5_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP5_OUT()
    {
        BUFF_STATUS ^= 1u << 11u;
    }

    /**
     * Get BUFF_STATUS's EP6_IN bit.
     */
    bool get_BUFF_STATUS_EP6_IN()
    {
        return BUFF_STATUS & (1u << 12u);
    }

    /**
     * Set BUFF_STATUS's EP6_IN bit.
     */
    inline void set_BUFF_STATUS_EP6_IN()
    {
        BUFF_STATUS |= 1u << 12u;
    }

    /**
     * Clear BUFF_STATUS's EP6_IN bit.
     */
    inline void clear_BUFF_STATUS_EP6_IN()
    {
        BUFF_STATUS &= ~(1u << 12u);
    }

    /**
     * Toggle BUFF_STATUS's EP6_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP6_IN()
    {
        BUFF_STATUS ^= 1u << 12u;
    }

    /**
     * Get BUFF_STATUS's EP6_OUT bit.
     */
    bool get_BUFF_STATUS_EP6_OUT()
    {
        return BUFF_STATUS & (1u << 13u);
    }

    /**
     * Set BUFF_STATUS's EP6_OUT bit.
     */
    inline void set_BUFF_STATUS_EP6_OUT()
    {
        BUFF_STATUS |= 1u << 13u;
    }

    /**
     * Clear BUFF_STATUS's EP6_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP6_OUT()
    {
        BUFF_STATUS &= ~(1u << 13u);
    }

    /**
     * Toggle BUFF_STATUS's EP6_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP6_OUT()
    {
        BUFF_STATUS ^= 1u << 13u;
    }

    /**
     * Get BUFF_STATUS's EP7_IN bit.
     */
    bool get_BUFF_STATUS_EP7_IN()
    {
        return BUFF_STATUS & (1u << 14u);
    }

    /**
     * Set BUFF_STATUS's EP7_IN bit.
     */
    inline void set_BUFF_STATUS_EP7_IN()
    {
        BUFF_STATUS |= 1u << 14u;
    }

    /**
     * Clear BUFF_STATUS's EP7_IN bit.
     */
    inline void clear_BUFF_STATUS_EP7_IN()
    {
        BUFF_STATUS &= ~(1u << 14u);
    }

    /**
     * Toggle BUFF_STATUS's EP7_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP7_IN()
    {
        BUFF_STATUS ^= 1u << 14u;
    }

    /**
     * Get BUFF_STATUS's EP7_OUT bit.
     */
    bool get_BUFF_STATUS_EP7_OUT()
    {
        return BUFF_STATUS & (1u << 15u);
    }

    /**
     * Set BUFF_STATUS's EP7_OUT bit.
     */
    inline void set_BUFF_STATUS_EP7_OUT()
    {
        BUFF_STATUS |= 1u << 15u;
    }

    /**
     * Clear BUFF_STATUS's EP7_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP7_OUT()
    {
        BUFF_STATUS &= ~(1u << 15u);
    }

    /**
     * Toggle BUFF_STATUS's EP7_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP7_OUT()
    {
        BUFF_STATUS ^= 1u << 15u;
    }

    /**
     * Get BUFF_STATUS's EP8_IN bit.
     */
    bool get_BUFF_STATUS_EP8_IN()
    {
        return BUFF_STATUS & (1u << 16u);
    }

    /**
     * Set BUFF_STATUS's EP8_IN bit.
     */
    inline void set_BUFF_STATUS_EP8_IN()
    {
        BUFF_STATUS |= 1u << 16u;
    }

    /**
     * Clear BUFF_STATUS's EP8_IN bit.
     */
    inline void clear_BUFF_STATUS_EP8_IN()
    {
        BUFF_STATUS &= ~(1u << 16u);
    }

    /**
     * Toggle BUFF_STATUS's EP8_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP8_IN()
    {
        BUFF_STATUS ^= 1u << 16u;
    }

    /**
     * Get BUFF_STATUS's EP8_OUT bit.
     */
    bool get_BUFF_STATUS_EP8_OUT()
    {
        return BUFF_STATUS & (1u << 17u);
    }

    /**
     * Set BUFF_STATUS's EP8_OUT bit.
     */
    inline void set_BUFF_STATUS_EP8_OUT()
    {
        BUFF_STATUS |= 1u << 17u;
    }

    /**
     * Clear BUFF_STATUS's EP8_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP8_OUT()
    {
        BUFF_STATUS &= ~(1u << 17u);
    }

    /**
     * Toggle BUFF_STATUS's EP8_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP8_OUT()
    {
        BUFF_STATUS ^= 1u << 17u;
    }

    /**
     * Get BUFF_STATUS's EP9_IN bit.
     */
    bool get_BUFF_STATUS_EP9_IN()
    {
        return BUFF_STATUS & (1u << 18u);
    }

    /**
     * Set BUFF_STATUS's EP9_IN bit.
     */
    inline void set_BUFF_STATUS_EP9_IN()
    {
        BUFF_STATUS |= 1u << 18u;
    }

    /**
     * Clear BUFF_STATUS's EP9_IN bit.
     */
    inline void clear_BUFF_STATUS_EP9_IN()
    {
        BUFF_STATUS &= ~(1u << 18u);
    }

    /**
     * Toggle BUFF_STATUS's EP9_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP9_IN()
    {
        BUFF_STATUS ^= 1u << 18u;
    }

    /**
     * Get BUFF_STATUS's EP9_OUT bit.
     */
    bool get_BUFF_STATUS_EP9_OUT()
    {
        return BUFF_STATUS & (1u << 19u);
    }

    /**
     * Set BUFF_STATUS's EP9_OUT bit.
     */
    inline void set_BUFF_STATUS_EP9_OUT()
    {
        BUFF_STATUS |= 1u << 19u;
    }

    /**
     * Clear BUFF_STATUS's EP9_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP9_OUT()
    {
        BUFF_STATUS &= ~(1u << 19u);
    }

    /**
     * Toggle BUFF_STATUS's EP9_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP9_OUT()
    {
        BUFF_STATUS ^= 1u << 19u;
    }

    /**
     * Get BUFF_STATUS's EP10_IN bit.
     */
    bool get_BUFF_STATUS_EP10_IN()
    {
        return BUFF_STATUS & (1u << 20u);
    }

    /**
     * Set BUFF_STATUS's EP10_IN bit.
     */
    inline void set_BUFF_STATUS_EP10_IN()
    {
        BUFF_STATUS |= 1u << 20u;
    }

    /**
     * Clear BUFF_STATUS's EP10_IN bit.
     */
    inline void clear_BUFF_STATUS_EP10_IN()
    {
        BUFF_STATUS &= ~(1u << 20u);
    }

    /**
     * Toggle BUFF_STATUS's EP10_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP10_IN()
    {
        BUFF_STATUS ^= 1u << 20u;
    }

    /**
     * Get BUFF_STATUS's EP10_OUT bit.
     */
    bool get_BUFF_STATUS_EP10_OUT()
    {
        return BUFF_STATUS & (1u << 21u);
    }

    /**
     * Set BUFF_STATUS's EP10_OUT bit.
     */
    inline void set_BUFF_STATUS_EP10_OUT()
    {
        BUFF_STATUS |= 1u << 21u;
    }

    /**
     * Clear BUFF_STATUS's EP10_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP10_OUT()
    {
        BUFF_STATUS &= ~(1u << 21u);
    }

    /**
     * Toggle BUFF_STATUS's EP10_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP10_OUT()
    {
        BUFF_STATUS ^= 1u << 21u;
    }

    /**
     * Get BUFF_STATUS's EP11_IN bit.
     */
    bool get_BUFF_STATUS_EP11_IN()
    {
        return BUFF_STATUS & (1u << 22u);
    }

    /**
     * Set BUFF_STATUS's EP11_IN bit.
     */
    inline void set_BUFF_STATUS_EP11_IN()
    {
        BUFF_STATUS |= 1u << 22u;
    }

    /**
     * Clear BUFF_STATUS's EP11_IN bit.
     */
    inline void clear_BUFF_STATUS_EP11_IN()
    {
        BUFF_STATUS &= ~(1u << 22u);
    }

    /**
     * Toggle BUFF_STATUS's EP11_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP11_IN()
    {
        BUFF_STATUS ^= 1u << 22u;
    }

    /**
     * Get BUFF_STATUS's EP11_OUT bit.
     */
    bool get_BUFF_STATUS_EP11_OUT()
    {
        return BUFF_STATUS & (1u << 23u);
    }

    /**
     * Set BUFF_STATUS's EP11_OUT bit.
     */
    inline void set_BUFF_STATUS_EP11_OUT()
    {
        BUFF_STATUS |= 1u << 23u;
    }

    /**
     * Clear BUFF_STATUS's EP11_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP11_OUT()
    {
        BUFF_STATUS &= ~(1u << 23u);
    }

    /**
     * Toggle BUFF_STATUS's EP11_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP11_OUT()
    {
        BUFF_STATUS ^= 1u << 23u;
    }

    /**
     * Get BUFF_STATUS's EP12_IN bit.
     */
    bool get_BUFF_STATUS_EP12_IN()
    {
        return BUFF_STATUS & (1u << 24u);
    }

    /**
     * Set BUFF_STATUS's EP12_IN bit.
     */
    inline void set_BUFF_STATUS_EP12_IN()
    {
        BUFF_STATUS |= 1u << 24u;
    }

    /**
     * Clear BUFF_STATUS's EP12_IN bit.
     */
    inline void clear_BUFF_STATUS_EP12_IN()
    {
        BUFF_STATUS &= ~(1u << 24u);
    }

    /**
     * Toggle BUFF_STATUS's EP12_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP12_IN()
    {
        BUFF_STATUS ^= 1u << 24u;
    }

    /**
     * Get BUFF_STATUS's EP12_OUT bit.
     */
    bool get_BUFF_STATUS_EP12_OUT()
    {
        return BUFF_STATUS & (1u << 25u);
    }

    /**
     * Set BUFF_STATUS's EP12_OUT bit.
     */
    inline void set_BUFF_STATUS_EP12_OUT()
    {
        BUFF_STATUS |= 1u << 25u;
    }

    /**
     * Clear BUFF_STATUS's EP12_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP12_OUT()
    {
        BUFF_STATUS &= ~(1u << 25u);
    }

    /**
     * Toggle BUFF_STATUS's EP12_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP12_OUT()
    {
        BUFF_STATUS ^= 1u << 25u;
    }

    /**
     * Get BUFF_STATUS's EP13_IN bit.
     */
    bool get_BUFF_STATUS_EP13_IN()
    {
        return BUFF_STATUS & (1u << 26u);
    }

    /**
     * Set BUFF_STATUS's EP13_IN bit.
     */
    inline void set_BUFF_STATUS_EP13_IN()
    {
        BUFF_STATUS |= 1u << 26u;
    }

    /**
     * Clear BUFF_STATUS's EP13_IN bit.
     */
    inline void clear_BUFF_STATUS_EP13_IN()
    {
        BUFF_STATUS &= ~(1u << 26u);
    }

    /**
     * Toggle BUFF_STATUS's EP13_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP13_IN()
    {
        BUFF_STATUS ^= 1u << 26u;
    }

    /**
     * Get BUFF_STATUS's EP13_OUT bit.
     */
    bool get_BUFF_STATUS_EP13_OUT()
    {
        return BUFF_STATUS & (1u << 27u);
    }

    /**
     * Set BUFF_STATUS's EP13_OUT bit.
     */
    inline void set_BUFF_STATUS_EP13_OUT()
    {
        BUFF_STATUS |= 1u << 27u;
    }

    /**
     * Clear BUFF_STATUS's EP13_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP13_OUT()
    {
        BUFF_STATUS &= ~(1u << 27u);
    }

    /**
     * Toggle BUFF_STATUS's EP13_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP13_OUT()
    {
        BUFF_STATUS ^= 1u << 27u;
    }

    /**
     * Get BUFF_STATUS's EP14_IN bit.
     */
    bool get_BUFF_STATUS_EP14_IN()
    {
        return BUFF_STATUS & (1u << 28u);
    }

    /**
     * Set BUFF_STATUS's EP14_IN bit.
     */
    inline void set_BUFF_STATUS_EP14_IN()
    {
        BUFF_STATUS |= 1u << 28u;
    }

    /**
     * Clear BUFF_STATUS's EP14_IN bit.
     */
    inline void clear_BUFF_STATUS_EP14_IN()
    {
        BUFF_STATUS &= ~(1u << 28u);
    }

    /**
     * Toggle BUFF_STATUS's EP14_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP14_IN()
    {
        BUFF_STATUS ^= 1u << 28u;
    }

    /**
     * Get BUFF_STATUS's EP14_OUT bit.
     */
    bool get_BUFF_STATUS_EP14_OUT()
    {
        return BUFF_STATUS & (1u << 29u);
    }

    /**
     * Set BUFF_STATUS's EP14_OUT bit.
     */
    inline void set_BUFF_STATUS_EP14_OUT()
    {
        BUFF_STATUS |= 1u << 29u;
    }

    /**
     * Clear BUFF_STATUS's EP14_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP14_OUT()
    {
        BUFF_STATUS &= ~(1u << 29u);
    }

    /**
     * Toggle BUFF_STATUS's EP14_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP14_OUT()
    {
        BUFF_STATUS ^= 1u << 29u;
    }

    /**
     * Get BUFF_STATUS's EP15_IN bit.
     */
    bool get_BUFF_STATUS_EP15_IN()
    {
        return BUFF_STATUS & (1u << 30u);
    }

    /**
     * Set BUFF_STATUS's EP15_IN bit.
     */
    inline void set_BUFF_STATUS_EP15_IN()
    {
        BUFF_STATUS |= 1u << 30u;
    }

    /**
     * Clear BUFF_STATUS's EP15_IN bit.
     */
    inline void clear_BUFF_STATUS_EP15_IN()
    {
        BUFF_STATUS &= ~(1u << 30u);
    }

    /**
     * Toggle BUFF_STATUS's EP15_IN bit.
     */
    inline void toggle_BUFF_STATUS_EP15_IN()
    {
        BUFF_STATUS ^= 1u << 30u;
    }

    /**
     * Get BUFF_STATUS's EP15_OUT bit.
     */
    bool get_BUFF_STATUS_EP15_OUT()
    {
        return BUFF_STATUS & (1u << 31u);
    }

    /**
     * Set BUFF_STATUS's EP15_OUT bit.
     */
    inline void set_BUFF_STATUS_EP15_OUT()
    {
        BUFF_STATUS |= 1u << 31u;
    }

    /**
     * Clear BUFF_STATUS's EP15_OUT bit.
     */
    inline void clear_BUFF_STATUS_EP15_OUT()
    {
        BUFF_STATUS &= ~(1u << 31u);
    }

    /**
     * Toggle BUFF_STATUS's EP15_OUT bit.
     */
    inline void toggle_BUFF_STATUS_EP15_OUT()
    {
        BUFF_STATUS ^= 1u << 31u;
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP0_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP0_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 0u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP0_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP0_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 1u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP1_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP1_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 2u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP1_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP1_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 3u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP2_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP2_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 4u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP2_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP2_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 5u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP3_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP3_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 6u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP3_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP3_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 7u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP4_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP4_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 8u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP4_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP4_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 9u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP5_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP5_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 10u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP5_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP5_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 11u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP6_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP6_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 12u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP6_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP6_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 13u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP7_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP7_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 14u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP7_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP7_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 15u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP8_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP8_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 16u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP8_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP8_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 17u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP9_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP9_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 18u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP9_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP9_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 19u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP10_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP10_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 20u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP10_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP10_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 21u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP11_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP11_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 22u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP11_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP11_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 23u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP12_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP12_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 24u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP12_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP12_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 25u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP13_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP13_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 26u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP13_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP13_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 27u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP14_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP14_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 28u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP14_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP14_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 29u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP15_IN bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP15_IN()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 30u);
    }

    /**
     * Get BUFF_CPU_SHOULD_HANDLE's EP15_OUT bit.
     */
    bool get_BUFF_CPU_SHOULD_HANDLE_EP15_OUT()
    {
        return BUFF_CPU_SHOULD_HANDLE & (1u << 31u);
    }

    /**
     * Get EP_ABORT's EP0_IN bit.
     */
    bool get_EP_ABORT_EP0_IN()
    {
        return EP_ABORT & (1u << 0u);
    }

    /**
     * Set EP_ABORT's EP0_IN bit.
     */
    inline void set_EP_ABORT_EP0_IN()
    {
        EP_ABORT |= 1u << 0u;
    }

    /**
     * Clear EP_ABORT's EP0_IN bit.
     */
    inline void clear_EP_ABORT_EP0_IN()
    {
        EP_ABORT &= ~(1u << 0u);
    }

    /**
     * Toggle EP_ABORT's EP0_IN bit.
     */
    inline void toggle_EP_ABORT_EP0_IN()
    {
        EP_ABORT ^= 1u << 0u;
    }

    /**
     * Get EP_ABORT's EP0_OUT bit.
     */
    bool get_EP_ABORT_EP0_OUT()
    {
        return EP_ABORT & (1u << 1u);
    }

    /**
     * Set EP_ABORT's EP0_OUT bit.
     */
    inline void set_EP_ABORT_EP0_OUT()
    {
        EP_ABORT |= 1u << 1u;
    }

    /**
     * Clear EP_ABORT's EP0_OUT bit.
     */
    inline void clear_EP_ABORT_EP0_OUT()
    {
        EP_ABORT &= ~(1u << 1u);
    }

    /**
     * Toggle EP_ABORT's EP0_OUT bit.
     */
    inline void toggle_EP_ABORT_EP0_OUT()
    {
        EP_ABORT ^= 1u << 1u;
    }

    /**
     * Get EP_ABORT's EP1_IN bit.
     */
    bool get_EP_ABORT_EP1_IN()
    {
        return EP_ABORT & (1u << 2u);
    }

    /**
     * Set EP_ABORT's EP1_IN bit.
     */
    inline void set_EP_ABORT_EP1_IN()
    {
        EP_ABORT |= 1u << 2u;
    }

    /**
     * Clear EP_ABORT's EP1_IN bit.
     */
    inline void clear_EP_ABORT_EP1_IN()
    {
        EP_ABORT &= ~(1u << 2u);
    }

    /**
     * Toggle EP_ABORT's EP1_IN bit.
     */
    inline void toggle_EP_ABORT_EP1_IN()
    {
        EP_ABORT ^= 1u << 2u;
    }

    /**
     * Get EP_ABORT's EP1_OUT bit.
     */
    bool get_EP_ABORT_EP1_OUT()
    {
        return EP_ABORT & (1u << 3u);
    }

    /**
     * Set EP_ABORT's EP1_OUT bit.
     */
    inline void set_EP_ABORT_EP1_OUT()
    {
        EP_ABORT |= 1u << 3u;
    }

    /**
     * Clear EP_ABORT's EP1_OUT bit.
     */
    inline void clear_EP_ABORT_EP1_OUT()
    {
        EP_ABORT &= ~(1u << 3u);
    }

    /**
     * Toggle EP_ABORT's EP1_OUT bit.
     */
    inline void toggle_EP_ABORT_EP1_OUT()
    {
        EP_ABORT ^= 1u << 3u;
    }

    /**
     * Get EP_ABORT's EP2_IN bit.
     */
    bool get_EP_ABORT_EP2_IN()
    {
        return EP_ABORT & (1u << 4u);
    }

    /**
     * Set EP_ABORT's EP2_IN bit.
     */
    inline void set_EP_ABORT_EP2_IN()
    {
        EP_ABORT |= 1u << 4u;
    }

    /**
     * Clear EP_ABORT's EP2_IN bit.
     */
    inline void clear_EP_ABORT_EP2_IN()
    {
        EP_ABORT &= ~(1u << 4u);
    }

    /**
     * Toggle EP_ABORT's EP2_IN bit.
     */
    inline void toggle_EP_ABORT_EP2_IN()
    {
        EP_ABORT ^= 1u << 4u;
    }

    /**
     * Get EP_ABORT's EP2_OUT bit.
     */
    bool get_EP_ABORT_EP2_OUT()
    {
        return EP_ABORT & (1u << 5u);
    }

    /**
     * Set EP_ABORT's EP2_OUT bit.
     */
    inline void set_EP_ABORT_EP2_OUT()
    {
        EP_ABORT |= 1u << 5u;
    }

    /**
     * Clear EP_ABORT's EP2_OUT bit.
     */
    inline void clear_EP_ABORT_EP2_OUT()
    {
        EP_ABORT &= ~(1u << 5u);
    }

    /**
     * Toggle EP_ABORT's EP2_OUT bit.
     */
    inline void toggle_EP_ABORT_EP2_OUT()
    {
        EP_ABORT ^= 1u << 5u;
    }

    /**
     * Get EP_ABORT's EP3_IN bit.
     */
    bool get_EP_ABORT_EP3_IN()
    {
        return EP_ABORT & (1u << 6u);
    }

    /**
     * Set EP_ABORT's EP3_IN bit.
     */
    inline void set_EP_ABORT_EP3_IN()
    {
        EP_ABORT |= 1u << 6u;
    }

    /**
     * Clear EP_ABORT's EP3_IN bit.
     */
    inline void clear_EP_ABORT_EP3_IN()
    {
        EP_ABORT &= ~(1u << 6u);
    }

    /**
     * Toggle EP_ABORT's EP3_IN bit.
     */
    inline void toggle_EP_ABORT_EP3_IN()
    {
        EP_ABORT ^= 1u << 6u;
    }

    /**
     * Get EP_ABORT's EP3_OUT bit.
     */
    bool get_EP_ABORT_EP3_OUT()
    {
        return EP_ABORT & (1u << 7u);
    }

    /**
     * Set EP_ABORT's EP3_OUT bit.
     */
    inline void set_EP_ABORT_EP3_OUT()
    {
        EP_ABORT |= 1u << 7u;
    }

    /**
     * Clear EP_ABORT's EP3_OUT bit.
     */
    inline void clear_EP_ABORT_EP3_OUT()
    {
        EP_ABORT &= ~(1u << 7u);
    }

    /**
     * Toggle EP_ABORT's EP3_OUT bit.
     */
    inline void toggle_EP_ABORT_EP3_OUT()
    {
        EP_ABORT ^= 1u << 7u;
    }

    /**
     * Get EP_ABORT's EP4_IN bit.
     */
    bool get_EP_ABORT_EP4_IN()
    {
        return EP_ABORT & (1u << 8u);
    }

    /**
     * Set EP_ABORT's EP4_IN bit.
     */
    inline void set_EP_ABORT_EP4_IN()
    {
        EP_ABORT |= 1u << 8u;
    }

    /**
     * Clear EP_ABORT's EP4_IN bit.
     */
    inline void clear_EP_ABORT_EP4_IN()
    {
        EP_ABORT &= ~(1u << 8u);
    }

    /**
     * Toggle EP_ABORT's EP4_IN bit.
     */
    inline void toggle_EP_ABORT_EP4_IN()
    {
        EP_ABORT ^= 1u << 8u;
    }

    /**
     * Get EP_ABORT's EP4_OUT bit.
     */
    bool get_EP_ABORT_EP4_OUT()
    {
        return EP_ABORT & (1u << 9u);
    }

    /**
     * Set EP_ABORT's EP4_OUT bit.
     */
    inline void set_EP_ABORT_EP4_OUT()
    {
        EP_ABORT |= 1u << 9u;
    }

    /**
     * Clear EP_ABORT's EP4_OUT bit.
     */
    inline void clear_EP_ABORT_EP4_OUT()
    {
        EP_ABORT &= ~(1u << 9u);
    }

    /**
     * Toggle EP_ABORT's EP4_OUT bit.
     */
    inline void toggle_EP_ABORT_EP4_OUT()
    {
        EP_ABORT ^= 1u << 9u;
    }

    /**
     * Get EP_ABORT's EP5_IN bit.
     */
    bool get_EP_ABORT_EP5_IN()
    {
        return EP_ABORT & (1u << 10u);
    }

    /**
     * Set EP_ABORT's EP5_IN bit.
     */
    inline void set_EP_ABORT_EP5_IN()
    {
        EP_ABORT |= 1u << 10u;
    }

    /**
     * Clear EP_ABORT's EP5_IN bit.
     */
    inline void clear_EP_ABORT_EP5_IN()
    {
        EP_ABORT &= ~(1u << 10u);
    }

    /**
     * Toggle EP_ABORT's EP5_IN bit.
     */
    inline void toggle_EP_ABORT_EP5_IN()
    {
        EP_ABORT ^= 1u << 10u;
    }

    /**
     * Get EP_ABORT's EP5_OUT bit.
     */
    bool get_EP_ABORT_EP5_OUT()
    {
        return EP_ABORT & (1u << 11u);
    }

    /**
     * Set EP_ABORT's EP5_OUT bit.
     */
    inline void set_EP_ABORT_EP5_OUT()
    {
        EP_ABORT |= 1u << 11u;
    }

    /**
     * Clear EP_ABORT's EP5_OUT bit.
     */
    inline void clear_EP_ABORT_EP5_OUT()
    {
        EP_ABORT &= ~(1u << 11u);
    }

    /**
     * Toggle EP_ABORT's EP5_OUT bit.
     */
    inline void toggle_EP_ABORT_EP5_OUT()
    {
        EP_ABORT ^= 1u << 11u;
    }

    /**
     * Get EP_ABORT's EP6_IN bit.
     */
    bool get_EP_ABORT_EP6_IN()
    {
        return EP_ABORT & (1u << 12u);
    }

    /**
     * Set EP_ABORT's EP6_IN bit.
     */
    inline void set_EP_ABORT_EP6_IN()
    {
        EP_ABORT |= 1u << 12u;
    }

    /**
     * Clear EP_ABORT's EP6_IN bit.
     */
    inline void clear_EP_ABORT_EP6_IN()
    {
        EP_ABORT &= ~(1u << 12u);
    }

    /**
     * Toggle EP_ABORT's EP6_IN bit.
     */
    inline void toggle_EP_ABORT_EP6_IN()
    {
        EP_ABORT ^= 1u << 12u;
    }

    /**
     * Get EP_ABORT's EP6_OUT bit.
     */
    bool get_EP_ABORT_EP6_OUT()
    {
        return EP_ABORT & (1u << 13u);
    }

    /**
     * Set EP_ABORT's EP6_OUT bit.
     */
    inline void set_EP_ABORT_EP6_OUT()
    {
        EP_ABORT |= 1u << 13u;
    }

    /**
     * Clear EP_ABORT's EP6_OUT bit.
     */
    inline void clear_EP_ABORT_EP6_OUT()
    {
        EP_ABORT &= ~(1u << 13u);
    }

    /**
     * Toggle EP_ABORT's EP6_OUT bit.
     */
    inline void toggle_EP_ABORT_EP6_OUT()
    {
        EP_ABORT ^= 1u << 13u;
    }

    /**
     * Get EP_ABORT's EP7_IN bit.
     */
    bool get_EP_ABORT_EP7_IN()
    {
        return EP_ABORT & (1u << 14u);
    }

    /**
     * Set EP_ABORT's EP7_IN bit.
     */
    inline void set_EP_ABORT_EP7_IN()
    {
        EP_ABORT |= 1u << 14u;
    }

    /**
     * Clear EP_ABORT's EP7_IN bit.
     */
    inline void clear_EP_ABORT_EP7_IN()
    {
        EP_ABORT &= ~(1u << 14u);
    }

    /**
     * Toggle EP_ABORT's EP7_IN bit.
     */
    inline void toggle_EP_ABORT_EP7_IN()
    {
        EP_ABORT ^= 1u << 14u;
    }

    /**
     * Get EP_ABORT's EP7_OUT bit.
     */
    bool get_EP_ABORT_EP7_OUT()
    {
        return EP_ABORT & (1u << 15u);
    }

    /**
     * Set EP_ABORT's EP7_OUT bit.
     */
    inline void set_EP_ABORT_EP7_OUT()
    {
        EP_ABORT |= 1u << 15u;
    }

    /**
     * Clear EP_ABORT's EP7_OUT bit.
     */
    inline void clear_EP_ABORT_EP7_OUT()
    {
        EP_ABORT &= ~(1u << 15u);
    }

    /**
     * Toggle EP_ABORT's EP7_OUT bit.
     */
    inline void toggle_EP_ABORT_EP7_OUT()
    {
        EP_ABORT ^= 1u << 15u;
    }

    /**
     * Get EP_ABORT's EP8_IN bit.
     */
    bool get_EP_ABORT_EP8_IN()
    {
        return EP_ABORT & (1u << 16u);
    }

    /**
     * Set EP_ABORT's EP8_IN bit.
     */
    inline void set_EP_ABORT_EP8_IN()
    {
        EP_ABORT |= 1u << 16u;
    }

    /**
     * Clear EP_ABORT's EP8_IN bit.
     */
    inline void clear_EP_ABORT_EP8_IN()
    {
        EP_ABORT &= ~(1u << 16u);
    }

    /**
     * Toggle EP_ABORT's EP8_IN bit.
     */
    inline void toggle_EP_ABORT_EP8_IN()
    {
        EP_ABORT ^= 1u << 16u;
    }

    /**
     * Get EP_ABORT's EP8_OUT bit.
     */
    bool get_EP_ABORT_EP8_OUT()
    {
        return EP_ABORT & (1u << 17u);
    }

    /**
     * Set EP_ABORT's EP8_OUT bit.
     */
    inline void set_EP_ABORT_EP8_OUT()
    {
        EP_ABORT |= 1u << 17u;
    }

    /**
     * Clear EP_ABORT's EP8_OUT bit.
     */
    inline void clear_EP_ABORT_EP8_OUT()
    {
        EP_ABORT &= ~(1u << 17u);
    }

    /**
     * Toggle EP_ABORT's EP8_OUT bit.
     */
    inline void toggle_EP_ABORT_EP8_OUT()
    {
        EP_ABORT ^= 1u << 17u;
    }

    /**
     * Get EP_ABORT's EP9_IN bit.
     */
    bool get_EP_ABORT_EP9_IN()
    {
        return EP_ABORT & (1u << 18u);
    }

    /**
     * Set EP_ABORT's EP9_IN bit.
     */
    inline void set_EP_ABORT_EP9_IN()
    {
        EP_ABORT |= 1u << 18u;
    }

    /**
     * Clear EP_ABORT's EP9_IN bit.
     */
    inline void clear_EP_ABORT_EP9_IN()
    {
        EP_ABORT &= ~(1u << 18u);
    }

    /**
     * Toggle EP_ABORT's EP9_IN bit.
     */
    inline void toggle_EP_ABORT_EP9_IN()
    {
        EP_ABORT ^= 1u << 18u;
    }

    /**
     * Get EP_ABORT's EP9_OUT bit.
     */
    bool get_EP_ABORT_EP9_OUT()
    {
        return EP_ABORT & (1u << 19u);
    }

    /**
     * Set EP_ABORT's EP9_OUT bit.
     */
    inline void set_EP_ABORT_EP9_OUT()
    {
        EP_ABORT |= 1u << 19u;
    }

    /**
     * Clear EP_ABORT's EP9_OUT bit.
     */
    inline void clear_EP_ABORT_EP9_OUT()
    {
        EP_ABORT &= ~(1u << 19u);
    }

    /**
     * Toggle EP_ABORT's EP9_OUT bit.
     */
    inline void toggle_EP_ABORT_EP9_OUT()
    {
        EP_ABORT ^= 1u << 19u;
    }

    /**
     * Get EP_ABORT's EP10_IN bit.
     */
    bool get_EP_ABORT_EP10_IN()
    {
        return EP_ABORT & (1u << 20u);
    }

    /**
     * Set EP_ABORT's EP10_IN bit.
     */
    inline void set_EP_ABORT_EP10_IN()
    {
        EP_ABORT |= 1u << 20u;
    }

    /**
     * Clear EP_ABORT's EP10_IN bit.
     */
    inline void clear_EP_ABORT_EP10_IN()
    {
        EP_ABORT &= ~(1u << 20u);
    }

    /**
     * Toggle EP_ABORT's EP10_IN bit.
     */
    inline void toggle_EP_ABORT_EP10_IN()
    {
        EP_ABORT ^= 1u << 20u;
    }

    /**
     * Get EP_ABORT's EP10_OUT bit.
     */
    bool get_EP_ABORT_EP10_OUT()
    {
        return EP_ABORT & (1u << 21u);
    }

    /**
     * Set EP_ABORT's EP10_OUT bit.
     */
    inline void set_EP_ABORT_EP10_OUT()
    {
        EP_ABORT |= 1u << 21u;
    }

    /**
     * Clear EP_ABORT's EP10_OUT bit.
     */
    inline void clear_EP_ABORT_EP10_OUT()
    {
        EP_ABORT &= ~(1u << 21u);
    }

    /**
     * Toggle EP_ABORT's EP10_OUT bit.
     */
    inline void toggle_EP_ABORT_EP10_OUT()
    {
        EP_ABORT ^= 1u << 21u;
    }

    /**
     * Get EP_ABORT's EP11_IN bit.
     */
    bool get_EP_ABORT_EP11_IN()
    {
        return EP_ABORT & (1u << 22u);
    }

    /**
     * Set EP_ABORT's EP11_IN bit.
     */
    inline void set_EP_ABORT_EP11_IN()
    {
        EP_ABORT |= 1u << 22u;
    }

    /**
     * Clear EP_ABORT's EP11_IN bit.
     */
    inline void clear_EP_ABORT_EP11_IN()
    {
        EP_ABORT &= ~(1u << 22u);
    }

    /**
     * Toggle EP_ABORT's EP11_IN bit.
     */
    inline void toggle_EP_ABORT_EP11_IN()
    {
        EP_ABORT ^= 1u << 22u;
    }

    /**
     * Get EP_ABORT's EP11_OUT bit.
     */
    bool get_EP_ABORT_EP11_OUT()
    {
        return EP_ABORT & (1u << 23u);
    }

    /**
     * Set EP_ABORT's EP11_OUT bit.
     */
    inline void set_EP_ABORT_EP11_OUT()
    {
        EP_ABORT |= 1u << 23u;
    }

    /**
     * Clear EP_ABORT's EP11_OUT bit.
     */
    inline void clear_EP_ABORT_EP11_OUT()
    {
        EP_ABORT &= ~(1u << 23u);
    }

    /**
     * Toggle EP_ABORT's EP11_OUT bit.
     */
    inline void toggle_EP_ABORT_EP11_OUT()
    {
        EP_ABORT ^= 1u << 23u;
    }

    /**
     * Get EP_ABORT's EP12_IN bit.
     */
    bool get_EP_ABORT_EP12_IN()
    {
        return EP_ABORT & (1u << 24u);
    }

    /**
     * Set EP_ABORT's EP12_IN bit.
     */
    inline void set_EP_ABORT_EP12_IN()
    {
        EP_ABORT |= 1u << 24u;
    }

    /**
     * Clear EP_ABORT's EP12_IN bit.
     */
    inline void clear_EP_ABORT_EP12_IN()
    {
        EP_ABORT &= ~(1u << 24u);
    }

    /**
     * Toggle EP_ABORT's EP12_IN bit.
     */
    inline void toggle_EP_ABORT_EP12_IN()
    {
        EP_ABORT ^= 1u << 24u;
    }

    /**
     * Get EP_ABORT's EP12_OUT bit.
     */
    bool get_EP_ABORT_EP12_OUT()
    {
        return EP_ABORT & (1u << 25u);
    }

    /**
     * Set EP_ABORT's EP12_OUT bit.
     */
    inline void set_EP_ABORT_EP12_OUT()
    {
        EP_ABORT |= 1u << 25u;
    }

    /**
     * Clear EP_ABORT's EP12_OUT bit.
     */
    inline void clear_EP_ABORT_EP12_OUT()
    {
        EP_ABORT &= ~(1u << 25u);
    }

    /**
     * Toggle EP_ABORT's EP12_OUT bit.
     */
    inline void toggle_EP_ABORT_EP12_OUT()
    {
        EP_ABORT ^= 1u << 25u;
    }

    /**
     * Get EP_ABORT's EP13_IN bit.
     */
    bool get_EP_ABORT_EP13_IN()
    {
        return EP_ABORT & (1u << 26u);
    }

    /**
     * Set EP_ABORT's EP13_IN bit.
     */
    inline void set_EP_ABORT_EP13_IN()
    {
        EP_ABORT |= 1u << 26u;
    }

    /**
     * Clear EP_ABORT's EP13_IN bit.
     */
    inline void clear_EP_ABORT_EP13_IN()
    {
        EP_ABORT &= ~(1u << 26u);
    }

    /**
     * Toggle EP_ABORT's EP13_IN bit.
     */
    inline void toggle_EP_ABORT_EP13_IN()
    {
        EP_ABORT ^= 1u << 26u;
    }

    /**
     * Get EP_ABORT's EP13_OUT bit.
     */
    bool get_EP_ABORT_EP13_OUT()
    {
        return EP_ABORT & (1u << 27u);
    }

    /**
     * Set EP_ABORT's EP13_OUT bit.
     */
    inline void set_EP_ABORT_EP13_OUT()
    {
        EP_ABORT |= 1u << 27u;
    }

    /**
     * Clear EP_ABORT's EP13_OUT bit.
     */
    inline void clear_EP_ABORT_EP13_OUT()
    {
        EP_ABORT &= ~(1u << 27u);
    }

    /**
     * Toggle EP_ABORT's EP13_OUT bit.
     */
    inline void toggle_EP_ABORT_EP13_OUT()
    {
        EP_ABORT ^= 1u << 27u;
    }

    /**
     * Get EP_ABORT's EP14_IN bit.
     */
    bool get_EP_ABORT_EP14_IN()
    {
        return EP_ABORT & (1u << 28u);
    }

    /**
     * Set EP_ABORT's EP14_IN bit.
     */
    inline void set_EP_ABORT_EP14_IN()
    {
        EP_ABORT |= 1u << 28u;
    }

    /**
     * Clear EP_ABORT's EP14_IN bit.
     */
    inline void clear_EP_ABORT_EP14_IN()
    {
        EP_ABORT &= ~(1u << 28u);
    }

    /**
     * Toggle EP_ABORT's EP14_IN bit.
     */
    inline void toggle_EP_ABORT_EP14_IN()
    {
        EP_ABORT ^= 1u << 28u;
    }

    /**
     * Get EP_ABORT's EP14_OUT bit.
     */
    bool get_EP_ABORT_EP14_OUT()
    {
        return EP_ABORT & (1u << 29u);
    }

    /**
     * Set EP_ABORT's EP14_OUT bit.
     */
    inline void set_EP_ABORT_EP14_OUT()
    {
        EP_ABORT |= 1u << 29u;
    }

    /**
     * Clear EP_ABORT's EP14_OUT bit.
     */
    inline void clear_EP_ABORT_EP14_OUT()
    {
        EP_ABORT &= ~(1u << 29u);
    }

    /**
     * Toggle EP_ABORT's EP14_OUT bit.
     */
    inline void toggle_EP_ABORT_EP14_OUT()
    {
        EP_ABORT ^= 1u << 29u;
    }

    /**
     * Get EP_ABORT's EP15_IN bit.
     */
    bool get_EP_ABORT_EP15_IN()
    {
        return EP_ABORT & (1u << 30u);
    }

    /**
     * Set EP_ABORT's EP15_IN bit.
     */
    inline void set_EP_ABORT_EP15_IN()
    {
        EP_ABORT |= 1u << 30u;
    }

    /**
     * Clear EP_ABORT's EP15_IN bit.
     */
    inline void clear_EP_ABORT_EP15_IN()
    {
        EP_ABORT &= ~(1u << 30u);
    }

    /**
     * Toggle EP_ABORT's EP15_IN bit.
     */
    inline void toggle_EP_ABORT_EP15_IN()
    {
        EP_ABORT ^= 1u << 30u;
    }

    /**
     * Get EP_ABORT's EP15_OUT bit.
     */
    bool get_EP_ABORT_EP15_OUT()
    {
        return EP_ABORT & (1u << 31u);
    }

    /**
     * Set EP_ABORT's EP15_OUT bit.
     */
    inline void set_EP_ABORT_EP15_OUT()
    {
        EP_ABORT |= 1u << 31u;
    }

    /**
     * Clear EP_ABORT's EP15_OUT bit.
     */
    inline void clear_EP_ABORT_EP15_OUT()
    {
        EP_ABORT &= ~(1u << 31u);
    }

    /**
     * Toggle EP_ABORT's EP15_OUT bit.
     */
    inline void toggle_EP_ABORT_EP15_OUT()
    {
        EP_ABORT ^= 1u << 31u;
    }

    /**
     * Get EP_ABORT_DONE's EP0_IN bit.
     */
    bool get_EP_ABORT_DONE_EP0_IN()
    {
        return EP_ABORT_DONE & (1u << 0u);
    }

    /**
     * Set EP_ABORT_DONE's EP0_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP0_IN()
    {
        EP_ABORT_DONE |= 1u << 0u;
    }

    /**
     * Clear EP_ABORT_DONE's EP0_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP0_IN()
    {
        EP_ABORT_DONE &= ~(1u << 0u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP0_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP0_IN()
    {
        EP_ABORT_DONE ^= 1u << 0u;
    }

    /**
     * Get EP_ABORT_DONE's EP0_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP0_OUT()
    {
        return EP_ABORT_DONE & (1u << 1u);
    }

    /**
     * Set EP_ABORT_DONE's EP0_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP0_OUT()
    {
        EP_ABORT_DONE |= 1u << 1u;
    }

    /**
     * Clear EP_ABORT_DONE's EP0_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP0_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 1u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP0_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP0_OUT()
    {
        EP_ABORT_DONE ^= 1u << 1u;
    }

    /**
     * Get EP_ABORT_DONE's EP1_IN bit.
     */
    bool get_EP_ABORT_DONE_EP1_IN()
    {
        return EP_ABORT_DONE & (1u << 2u);
    }

    /**
     * Set EP_ABORT_DONE's EP1_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP1_IN()
    {
        EP_ABORT_DONE |= 1u << 2u;
    }

    /**
     * Clear EP_ABORT_DONE's EP1_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP1_IN()
    {
        EP_ABORT_DONE &= ~(1u << 2u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP1_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP1_IN()
    {
        EP_ABORT_DONE ^= 1u << 2u;
    }

    /**
     * Get EP_ABORT_DONE's EP1_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP1_OUT()
    {
        return EP_ABORT_DONE & (1u << 3u);
    }

    /**
     * Set EP_ABORT_DONE's EP1_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP1_OUT()
    {
        EP_ABORT_DONE |= 1u << 3u;
    }

    /**
     * Clear EP_ABORT_DONE's EP1_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP1_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 3u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP1_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP1_OUT()
    {
        EP_ABORT_DONE ^= 1u << 3u;
    }

    /**
     * Get EP_ABORT_DONE's EP2_IN bit.
     */
    bool get_EP_ABORT_DONE_EP2_IN()
    {
        return EP_ABORT_DONE & (1u << 4u);
    }

    /**
     * Set EP_ABORT_DONE's EP2_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP2_IN()
    {
        EP_ABORT_DONE |= 1u << 4u;
    }

    /**
     * Clear EP_ABORT_DONE's EP2_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP2_IN()
    {
        EP_ABORT_DONE &= ~(1u << 4u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP2_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP2_IN()
    {
        EP_ABORT_DONE ^= 1u << 4u;
    }

    /**
     * Get EP_ABORT_DONE's EP2_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP2_OUT()
    {
        return EP_ABORT_DONE & (1u << 5u);
    }

    /**
     * Set EP_ABORT_DONE's EP2_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP2_OUT()
    {
        EP_ABORT_DONE |= 1u << 5u;
    }

    /**
     * Clear EP_ABORT_DONE's EP2_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP2_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 5u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP2_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP2_OUT()
    {
        EP_ABORT_DONE ^= 1u << 5u;
    }

    /**
     * Get EP_ABORT_DONE's EP3_IN bit.
     */
    bool get_EP_ABORT_DONE_EP3_IN()
    {
        return EP_ABORT_DONE & (1u << 6u);
    }

    /**
     * Set EP_ABORT_DONE's EP3_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP3_IN()
    {
        EP_ABORT_DONE |= 1u << 6u;
    }

    /**
     * Clear EP_ABORT_DONE's EP3_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP3_IN()
    {
        EP_ABORT_DONE &= ~(1u << 6u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP3_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP3_IN()
    {
        EP_ABORT_DONE ^= 1u << 6u;
    }

    /**
     * Get EP_ABORT_DONE's EP3_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP3_OUT()
    {
        return EP_ABORT_DONE & (1u << 7u);
    }

    /**
     * Set EP_ABORT_DONE's EP3_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP3_OUT()
    {
        EP_ABORT_DONE |= 1u << 7u;
    }

    /**
     * Clear EP_ABORT_DONE's EP3_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP3_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 7u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP3_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP3_OUT()
    {
        EP_ABORT_DONE ^= 1u << 7u;
    }

    /**
     * Get EP_ABORT_DONE's EP4_IN bit.
     */
    bool get_EP_ABORT_DONE_EP4_IN()
    {
        return EP_ABORT_DONE & (1u << 8u);
    }

    /**
     * Set EP_ABORT_DONE's EP4_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP4_IN()
    {
        EP_ABORT_DONE |= 1u << 8u;
    }

    /**
     * Clear EP_ABORT_DONE's EP4_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP4_IN()
    {
        EP_ABORT_DONE &= ~(1u << 8u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP4_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP4_IN()
    {
        EP_ABORT_DONE ^= 1u << 8u;
    }

    /**
     * Get EP_ABORT_DONE's EP4_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP4_OUT()
    {
        return EP_ABORT_DONE & (1u << 9u);
    }

    /**
     * Set EP_ABORT_DONE's EP4_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP4_OUT()
    {
        EP_ABORT_DONE |= 1u << 9u;
    }

    /**
     * Clear EP_ABORT_DONE's EP4_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP4_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 9u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP4_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP4_OUT()
    {
        EP_ABORT_DONE ^= 1u << 9u;
    }

    /**
     * Get EP_ABORT_DONE's EP5_IN bit.
     */
    bool get_EP_ABORT_DONE_EP5_IN()
    {
        return EP_ABORT_DONE & (1u << 10u);
    }

    /**
     * Set EP_ABORT_DONE's EP5_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP5_IN()
    {
        EP_ABORT_DONE |= 1u << 10u;
    }

    /**
     * Clear EP_ABORT_DONE's EP5_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP5_IN()
    {
        EP_ABORT_DONE &= ~(1u << 10u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP5_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP5_IN()
    {
        EP_ABORT_DONE ^= 1u << 10u;
    }

    /**
     * Get EP_ABORT_DONE's EP5_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP5_OUT()
    {
        return EP_ABORT_DONE & (1u << 11u);
    }

    /**
     * Set EP_ABORT_DONE's EP5_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP5_OUT()
    {
        EP_ABORT_DONE |= 1u << 11u;
    }

    /**
     * Clear EP_ABORT_DONE's EP5_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP5_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 11u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP5_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP5_OUT()
    {
        EP_ABORT_DONE ^= 1u << 11u;
    }

    /**
     * Get EP_ABORT_DONE's EP6_IN bit.
     */
    bool get_EP_ABORT_DONE_EP6_IN()
    {
        return EP_ABORT_DONE & (1u << 12u);
    }

    /**
     * Set EP_ABORT_DONE's EP6_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP6_IN()
    {
        EP_ABORT_DONE |= 1u << 12u;
    }

    /**
     * Clear EP_ABORT_DONE's EP6_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP6_IN()
    {
        EP_ABORT_DONE &= ~(1u << 12u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP6_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP6_IN()
    {
        EP_ABORT_DONE ^= 1u << 12u;
    }

    /**
     * Get EP_ABORT_DONE's EP6_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP6_OUT()
    {
        return EP_ABORT_DONE & (1u << 13u);
    }

    /**
     * Set EP_ABORT_DONE's EP6_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP6_OUT()
    {
        EP_ABORT_DONE |= 1u << 13u;
    }

    /**
     * Clear EP_ABORT_DONE's EP6_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP6_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 13u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP6_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP6_OUT()
    {
        EP_ABORT_DONE ^= 1u << 13u;
    }

    /**
     * Get EP_ABORT_DONE's EP7_IN bit.
     */
    bool get_EP_ABORT_DONE_EP7_IN()
    {
        return EP_ABORT_DONE & (1u << 14u);
    }

    /**
     * Set EP_ABORT_DONE's EP7_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP7_IN()
    {
        EP_ABORT_DONE |= 1u << 14u;
    }

    /**
     * Clear EP_ABORT_DONE's EP7_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP7_IN()
    {
        EP_ABORT_DONE &= ~(1u << 14u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP7_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP7_IN()
    {
        EP_ABORT_DONE ^= 1u << 14u;
    }

    /**
     * Get EP_ABORT_DONE's EP7_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP7_OUT()
    {
        return EP_ABORT_DONE & (1u << 15u);
    }

    /**
     * Set EP_ABORT_DONE's EP7_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP7_OUT()
    {
        EP_ABORT_DONE |= 1u << 15u;
    }

    /**
     * Clear EP_ABORT_DONE's EP7_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP7_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 15u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP7_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP7_OUT()
    {
        EP_ABORT_DONE ^= 1u << 15u;
    }

    /**
     * Get EP_ABORT_DONE's EP8_IN bit.
     */
    bool get_EP_ABORT_DONE_EP8_IN()
    {
        return EP_ABORT_DONE & (1u << 16u);
    }

    /**
     * Set EP_ABORT_DONE's EP8_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP8_IN()
    {
        EP_ABORT_DONE |= 1u << 16u;
    }

    /**
     * Clear EP_ABORT_DONE's EP8_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP8_IN()
    {
        EP_ABORT_DONE &= ~(1u << 16u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP8_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP8_IN()
    {
        EP_ABORT_DONE ^= 1u << 16u;
    }

    /**
     * Get EP_ABORT_DONE's EP8_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP8_OUT()
    {
        return EP_ABORT_DONE & (1u << 17u);
    }

    /**
     * Set EP_ABORT_DONE's EP8_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP8_OUT()
    {
        EP_ABORT_DONE |= 1u << 17u;
    }

    /**
     * Clear EP_ABORT_DONE's EP8_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP8_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 17u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP8_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP8_OUT()
    {
        EP_ABORT_DONE ^= 1u << 17u;
    }

    /**
     * Get EP_ABORT_DONE's EP9_IN bit.
     */
    bool get_EP_ABORT_DONE_EP9_IN()
    {
        return EP_ABORT_DONE & (1u << 18u);
    }

    /**
     * Set EP_ABORT_DONE's EP9_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP9_IN()
    {
        EP_ABORT_DONE |= 1u << 18u;
    }

    /**
     * Clear EP_ABORT_DONE's EP9_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP9_IN()
    {
        EP_ABORT_DONE &= ~(1u << 18u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP9_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP9_IN()
    {
        EP_ABORT_DONE ^= 1u << 18u;
    }

    /**
     * Get EP_ABORT_DONE's EP9_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP9_OUT()
    {
        return EP_ABORT_DONE & (1u << 19u);
    }

    /**
     * Set EP_ABORT_DONE's EP9_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP9_OUT()
    {
        EP_ABORT_DONE |= 1u << 19u;
    }

    /**
     * Clear EP_ABORT_DONE's EP9_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP9_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 19u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP9_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP9_OUT()
    {
        EP_ABORT_DONE ^= 1u << 19u;
    }

    /**
     * Get EP_ABORT_DONE's EP10_IN bit.
     */
    bool get_EP_ABORT_DONE_EP10_IN()
    {
        return EP_ABORT_DONE & (1u << 20u);
    }

    /**
     * Set EP_ABORT_DONE's EP10_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP10_IN()
    {
        EP_ABORT_DONE |= 1u << 20u;
    }

    /**
     * Clear EP_ABORT_DONE's EP10_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP10_IN()
    {
        EP_ABORT_DONE &= ~(1u << 20u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP10_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP10_IN()
    {
        EP_ABORT_DONE ^= 1u << 20u;
    }

    /**
     * Get EP_ABORT_DONE's EP10_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP10_OUT()
    {
        return EP_ABORT_DONE & (1u << 21u);
    }

    /**
     * Set EP_ABORT_DONE's EP10_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP10_OUT()
    {
        EP_ABORT_DONE |= 1u << 21u;
    }

    /**
     * Clear EP_ABORT_DONE's EP10_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP10_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 21u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP10_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP10_OUT()
    {
        EP_ABORT_DONE ^= 1u << 21u;
    }

    /**
     * Get EP_ABORT_DONE's EP11_IN bit.
     */
    bool get_EP_ABORT_DONE_EP11_IN()
    {
        return EP_ABORT_DONE & (1u << 22u);
    }

    /**
     * Set EP_ABORT_DONE's EP11_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP11_IN()
    {
        EP_ABORT_DONE |= 1u << 22u;
    }

    /**
     * Clear EP_ABORT_DONE's EP11_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP11_IN()
    {
        EP_ABORT_DONE &= ~(1u << 22u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP11_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP11_IN()
    {
        EP_ABORT_DONE ^= 1u << 22u;
    }

    /**
     * Get EP_ABORT_DONE's EP11_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP11_OUT()
    {
        return EP_ABORT_DONE & (1u << 23u);
    }

    /**
     * Set EP_ABORT_DONE's EP11_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP11_OUT()
    {
        EP_ABORT_DONE |= 1u << 23u;
    }

    /**
     * Clear EP_ABORT_DONE's EP11_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP11_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 23u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP11_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP11_OUT()
    {
        EP_ABORT_DONE ^= 1u << 23u;
    }

    /**
     * Get EP_ABORT_DONE's EP12_IN bit.
     */
    bool get_EP_ABORT_DONE_EP12_IN()
    {
        return EP_ABORT_DONE & (1u << 24u);
    }

    /**
     * Set EP_ABORT_DONE's EP12_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP12_IN()
    {
        EP_ABORT_DONE |= 1u << 24u;
    }

    /**
     * Clear EP_ABORT_DONE's EP12_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP12_IN()
    {
        EP_ABORT_DONE &= ~(1u << 24u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP12_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP12_IN()
    {
        EP_ABORT_DONE ^= 1u << 24u;
    }

    /**
     * Get EP_ABORT_DONE's EP12_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP12_OUT()
    {
        return EP_ABORT_DONE & (1u << 25u);
    }

    /**
     * Set EP_ABORT_DONE's EP12_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP12_OUT()
    {
        EP_ABORT_DONE |= 1u << 25u;
    }

    /**
     * Clear EP_ABORT_DONE's EP12_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP12_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 25u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP12_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP12_OUT()
    {
        EP_ABORT_DONE ^= 1u << 25u;
    }

    /**
     * Get EP_ABORT_DONE's EP13_IN bit.
     */
    bool get_EP_ABORT_DONE_EP13_IN()
    {
        return EP_ABORT_DONE & (1u << 26u);
    }

    /**
     * Set EP_ABORT_DONE's EP13_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP13_IN()
    {
        EP_ABORT_DONE |= 1u << 26u;
    }

    /**
     * Clear EP_ABORT_DONE's EP13_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP13_IN()
    {
        EP_ABORT_DONE &= ~(1u << 26u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP13_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP13_IN()
    {
        EP_ABORT_DONE ^= 1u << 26u;
    }

    /**
     * Get EP_ABORT_DONE's EP13_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP13_OUT()
    {
        return EP_ABORT_DONE & (1u << 27u);
    }

    /**
     * Set EP_ABORT_DONE's EP13_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP13_OUT()
    {
        EP_ABORT_DONE |= 1u << 27u;
    }

    /**
     * Clear EP_ABORT_DONE's EP13_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP13_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 27u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP13_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP13_OUT()
    {
        EP_ABORT_DONE ^= 1u << 27u;
    }

    /**
     * Get EP_ABORT_DONE's EP14_IN bit.
     */
    bool get_EP_ABORT_DONE_EP14_IN()
    {
        return EP_ABORT_DONE & (1u << 28u);
    }

    /**
     * Set EP_ABORT_DONE's EP14_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP14_IN()
    {
        EP_ABORT_DONE |= 1u << 28u;
    }

    /**
     * Clear EP_ABORT_DONE's EP14_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP14_IN()
    {
        EP_ABORT_DONE &= ~(1u << 28u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP14_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP14_IN()
    {
        EP_ABORT_DONE ^= 1u << 28u;
    }

    /**
     * Get EP_ABORT_DONE's EP14_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP14_OUT()
    {
        return EP_ABORT_DONE & (1u << 29u);
    }

    /**
     * Set EP_ABORT_DONE's EP14_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP14_OUT()
    {
        EP_ABORT_DONE |= 1u << 29u;
    }

    /**
     * Clear EP_ABORT_DONE's EP14_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP14_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 29u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP14_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP14_OUT()
    {
        EP_ABORT_DONE ^= 1u << 29u;
    }

    /**
     * Get EP_ABORT_DONE's EP15_IN bit.
     */
    bool get_EP_ABORT_DONE_EP15_IN()
    {
        return EP_ABORT_DONE & (1u << 30u);
    }

    /**
     * Set EP_ABORT_DONE's EP15_IN bit.
     */
    inline void set_EP_ABORT_DONE_EP15_IN()
    {
        EP_ABORT_DONE |= 1u << 30u;
    }

    /**
     * Clear EP_ABORT_DONE's EP15_IN bit.
     */
    inline void clear_EP_ABORT_DONE_EP15_IN()
    {
        EP_ABORT_DONE &= ~(1u << 30u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP15_IN bit.
     */
    inline void toggle_EP_ABORT_DONE_EP15_IN()
    {
        EP_ABORT_DONE ^= 1u << 30u;
    }

    /**
     * Get EP_ABORT_DONE's EP15_OUT bit.
     */
    bool get_EP_ABORT_DONE_EP15_OUT()
    {
        return EP_ABORT_DONE & (1u << 31u);
    }

    /**
     * Set EP_ABORT_DONE's EP15_OUT bit.
     */
    inline void set_EP_ABORT_DONE_EP15_OUT()
    {
        EP_ABORT_DONE |= 1u << 31u;
    }

    /**
     * Clear EP_ABORT_DONE's EP15_OUT bit.
     */
    inline void clear_EP_ABORT_DONE_EP15_OUT()
    {
        EP_ABORT_DONE &= ~(1u << 31u);
    }

    /**
     * Toggle EP_ABORT_DONE's EP15_OUT bit.
     */
    inline void toggle_EP_ABORT_DONE_EP15_OUT()
    {
        EP_ABORT_DONE ^= 1u << 31u;
    }

    /**
     * Get EP_STALL_ARM's EP0_IN bit.
     */
    bool get_EP_STALL_ARM_EP0_IN()
    {
        return EP_STALL_ARM & (1u << 0u);
    }

    /**
     * Set EP_STALL_ARM's EP0_IN bit.
     */
    inline void set_EP_STALL_ARM_EP0_IN()
    {
        EP_STALL_ARM |= 1u << 0u;
    }

    /**
     * Clear EP_STALL_ARM's EP0_IN bit.
     */
    inline void clear_EP_STALL_ARM_EP0_IN()
    {
        EP_STALL_ARM &= ~(1u << 0u);
    }

    /**
     * Toggle EP_STALL_ARM's EP0_IN bit.
     */
    inline void toggle_EP_STALL_ARM_EP0_IN()
    {
        EP_STALL_ARM ^= 1u << 0u;
    }

    /**
     * Get EP_STALL_ARM's EP0_OUT bit.
     */
    bool get_EP_STALL_ARM_EP0_OUT()
    {
        return EP_STALL_ARM & (1u << 1u);
    }

    /**
     * Set EP_STALL_ARM's EP0_OUT bit.
     */
    inline void set_EP_STALL_ARM_EP0_OUT()
    {
        EP_STALL_ARM |= 1u << 1u;
    }

    /**
     * Clear EP_STALL_ARM's EP0_OUT bit.
     */
    inline void clear_EP_STALL_ARM_EP0_OUT()
    {
        EP_STALL_ARM &= ~(1u << 1u);
    }

    /**
     * Toggle EP_STALL_ARM's EP0_OUT bit.
     */
    inline void toggle_EP_STALL_ARM_EP0_OUT()
    {
        EP_STALL_ARM ^= 1u << 1u;
    }

    /**
     * Get NAK_POLL's DELAY_LS field.
     */
    uint16_t get_NAK_POLL_DELAY_LS()
    {
        return (NAK_POLL >> 0u) & 0b1111111111u;
    }

    /**
     * Set NAK_POLL's DELAY_LS field.
     */
    inline void set_NAK_POLL_DELAY_LS(uint16_t value)
    {
        uint32_t curr = NAK_POLL;

        curr &= ~(0b1111111111u << 0u);
        curr |= (value & 0b1111111111u) << 0u;

        NAK_POLL = curr;
    }

    /**
     * Get NAK_POLL's DELAY_FS field.
     */
    uint16_t get_NAK_POLL_DELAY_FS()
    {
        return (NAK_POLL >> 16u) & 0b1111111111u;
    }

    /**
     * Set NAK_POLL's DELAY_FS field.
     */
    inline void set_NAK_POLL_DELAY_FS(uint16_t value)
    {
        uint32_t curr = NAK_POLL;

        curr &= ~(0b1111111111u << 16u);
        curr |= (value & 0b1111111111u) << 16u;

        NAK_POLL = curr;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP0_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP0_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 0u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP0_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP0_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 0u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP0_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP0_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 0u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP0_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP0_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 0u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP0_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP0_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 1u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP0_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP0_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 1u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP0_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP0_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 1u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP0_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP0_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 1u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP1_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP1_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 2u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP1_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP1_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 2u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP1_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP1_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 2u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP1_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP1_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 2u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP1_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP1_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 3u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP1_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP1_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 3u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP1_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP1_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 3u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP1_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP1_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 3u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP2_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP2_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 4u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP2_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP2_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 4u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP2_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP2_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 4u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP2_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP2_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 4u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP2_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP2_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 5u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP2_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP2_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 5u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP2_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP2_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 5u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP2_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP2_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 5u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP3_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP3_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 6u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP3_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP3_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 6u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP3_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP3_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 6u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP3_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP3_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 6u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP3_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP3_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 7u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP3_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP3_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 7u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP3_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP3_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 7u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP3_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP3_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 7u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP4_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP4_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 8u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP4_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP4_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 8u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP4_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP4_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 8u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP4_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP4_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 8u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP4_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP4_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 9u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP4_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP4_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 9u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP4_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP4_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 9u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP4_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP4_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 9u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP5_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP5_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 10u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP5_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP5_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 10u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP5_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP5_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 10u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP5_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP5_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 10u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP5_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP5_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 11u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP5_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP5_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 11u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP5_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP5_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 11u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP5_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP5_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 11u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP6_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP6_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 12u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP6_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP6_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 12u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP6_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP6_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 12u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP6_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP6_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 12u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP6_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP6_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 13u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP6_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP6_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 13u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP6_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP6_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 13u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP6_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP6_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 13u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP7_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP7_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 14u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP7_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP7_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 14u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP7_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP7_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 14u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP7_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP7_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 14u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP7_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP7_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 15u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP7_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP7_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 15u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP7_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP7_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 15u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP7_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP7_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 15u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP8_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP8_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 16u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP8_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP8_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 16u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP8_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP8_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 16u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP8_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP8_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 16u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP8_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP8_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 17u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP8_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP8_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 17u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP8_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP8_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 17u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP8_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP8_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 17u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP9_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP9_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 18u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP9_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP9_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 18u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP9_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP9_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 18u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP9_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP9_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 18u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP9_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP9_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 19u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP9_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP9_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 19u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP9_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP9_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 19u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP9_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP9_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 19u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP10_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP10_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 20u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP10_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP10_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 20u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP10_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP10_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 20u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP10_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP10_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 20u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP10_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP10_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 21u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP10_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP10_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 21u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP10_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP10_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 21u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP10_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP10_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 21u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP11_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP11_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 22u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP11_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP11_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 22u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP11_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP11_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 22u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP11_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP11_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 22u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP11_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP11_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 23u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP11_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP11_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 23u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP11_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP11_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 23u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP11_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP11_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 23u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP12_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP12_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 24u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP12_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP12_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 24u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP12_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP12_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 24u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP12_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP12_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 24u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP12_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP12_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 25u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP12_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP12_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 25u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP12_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP12_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 25u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP12_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP12_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 25u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP13_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP13_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 26u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP13_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP13_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 26u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP13_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP13_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 26u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP13_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP13_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 26u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP13_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP13_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 27u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP13_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP13_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 27u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP13_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP13_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 27u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP13_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP13_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 27u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP14_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP14_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 28u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP14_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP14_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 28u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP14_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP14_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 28u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP14_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP14_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 28u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP14_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP14_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 29u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP14_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP14_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 29u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP14_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP14_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 29u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP14_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP14_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 29u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP15_IN bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP15_IN()
    {
        return EP_STATUS_STALL_NAK & (1u << 30u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP15_IN bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP15_IN()
    {
        EP_STATUS_STALL_NAK |= 1u << 30u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP15_IN bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP15_IN()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 30u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP15_IN bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP15_IN()
    {
        EP_STATUS_STALL_NAK ^= 1u << 30u;
    }

    /**
     * Get EP_STATUS_STALL_NAK's EP15_OUT bit.
     */
    bool get_EP_STATUS_STALL_NAK_EP15_OUT()
    {
        return EP_STATUS_STALL_NAK & (1u << 31u);
    }

    /**
     * Set EP_STATUS_STALL_NAK's EP15_OUT bit.
     */
    inline void set_EP_STATUS_STALL_NAK_EP15_OUT()
    {
        EP_STATUS_STALL_NAK |= 1u << 31u;
    }

    /**
     * Clear EP_STATUS_STALL_NAK's EP15_OUT bit.
     */
    inline void clear_EP_STATUS_STALL_NAK_EP15_OUT()
    {
        EP_STATUS_STALL_NAK &= ~(1u << 31u);
    }

    /**
     * Toggle EP_STATUS_STALL_NAK's EP15_OUT bit.
     */
    inline void toggle_EP_STATUS_STALL_NAK_EP15_OUT()
    {
        EP_STATUS_STALL_NAK ^= 1u << 31u;
    }

    /**
     * Get USB_MUXING's TO_PHY bit.
     */
    bool get_USB_MUXING_TO_PHY()
    {
        return USB_MUXING & (1u << 0u);
    }

    /**
     * Set USB_MUXING's TO_PHY bit.
     */
    inline void set_USB_MUXING_TO_PHY()
    {
        USB_MUXING |= 1u << 0u;
    }

    /**
     * Clear USB_MUXING's TO_PHY bit.
     */
    inline void clear_USB_MUXING_TO_PHY()
    {
        USB_MUXING &= ~(1u << 0u);
    }

    /**
     * Toggle USB_MUXING's TO_PHY bit.
     */
    inline void toggle_USB_MUXING_TO_PHY()
    {
        USB_MUXING ^= 1u << 0u;
    }

    /**
     * Get USB_MUXING's TO_EXTPHY bit.
     */
    bool get_USB_MUXING_TO_EXTPHY()
    {
        return USB_MUXING & (1u << 1u);
    }

    /**
     * Set USB_MUXING's TO_EXTPHY bit.
     */
    inline void set_USB_MUXING_TO_EXTPHY()
    {
        USB_MUXING |= 1u << 1u;
    }

    /**
     * Clear USB_MUXING's TO_EXTPHY bit.
     */
    inline void clear_USB_MUXING_TO_EXTPHY()
    {
        USB_MUXING &= ~(1u << 1u);
    }

    /**
     * Toggle USB_MUXING's TO_EXTPHY bit.
     */
    inline void toggle_USB_MUXING_TO_EXTPHY()
    {
        USB_MUXING ^= 1u << 1u;
    }

    /**
     * Get USB_MUXING's TO_DIGITAL_PAD bit.
     */
    bool get_USB_MUXING_TO_DIGITAL_PAD()
    {
        return USB_MUXING & (1u << 2u);
    }

    /**
     * Set USB_MUXING's TO_DIGITAL_PAD bit.
     */
    inline void set_USB_MUXING_TO_DIGITAL_PAD()
    {
        USB_MUXING |= 1u << 2u;
    }

    /**
     * Clear USB_MUXING's TO_DIGITAL_PAD bit.
     */
    inline void clear_USB_MUXING_TO_DIGITAL_PAD()
    {
        USB_MUXING &= ~(1u << 2u);
    }

    /**
     * Toggle USB_MUXING's TO_DIGITAL_PAD bit.
     */
    inline void toggle_USB_MUXING_TO_DIGITAL_PAD()
    {
        USB_MUXING ^= 1u << 2u;
    }

    /**
     * Get USB_MUXING's SOFTCON bit.
     */
    bool get_USB_MUXING_SOFTCON()
    {
        return USB_MUXING & (1u << 3u);
    }

    /**
     * Set USB_MUXING's SOFTCON bit.
     */
    inline void set_USB_MUXING_SOFTCON()
    {
        USB_MUXING |= 1u << 3u;
    }

    /**
     * Clear USB_MUXING's SOFTCON bit.
     */
    inline void clear_USB_MUXING_SOFTCON()
    {
        USB_MUXING &= ~(1u << 3u);
    }

    /**
     * Toggle USB_MUXING's SOFTCON bit.
     */
    inline void toggle_USB_MUXING_SOFTCON()
    {
        USB_MUXING ^= 1u << 3u;
    }

    /**
     * Get USB_PWR's VBUS_EN bit.
     */
    bool get_USB_PWR_VBUS_EN()
    {
        return USB_PWR & (1u << 0u);
    }

    /**
     * Set USB_PWR's VBUS_EN bit.
     */
    inline void set_USB_PWR_VBUS_EN()
    {
        USB_PWR |= 1u << 0u;
    }

    /**
     * Clear USB_PWR's VBUS_EN bit.
     */
    inline void clear_USB_PWR_VBUS_EN()
    {
        USB_PWR &= ~(1u << 0u);
    }

    /**
     * Toggle USB_PWR's VBUS_EN bit.
     */
    inline void toggle_USB_PWR_VBUS_EN()
    {
        USB_PWR ^= 1u << 0u;
    }

    /**
     * Get USB_PWR's VBUS_EN_OVERRIDE_EN bit.
     */
    bool get_USB_PWR_VBUS_EN_OVERRIDE_EN()
    {
        return USB_PWR & (1u << 1u);
    }

    /**
     * Set USB_PWR's VBUS_EN_OVERRIDE_EN bit.
     */
    inline void set_USB_PWR_VBUS_EN_OVERRIDE_EN()
    {
        USB_PWR |= 1u << 1u;
    }

    /**
     * Clear USB_PWR's VBUS_EN_OVERRIDE_EN bit.
     */
    inline void clear_USB_PWR_VBUS_EN_OVERRIDE_EN()
    {
        USB_PWR &= ~(1u << 1u);
    }

    /**
     * Toggle USB_PWR's VBUS_EN_OVERRIDE_EN bit.
     */
    inline void toggle_USB_PWR_VBUS_EN_OVERRIDE_EN()
    {
        USB_PWR ^= 1u << 1u;
    }

    /**
     * Get USB_PWR's VBUS_DETECT bit.
     */
    bool get_USB_PWR_VBUS_DETECT()
    {
        return USB_PWR & (1u << 2u);
    }

    /**
     * Set USB_PWR's VBUS_DETECT bit.
     */
    inline void set_USB_PWR_VBUS_DETECT()
    {
        USB_PWR |= 1u << 2u;
    }

    /**
     * Clear USB_PWR's VBUS_DETECT bit.
     */
    inline void clear_USB_PWR_VBUS_DETECT()
    {
        USB_PWR &= ~(1u << 2u);
    }

    /**
     * Toggle USB_PWR's VBUS_DETECT bit.
     */
    inline void toggle_USB_PWR_VBUS_DETECT()
    {
        USB_PWR ^= 1u << 2u;
    }

    /**
     * Get USB_PWR's VBUS_DETECT_OVERRIDE_EN bit.
     */
    bool get_USB_PWR_VBUS_DETECT_OVERRIDE_EN()
    {
        return USB_PWR & (1u << 3u);
    }

    /**
     * Set USB_PWR's VBUS_DETECT_OVERRIDE_EN bit.
     */
    inline void set_USB_PWR_VBUS_DETECT_OVERRIDE_EN()
    {
        USB_PWR |= 1u << 3u;
    }

    /**
     * Clear USB_PWR's VBUS_DETECT_OVERRIDE_EN bit.
     */
    inline void clear_USB_PWR_VBUS_DETECT_OVERRIDE_EN()
    {
        USB_PWR &= ~(1u << 3u);
    }

    /**
     * Toggle USB_PWR's VBUS_DETECT_OVERRIDE_EN bit.
     */
    inline void toggle_USB_PWR_VBUS_DETECT_OVERRIDE_EN()
    {
        USB_PWR ^= 1u << 3u;
    }

    /**
     * Get USB_PWR's OVERCURR_DETECT bit.
     */
    bool get_USB_PWR_OVERCURR_DETECT()
    {
        return USB_PWR & (1u << 4u);
    }

    /**
     * Set USB_PWR's OVERCURR_DETECT bit.
     */
    inline void set_USB_PWR_OVERCURR_DETECT()
    {
        USB_PWR |= 1u << 4u;
    }

    /**
     * Clear USB_PWR's OVERCURR_DETECT bit.
     */
    inline void clear_USB_PWR_OVERCURR_DETECT()
    {
        USB_PWR &= ~(1u << 4u);
    }

    /**
     * Toggle USB_PWR's OVERCURR_DETECT bit.
     */
    inline void toggle_USB_PWR_OVERCURR_DETECT()
    {
        USB_PWR ^= 1u << 4u;
    }

    /**
     * Get USB_PWR's OVERCURR_DETECT_EN bit.
     */
    bool get_USB_PWR_OVERCURR_DETECT_EN()
    {
        return USB_PWR & (1u << 5u);
    }

    /**
     * Set USB_PWR's OVERCURR_DETECT_EN bit.
     */
    inline void set_USB_PWR_OVERCURR_DETECT_EN()
    {
        USB_PWR |= 1u << 5u;
    }

    /**
     * Clear USB_PWR's OVERCURR_DETECT_EN bit.
     */
    inline void clear_USB_PWR_OVERCURR_DETECT_EN()
    {
        USB_PWR &= ~(1u << 5u);
    }

    /**
     * Toggle USB_PWR's OVERCURR_DETECT_EN bit.
     */
    inline void toggle_USB_PWR_OVERCURR_DETECT_EN()
    {
        USB_PWR ^= 1u << 5u;
    }

    /**
     * Get USBPHY_DIRECT's DP_PULLUP_HISEL bit.
     */
    bool get_USBPHY_DIRECT_DP_PULLUP_HISEL()
    {
        return USBPHY_DIRECT & (1u << 0u);
    }

    /**
     * Set USBPHY_DIRECT's DP_PULLUP_HISEL bit.
     */
    inline void set_USBPHY_DIRECT_DP_PULLUP_HISEL()
    {
        USBPHY_DIRECT |= 1u << 0u;
    }

    /**
     * Clear USBPHY_DIRECT's DP_PULLUP_HISEL bit.
     */
    inline void clear_USBPHY_DIRECT_DP_PULLUP_HISEL()
    {
        USBPHY_DIRECT &= ~(1u << 0u);
    }

    /**
     * Toggle USBPHY_DIRECT's DP_PULLUP_HISEL bit.
     */
    inline void toggle_USBPHY_DIRECT_DP_PULLUP_HISEL()
    {
        USBPHY_DIRECT ^= 1u << 0u;
    }

    /**
     * Get USBPHY_DIRECT's DP_PULLUP_EN bit.
     */
    bool get_USBPHY_DIRECT_DP_PULLUP_EN()
    {
        return USBPHY_DIRECT & (1u << 1u);
    }

    /**
     * Set USBPHY_DIRECT's DP_PULLUP_EN bit.
     */
    inline void set_USBPHY_DIRECT_DP_PULLUP_EN()
    {
        USBPHY_DIRECT |= 1u << 1u;
    }

    /**
     * Clear USBPHY_DIRECT's DP_PULLUP_EN bit.
     */
    inline void clear_USBPHY_DIRECT_DP_PULLUP_EN()
    {
        USBPHY_DIRECT &= ~(1u << 1u);
    }

    /**
     * Toggle USBPHY_DIRECT's DP_PULLUP_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_DP_PULLUP_EN()
    {
        USBPHY_DIRECT ^= 1u << 1u;
    }

    /**
     * Get USBPHY_DIRECT's DP_PULLDN_EN bit.
     */
    bool get_USBPHY_DIRECT_DP_PULLDN_EN()
    {
        return USBPHY_DIRECT & (1u << 2u);
    }

    /**
     * Set USBPHY_DIRECT's DP_PULLDN_EN bit.
     */
    inline void set_USBPHY_DIRECT_DP_PULLDN_EN()
    {
        USBPHY_DIRECT |= 1u << 2u;
    }

    /**
     * Clear USBPHY_DIRECT's DP_PULLDN_EN bit.
     */
    inline void clear_USBPHY_DIRECT_DP_PULLDN_EN()
    {
        USBPHY_DIRECT &= ~(1u << 2u);
    }

    /**
     * Toggle USBPHY_DIRECT's DP_PULLDN_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_DP_PULLDN_EN()
    {
        USBPHY_DIRECT ^= 1u << 2u;
    }

    /**
     * Get USBPHY_DIRECT's DM_PULLUP_HISEL bit.
     */
    bool get_USBPHY_DIRECT_DM_PULLUP_HISEL()
    {
        return USBPHY_DIRECT & (1u << 4u);
    }

    /**
     * Set USBPHY_DIRECT's DM_PULLUP_HISEL bit.
     */
    inline void set_USBPHY_DIRECT_DM_PULLUP_HISEL()
    {
        USBPHY_DIRECT |= 1u << 4u;
    }

    /**
     * Clear USBPHY_DIRECT's DM_PULLUP_HISEL bit.
     */
    inline void clear_USBPHY_DIRECT_DM_PULLUP_HISEL()
    {
        USBPHY_DIRECT &= ~(1u << 4u);
    }

    /**
     * Toggle USBPHY_DIRECT's DM_PULLUP_HISEL bit.
     */
    inline void toggle_USBPHY_DIRECT_DM_PULLUP_HISEL()
    {
        USBPHY_DIRECT ^= 1u << 4u;
    }

    /**
     * Get USBPHY_DIRECT's DM_PULLUP_EN bit.
     */
    bool get_USBPHY_DIRECT_DM_PULLUP_EN()
    {
        return USBPHY_DIRECT & (1u << 5u);
    }

    /**
     * Set USBPHY_DIRECT's DM_PULLUP_EN bit.
     */
    inline void set_USBPHY_DIRECT_DM_PULLUP_EN()
    {
        USBPHY_DIRECT |= 1u << 5u;
    }

    /**
     * Clear USBPHY_DIRECT's DM_PULLUP_EN bit.
     */
    inline void clear_USBPHY_DIRECT_DM_PULLUP_EN()
    {
        USBPHY_DIRECT &= ~(1u << 5u);
    }

    /**
     * Toggle USBPHY_DIRECT's DM_PULLUP_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_DM_PULLUP_EN()
    {
        USBPHY_DIRECT ^= 1u << 5u;
    }

    /**
     * Get USBPHY_DIRECT's DM_PULLDN_EN bit.
     */
    bool get_USBPHY_DIRECT_DM_PULLDN_EN()
    {
        return USBPHY_DIRECT & (1u << 6u);
    }

    /**
     * Set USBPHY_DIRECT's DM_PULLDN_EN bit.
     */
    inline void set_USBPHY_DIRECT_DM_PULLDN_EN()
    {
        USBPHY_DIRECT |= 1u << 6u;
    }

    /**
     * Clear USBPHY_DIRECT's DM_PULLDN_EN bit.
     */
    inline void clear_USBPHY_DIRECT_DM_PULLDN_EN()
    {
        USBPHY_DIRECT &= ~(1u << 6u);
    }

    /**
     * Toggle USBPHY_DIRECT's DM_PULLDN_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_DM_PULLDN_EN()
    {
        USBPHY_DIRECT ^= 1u << 6u;
    }

    /**
     * Get USBPHY_DIRECT's TX_DP_OE bit.
     */
    bool get_USBPHY_DIRECT_TX_DP_OE()
    {
        return USBPHY_DIRECT & (1u << 8u);
    }

    /**
     * Set USBPHY_DIRECT's TX_DP_OE bit.
     */
    inline void set_USBPHY_DIRECT_TX_DP_OE()
    {
        USBPHY_DIRECT |= 1u << 8u;
    }

    /**
     * Clear USBPHY_DIRECT's TX_DP_OE bit.
     */
    inline void clear_USBPHY_DIRECT_TX_DP_OE()
    {
        USBPHY_DIRECT &= ~(1u << 8u);
    }

    /**
     * Toggle USBPHY_DIRECT's TX_DP_OE bit.
     */
    inline void toggle_USBPHY_DIRECT_TX_DP_OE()
    {
        USBPHY_DIRECT ^= 1u << 8u;
    }

    /**
     * Get USBPHY_DIRECT's TX_DM_OE bit.
     */
    bool get_USBPHY_DIRECT_TX_DM_OE()
    {
        return USBPHY_DIRECT & (1u << 9u);
    }

    /**
     * Set USBPHY_DIRECT's TX_DM_OE bit.
     */
    inline void set_USBPHY_DIRECT_TX_DM_OE()
    {
        USBPHY_DIRECT |= 1u << 9u;
    }

    /**
     * Clear USBPHY_DIRECT's TX_DM_OE bit.
     */
    inline void clear_USBPHY_DIRECT_TX_DM_OE()
    {
        USBPHY_DIRECT &= ~(1u << 9u);
    }

    /**
     * Toggle USBPHY_DIRECT's TX_DM_OE bit.
     */
    inline void toggle_USBPHY_DIRECT_TX_DM_OE()
    {
        USBPHY_DIRECT ^= 1u << 9u;
    }

    /**
     * Get USBPHY_DIRECT's TX_DP bit.
     */
    bool get_USBPHY_DIRECT_TX_DP()
    {
        return USBPHY_DIRECT & (1u << 10u);
    }

    /**
     * Set USBPHY_DIRECT's TX_DP bit.
     */
    inline void set_USBPHY_DIRECT_TX_DP()
    {
        USBPHY_DIRECT |= 1u << 10u;
    }

    /**
     * Clear USBPHY_DIRECT's TX_DP bit.
     */
    inline void clear_USBPHY_DIRECT_TX_DP()
    {
        USBPHY_DIRECT &= ~(1u << 10u);
    }

    /**
     * Toggle USBPHY_DIRECT's TX_DP bit.
     */
    inline void toggle_USBPHY_DIRECT_TX_DP()
    {
        USBPHY_DIRECT ^= 1u << 10u;
    }

    /**
     * Get USBPHY_DIRECT's TX_DM bit.
     */
    bool get_USBPHY_DIRECT_TX_DM()
    {
        return USBPHY_DIRECT & (1u << 11u);
    }

    /**
     * Set USBPHY_DIRECT's TX_DM bit.
     */
    inline void set_USBPHY_DIRECT_TX_DM()
    {
        USBPHY_DIRECT |= 1u << 11u;
    }

    /**
     * Clear USBPHY_DIRECT's TX_DM bit.
     */
    inline void clear_USBPHY_DIRECT_TX_DM()
    {
        USBPHY_DIRECT &= ~(1u << 11u);
    }

    /**
     * Toggle USBPHY_DIRECT's TX_DM bit.
     */
    inline void toggle_USBPHY_DIRECT_TX_DM()
    {
        USBPHY_DIRECT ^= 1u << 11u;
    }

    /**
     * Get USBPHY_DIRECT's RX_PD bit.
     */
    bool get_USBPHY_DIRECT_RX_PD()
    {
        return USBPHY_DIRECT & (1u << 12u);
    }

    /**
     * Set USBPHY_DIRECT's RX_PD bit.
     */
    inline void set_USBPHY_DIRECT_RX_PD()
    {
        USBPHY_DIRECT |= 1u << 12u;
    }

    /**
     * Clear USBPHY_DIRECT's RX_PD bit.
     */
    inline void clear_USBPHY_DIRECT_RX_PD()
    {
        USBPHY_DIRECT &= ~(1u << 12u);
    }

    /**
     * Toggle USBPHY_DIRECT's RX_PD bit.
     */
    inline void toggle_USBPHY_DIRECT_RX_PD()
    {
        USBPHY_DIRECT ^= 1u << 12u;
    }

    /**
     * Get USBPHY_DIRECT's TX_PD bit.
     */
    bool get_USBPHY_DIRECT_TX_PD()
    {
        return USBPHY_DIRECT & (1u << 13u);
    }

    /**
     * Set USBPHY_DIRECT's TX_PD bit.
     */
    inline void set_USBPHY_DIRECT_TX_PD()
    {
        USBPHY_DIRECT |= 1u << 13u;
    }

    /**
     * Clear USBPHY_DIRECT's TX_PD bit.
     */
    inline void clear_USBPHY_DIRECT_TX_PD()
    {
        USBPHY_DIRECT &= ~(1u << 13u);
    }

    /**
     * Toggle USBPHY_DIRECT's TX_PD bit.
     */
    inline void toggle_USBPHY_DIRECT_TX_PD()
    {
        USBPHY_DIRECT ^= 1u << 13u;
    }

    /**
     * Get USBPHY_DIRECT's TX_FSSLEW bit.
     */
    bool get_USBPHY_DIRECT_TX_FSSLEW()
    {
        return USBPHY_DIRECT & (1u << 14u);
    }

    /**
     * Set USBPHY_DIRECT's TX_FSSLEW bit.
     */
    inline void set_USBPHY_DIRECT_TX_FSSLEW()
    {
        USBPHY_DIRECT |= 1u << 14u;
    }

    /**
     * Clear USBPHY_DIRECT's TX_FSSLEW bit.
     */
    inline void clear_USBPHY_DIRECT_TX_FSSLEW()
    {
        USBPHY_DIRECT &= ~(1u << 14u);
    }

    /**
     * Toggle USBPHY_DIRECT's TX_FSSLEW bit.
     */
    inline void toggle_USBPHY_DIRECT_TX_FSSLEW()
    {
        USBPHY_DIRECT ^= 1u << 14u;
    }

    /**
     * Get USBPHY_DIRECT's TX_DIFFMODE bit.
     */
    bool get_USBPHY_DIRECT_TX_DIFFMODE()
    {
        return USBPHY_DIRECT & (1u << 15u);
    }

    /**
     * Set USBPHY_DIRECT's TX_DIFFMODE bit.
     */
    inline void set_USBPHY_DIRECT_TX_DIFFMODE()
    {
        USBPHY_DIRECT |= 1u << 15u;
    }

    /**
     * Clear USBPHY_DIRECT's TX_DIFFMODE bit.
     */
    inline void clear_USBPHY_DIRECT_TX_DIFFMODE()
    {
        USBPHY_DIRECT &= ~(1u << 15u);
    }

    /**
     * Toggle USBPHY_DIRECT's TX_DIFFMODE bit.
     */
    inline void toggle_USBPHY_DIRECT_TX_DIFFMODE()
    {
        USBPHY_DIRECT ^= 1u << 15u;
    }

    /**
     * Get USBPHY_DIRECT's RX_DD bit.
     */
    bool get_USBPHY_DIRECT_RX_DD()
    {
        return USBPHY_DIRECT & (1u << 16u);
    }

    /**
     * Get USBPHY_DIRECT's RX_DP bit.
     */
    bool get_USBPHY_DIRECT_RX_DP()
    {
        return USBPHY_DIRECT & (1u << 17u);
    }

    /**
     * Get USBPHY_DIRECT's RX_DM bit.
     */
    bool get_USBPHY_DIRECT_RX_DM()
    {
        return USBPHY_DIRECT & (1u << 18u);
    }

    /**
     * Get USBPHY_DIRECT's DP_OVCN bit.
     */
    bool get_USBPHY_DIRECT_DP_OVCN()
    {
        return USBPHY_DIRECT & (1u << 19u);
    }

    /**
     * Get USBPHY_DIRECT's DM_OVCN bit.
     */
    bool get_USBPHY_DIRECT_DM_OVCN()
    {
        return USBPHY_DIRECT & (1u << 20u);
    }

    /**
     * Get USBPHY_DIRECT's DP_OVV bit.
     */
    bool get_USBPHY_DIRECT_DP_OVV()
    {
        return USBPHY_DIRECT & (1u << 21u);
    }

    /**
     * Get USBPHY_DIRECT's DM_OVV bit.
     */
    bool get_USBPHY_DIRECT_DM_OVV()
    {
        return USBPHY_DIRECT & (1u << 22u);
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's DP_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_HISEL_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 0u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's DP_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_HISEL_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 0u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's DP_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_HISEL_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 0u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's DP_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_HISEL_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 0u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's DM_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_HISEL_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 1u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's DM_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_HISEL_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 1u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's DM_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_HISEL_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 1u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's DM_PULLUP_HISEL_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_HISEL_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 1u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's DP_PULLUP_EN_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_EN_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 2u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's DP_PULLUP_EN_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 2u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's DP_PULLUP_EN_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 2u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's DP_PULLUP_EN_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_DP_PULLUP_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 2u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's DP_PULLDN_EN_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_DP_PULLDN_EN_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 3u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's DP_PULLDN_EN_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_DP_PULLDN_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 3u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's DP_PULLDN_EN_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_DP_PULLDN_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 3u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's DP_PULLDN_EN_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_DP_PULLDN_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 3u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's DM_PULLDN_EN_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_DM_PULLDN_EN_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 4u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's DM_PULLDN_EN_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_DM_PULLDN_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 4u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's DM_PULLDN_EN_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_DM_PULLDN_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 4u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's DM_PULLDN_EN_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_DM_PULLDN_EN_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 4u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's TX_DP_OE_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_TX_DP_OE_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 5u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's TX_DP_OE_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_TX_DP_OE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 5u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's TX_DP_OE_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_TX_DP_OE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 5u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's TX_DP_OE_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_TX_DP_OE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 5u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's TX_DM_OE_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_TX_DM_OE_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 6u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's TX_DM_OE_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_TX_DM_OE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 6u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's TX_DM_OE_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_TX_DM_OE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 6u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's TX_DM_OE_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_TX_DM_OE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 6u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's TX_DP_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_TX_DP_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 7u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's TX_DP_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_TX_DP_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 7u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's TX_DP_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_TX_DP_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 7u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's TX_DP_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_TX_DP_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 7u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's TX_DM_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_TX_DM_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 8u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's TX_DM_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_TX_DM_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 8u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's TX_DM_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_TX_DM_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 8u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's TX_DM_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_TX_DM_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 8u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's RX_PD_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_RX_PD_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 9u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's RX_PD_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_RX_PD_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 9u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's RX_PD_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_RX_PD_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 9u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's RX_PD_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_RX_PD_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 9u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's TX_PD_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_TX_PD_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 10u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's TX_PD_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_TX_PD_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 10u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's TX_PD_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_TX_PD_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 10u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's TX_PD_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_TX_PD_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 10u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's TX_FSSLEW_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_TX_FSSLEW_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 11u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's TX_FSSLEW_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_TX_FSSLEW_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 11u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's TX_FSSLEW_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_TX_FSSLEW_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 11u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's TX_FSSLEW_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_TX_FSSLEW_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 11u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's DM_PULLUP_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 12u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's DM_PULLUP_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 12u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's DM_PULLUP_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 12u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's DM_PULLUP_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_DM_PULLUP_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 12u;
    }

    /**
     * Get USBPHY_DIRECT_OVERRIDE's TX_DIFFMODE_OVERRIDE_EN bit.
     */
    bool get_USBPHY_DIRECT_OVERRIDE_TX_DIFFMODE_OVERRIDE_EN()
    {
        return USBPHY_DIRECT_OVERRIDE & (1u << 15u);
    }

    /**
     * Set USBPHY_DIRECT_OVERRIDE's TX_DIFFMODE_OVERRIDE_EN bit.
     */
    inline void set_USBPHY_DIRECT_OVERRIDE_TX_DIFFMODE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE |= 1u << 15u;
    }

    /**
     * Clear USBPHY_DIRECT_OVERRIDE's TX_DIFFMODE_OVERRIDE_EN bit.
     */
    inline void clear_USBPHY_DIRECT_OVERRIDE_TX_DIFFMODE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE &= ~(1u << 15u);
    }

    /**
     * Toggle USBPHY_DIRECT_OVERRIDE's TX_DIFFMODE_OVERRIDE_EN bit.
     */
    inline void toggle_USBPHY_DIRECT_OVERRIDE_TX_DIFFMODE_OVERRIDE_EN()
    {
        USBPHY_DIRECT_OVERRIDE ^= 1u << 15u;
    }

    /**
     * Get USBPHY_TRIM's DP_PULLDN_TRIM field.
     */
    uint8_t get_USBPHY_TRIM_DP_PULLDN_TRIM()
    {
        return (USBPHY_TRIM >> 0u) & 0b11111u;
    }

    /**
     * Set USBPHY_TRIM's DP_PULLDN_TRIM field.
     */
    inline void set_USBPHY_TRIM_DP_PULLDN_TRIM(uint8_t value)
    {
        uint32_t curr = USBPHY_TRIM;

        curr &= ~(0b11111u << 0u);
        curr |= (value & 0b11111u) << 0u;

        USBPHY_TRIM = curr;
    }

    /**
     * Get USBPHY_TRIM's DM_PULLDN_TRIM field.
     */
    uint8_t get_USBPHY_TRIM_DM_PULLDN_TRIM()
    {
        return (USBPHY_TRIM >> 8u) & 0b11111u;
    }

    /**
     * Set USBPHY_TRIM's DM_PULLDN_TRIM field.
     */
    inline void set_USBPHY_TRIM_DM_PULLDN_TRIM(uint8_t value)
    {
        uint32_t curr = USBPHY_TRIM;

        curr &= ~(0b11111u << 8u);
        curr |= (value & 0b11111u) << 8u;

        USBPHY_TRIM = curr;
    }

    /**
     * Get INTR's HOST_CONN_DIS bit.
     */
    bool get_INTR_HOST_CONN_DIS()
    {
        return INTR & (1u << 0u);
    }

    /**
     * Get INTR's HOST_RESUME bit.
     */
    bool get_INTR_HOST_RESUME()
    {
        return INTR & (1u << 1u);
    }

    /**
     * Get INTR's HOST_SOF bit.
     */
    bool get_INTR_HOST_SOF()
    {
        return INTR & (1u << 2u);
    }

    /**
     * Get INTR's TRANS_COMPLETE bit.
     */
    bool get_INTR_TRANS_COMPLETE()
    {
        return INTR & (1u << 3u);
    }

    /**
     * Get INTR's BUFF_STATUS bit.
     */
    bool get_INTR_BUFF_STATUS()
    {
        return INTR & (1u << 4u);
    }

    /**
     * Get INTR's ERROR_DATA_SEQ bit.
     */
    bool get_INTR_ERROR_DATA_SEQ()
    {
        return INTR & (1u << 5u);
    }

    /**
     * Get INTR's ERROR_RX_TIMEOUT bit.
     */
    bool get_INTR_ERROR_RX_TIMEOUT()
    {
        return INTR & (1u << 6u);
    }

    /**
     * Get INTR's ERROR_RX_OVERFLOW bit.
     */
    bool get_INTR_ERROR_RX_OVERFLOW()
    {
        return INTR & (1u << 7u);
    }

    /**
     * Get INTR's ERROR_BIT_STUFF bit.
     */
    bool get_INTR_ERROR_BIT_STUFF()
    {
        return INTR & (1u << 8u);
    }

    /**
     * Get INTR's ERROR_CRC bit.
     */
    bool get_INTR_ERROR_CRC()
    {
        return INTR & (1u << 9u);
    }

    /**
     * Get INTR's STALL bit.
     */
    bool get_INTR_STALL()
    {
        return INTR & (1u << 10u);
    }

    /**
     * Get INTR's VBUS_DETECT bit.
     */
    bool get_INTR_VBUS_DETECT()
    {
        return INTR & (1u << 11u);
    }

    /**
     * Get INTR's BUS_RESET bit.
     */
    bool get_INTR_BUS_RESET()
    {
        return INTR & (1u << 12u);
    }

    /**
     * Get INTR's DEV_CONN_DIS bit.
     */
    bool get_INTR_DEV_CONN_DIS()
    {
        return INTR & (1u << 13u);
    }

    /**
     * Get INTR's DEV_SUSPEND bit.
     */
    bool get_INTR_DEV_SUSPEND()
    {
        return INTR & (1u << 14u);
    }

    /**
     * Get INTR's DEV_RESUME_FROM_HOST bit.
     */
    bool get_INTR_DEV_RESUME_FROM_HOST()
    {
        return INTR & (1u << 15u);
    }

    /**
     * Get INTR's SETUP_REQ bit.
     */
    bool get_INTR_SETUP_REQ()
    {
        return INTR & (1u << 16u);
    }

    /**
     * Get INTR's DEV_SOF bit.
     */
    bool get_INTR_DEV_SOF()
    {
        return INTR & (1u << 17u);
    }

    /**
     * Get INTR's ABORT_DONE bit.
     */
    bool get_INTR_ABORT_DONE()
    {
        return INTR & (1u << 18u);
    }

    /**
     * Get INTR's EP_STALL_NAK bit.
     */
    bool get_INTR_EP_STALL_NAK()
    {
        return INTR & (1u << 19u);
    }

    /**
     * Get INTE's HOST_CONN_DIS bit.
     */
    bool get_INTE_HOST_CONN_DIS()
    {
        return INTE & (1u << 0u);
    }

    /**
     * Set INTE's HOST_CONN_DIS bit.
     */
    inline void set_INTE_HOST_CONN_DIS()
    {
        INTE |= 1u << 0u;
    }

    /**
     * Clear INTE's HOST_CONN_DIS bit.
     */
    inline void clear_INTE_HOST_CONN_DIS()
    {
        INTE &= ~(1u << 0u);
    }

    /**
     * Toggle INTE's HOST_CONN_DIS bit.
     */
    inline void toggle_INTE_HOST_CONN_DIS()
    {
        INTE ^= 1u << 0u;
    }

    /**
     * Get INTE's HOST_RESUME bit.
     */
    bool get_INTE_HOST_RESUME()
    {
        return INTE & (1u << 1u);
    }

    /**
     * Set INTE's HOST_RESUME bit.
     */
    inline void set_INTE_HOST_RESUME()
    {
        INTE |= 1u << 1u;
    }

    /**
     * Clear INTE's HOST_RESUME bit.
     */
    inline void clear_INTE_HOST_RESUME()
    {
        INTE &= ~(1u << 1u);
    }

    /**
     * Toggle INTE's HOST_RESUME bit.
     */
    inline void toggle_INTE_HOST_RESUME()
    {
        INTE ^= 1u << 1u;
    }

    /**
     * Get INTE's HOST_SOF bit.
     */
    bool get_INTE_HOST_SOF()
    {
        return INTE & (1u << 2u);
    }

    /**
     * Set INTE's HOST_SOF bit.
     */
    inline void set_INTE_HOST_SOF()
    {
        INTE |= 1u << 2u;
    }

    /**
     * Clear INTE's HOST_SOF bit.
     */
    inline void clear_INTE_HOST_SOF()
    {
        INTE &= ~(1u << 2u);
    }

    /**
     * Toggle INTE's HOST_SOF bit.
     */
    inline void toggle_INTE_HOST_SOF()
    {
        INTE ^= 1u << 2u;
    }

    /**
     * Get INTE's TRANS_COMPLETE bit.
     */
    bool get_INTE_TRANS_COMPLETE()
    {
        return INTE & (1u << 3u);
    }

    /**
     * Set INTE's TRANS_COMPLETE bit.
     */
    inline void set_INTE_TRANS_COMPLETE()
    {
        INTE |= 1u << 3u;
    }

    /**
     * Clear INTE's TRANS_COMPLETE bit.
     */
    inline void clear_INTE_TRANS_COMPLETE()
    {
        INTE &= ~(1u << 3u);
    }

    /**
     * Toggle INTE's TRANS_COMPLETE bit.
     */
    inline void toggle_INTE_TRANS_COMPLETE()
    {
        INTE ^= 1u << 3u;
    }

    /**
     * Get INTE's BUFF_STATUS bit.
     */
    bool get_INTE_BUFF_STATUS()
    {
        return INTE & (1u << 4u);
    }

    /**
     * Set INTE's BUFF_STATUS bit.
     */
    inline void set_INTE_BUFF_STATUS()
    {
        INTE |= 1u << 4u;
    }

    /**
     * Clear INTE's BUFF_STATUS bit.
     */
    inline void clear_INTE_BUFF_STATUS()
    {
        INTE &= ~(1u << 4u);
    }

    /**
     * Toggle INTE's BUFF_STATUS bit.
     */
    inline void toggle_INTE_BUFF_STATUS()
    {
        INTE ^= 1u << 4u;
    }

    /**
     * Get INTE's ERROR_DATA_SEQ bit.
     */
    bool get_INTE_ERROR_DATA_SEQ()
    {
        return INTE & (1u << 5u);
    }

    /**
     * Set INTE's ERROR_DATA_SEQ bit.
     */
    inline void set_INTE_ERROR_DATA_SEQ()
    {
        INTE |= 1u << 5u;
    }

    /**
     * Clear INTE's ERROR_DATA_SEQ bit.
     */
    inline void clear_INTE_ERROR_DATA_SEQ()
    {
        INTE &= ~(1u << 5u);
    }

    /**
     * Toggle INTE's ERROR_DATA_SEQ bit.
     */
    inline void toggle_INTE_ERROR_DATA_SEQ()
    {
        INTE ^= 1u << 5u;
    }

    /**
     * Get INTE's ERROR_RX_TIMEOUT bit.
     */
    bool get_INTE_ERROR_RX_TIMEOUT()
    {
        return INTE & (1u << 6u);
    }

    /**
     * Set INTE's ERROR_RX_TIMEOUT bit.
     */
    inline void set_INTE_ERROR_RX_TIMEOUT()
    {
        INTE |= 1u << 6u;
    }

    /**
     * Clear INTE's ERROR_RX_TIMEOUT bit.
     */
    inline void clear_INTE_ERROR_RX_TIMEOUT()
    {
        INTE &= ~(1u << 6u);
    }

    /**
     * Toggle INTE's ERROR_RX_TIMEOUT bit.
     */
    inline void toggle_INTE_ERROR_RX_TIMEOUT()
    {
        INTE ^= 1u << 6u;
    }

    /**
     * Get INTE's ERROR_RX_OVERFLOW bit.
     */
    bool get_INTE_ERROR_RX_OVERFLOW()
    {
        return INTE & (1u << 7u);
    }

    /**
     * Set INTE's ERROR_RX_OVERFLOW bit.
     */
    inline void set_INTE_ERROR_RX_OVERFLOW()
    {
        INTE |= 1u << 7u;
    }

    /**
     * Clear INTE's ERROR_RX_OVERFLOW bit.
     */
    inline void clear_INTE_ERROR_RX_OVERFLOW()
    {
        INTE &= ~(1u << 7u);
    }

    /**
     * Toggle INTE's ERROR_RX_OVERFLOW bit.
     */
    inline void toggle_INTE_ERROR_RX_OVERFLOW()
    {
        INTE ^= 1u << 7u;
    }

    /**
     * Get INTE's ERROR_BIT_STUFF bit.
     */
    bool get_INTE_ERROR_BIT_STUFF()
    {
        return INTE & (1u << 8u);
    }

    /**
     * Set INTE's ERROR_BIT_STUFF bit.
     */
    inline void set_INTE_ERROR_BIT_STUFF()
    {
        INTE |= 1u << 8u;
    }

    /**
     * Clear INTE's ERROR_BIT_STUFF bit.
     */
    inline void clear_INTE_ERROR_BIT_STUFF()
    {
        INTE &= ~(1u << 8u);
    }

    /**
     * Toggle INTE's ERROR_BIT_STUFF bit.
     */
    inline void toggle_INTE_ERROR_BIT_STUFF()
    {
        INTE ^= 1u << 8u;
    }

    /**
     * Get INTE's ERROR_CRC bit.
     */
    bool get_INTE_ERROR_CRC()
    {
        return INTE & (1u << 9u);
    }

    /**
     * Set INTE's ERROR_CRC bit.
     */
    inline void set_INTE_ERROR_CRC()
    {
        INTE |= 1u << 9u;
    }

    /**
     * Clear INTE's ERROR_CRC bit.
     */
    inline void clear_INTE_ERROR_CRC()
    {
        INTE &= ~(1u << 9u);
    }

    /**
     * Toggle INTE's ERROR_CRC bit.
     */
    inline void toggle_INTE_ERROR_CRC()
    {
        INTE ^= 1u << 9u;
    }

    /**
     * Get INTE's STALL bit.
     */
    bool get_INTE_STALL()
    {
        return INTE & (1u << 10u);
    }

    /**
     * Set INTE's STALL bit.
     */
    inline void set_INTE_STALL()
    {
        INTE |= 1u << 10u;
    }

    /**
     * Clear INTE's STALL bit.
     */
    inline void clear_INTE_STALL()
    {
        INTE &= ~(1u << 10u);
    }

    /**
     * Toggle INTE's STALL bit.
     */
    inline void toggle_INTE_STALL()
    {
        INTE ^= 1u << 10u;
    }

    /**
     * Get INTE's VBUS_DETECT bit.
     */
    bool get_INTE_VBUS_DETECT()
    {
        return INTE & (1u << 11u);
    }

    /**
     * Set INTE's VBUS_DETECT bit.
     */
    inline void set_INTE_VBUS_DETECT()
    {
        INTE |= 1u << 11u;
    }

    /**
     * Clear INTE's VBUS_DETECT bit.
     */
    inline void clear_INTE_VBUS_DETECT()
    {
        INTE &= ~(1u << 11u);
    }

    /**
     * Toggle INTE's VBUS_DETECT bit.
     */
    inline void toggle_INTE_VBUS_DETECT()
    {
        INTE ^= 1u << 11u;
    }

    /**
     * Get INTE's BUS_RESET bit.
     */
    bool get_INTE_BUS_RESET()
    {
        return INTE & (1u << 12u);
    }

    /**
     * Set INTE's BUS_RESET bit.
     */
    inline void set_INTE_BUS_RESET()
    {
        INTE |= 1u << 12u;
    }

    /**
     * Clear INTE's BUS_RESET bit.
     */
    inline void clear_INTE_BUS_RESET()
    {
        INTE &= ~(1u << 12u);
    }

    /**
     * Toggle INTE's BUS_RESET bit.
     */
    inline void toggle_INTE_BUS_RESET()
    {
        INTE ^= 1u << 12u;
    }

    /**
     * Get INTE's DEV_CONN_DIS bit.
     */
    bool get_INTE_DEV_CONN_DIS()
    {
        return INTE & (1u << 13u);
    }

    /**
     * Set INTE's DEV_CONN_DIS bit.
     */
    inline void set_INTE_DEV_CONN_DIS()
    {
        INTE |= 1u << 13u;
    }

    /**
     * Clear INTE's DEV_CONN_DIS bit.
     */
    inline void clear_INTE_DEV_CONN_DIS()
    {
        INTE &= ~(1u << 13u);
    }

    /**
     * Toggle INTE's DEV_CONN_DIS bit.
     */
    inline void toggle_INTE_DEV_CONN_DIS()
    {
        INTE ^= 1u << 13u;
    }

    /**
     * Get INTE's DEV_SUSPEND bit.
     */
    bool get_INTE_DEV_SUSPEND()
    {
        return INTE & (1u << 14u);
    }

    /**
     * Set INTE's DEV_SUSPEND bit.
     */
    inline void set_INTE_DEV_SUSPEND()
    {
        INTE |= 1u << 14u;
    }

    /**
     * Clear INTE's DEV_SUSPEND bit.
     */
    inline void clear_INTE_DEV_SUSPEND()
    {
        INTE &= ~(1u << 14u);
    }

    /**
     * Toggle INTE's DEV_SUSPEND bit.
     */
    inline void toggle_INTE_DEV_SUSPEND()
    {
        INTE ^= 1u << 14u;
    }

    /**
     * Get INTE's DEV_RESUME_FROM_HOST bit.
     */
    bool get_INTE_DEV_RESUME_FROM_HOST()
    {
        return INTE & (1u << 15u);
    }

    /**
     * Set INTE's DEV_RESUME_FROM_HOST bit.
     */
    inline void set_INTE_DEV_RESUME_FROM_HOST()
    {
        INTE |= 1u << 15u;
    }

    /**
     * Clear INTE's DEV_RESUME_FROM_HOST bit.
     */
    inline void clear_INTE_DEV_RESUME_FROM_HOST()
    {
        INTE &= ~(1u << 15u);
    }

    /**
     * Toggle INTE's DEV_RESUME_FROM_HOST bit.
     */
    inline void toggle_INTE_DEV_RESUME_FROM_HOST()
    {
        INTE ^= 1u << 15u;
    }

    /**
     * Get INTE's SETUP_REQ bit.
     */
    bool get_INTE_SETUP_REQ()
    {
        return INTE & (1u << 16u);
    }

    /**
     * Set INTE's SETUP_REQ bit.
     */
    inline void set_INTE_SETUP_REQ()
    {
        INTE |= 1u << 16u;
    }

    /**
     * Clear INTE's SETUP_REQ bit.
     */
    inline void clear_INTE_SETUP_REQ()
    {
        INTE &= ~(1u << 16u);
    }

    /**
     * Toggle INTE's SETUP_REQ bit.
     */
    inline void toggle_INTE_SETUP_REQ()
    {
        INTE ^= 1u << 16u;
    }

    /**
     * Get INTE's DEV_SOF bit.
     */
    bool get_INTE_DEV_SOF()
    {
        return INTE & (1u << 17u);
    }

    /**
     * Set INTE's DEV_SOF bit.
     */
    inline void set_INTE_DEV_SOF()
    {
        INTE |= 1u << 17u;
    }

    /**
     * Clear INTE's DEV_SOF bit.
     */
    inline void clear_INTE_DEV_SOF()
    {
        INTE &= ~(1u << 17u);
    }

    /**
     * Toggle INTE's DEV_SOF bit.
     */
    inline void toggle_INTE_DEV_SOF()
    {
        INTE ^= 1u << 17u;
    }

    /**
     * Get INTE's ABORT_DONE bit.
     */
    bool get_INTE_ABORT_DONE()
    {
        return INTE & (1u << 18u);
    }

    /**
     * Set INTE's ABORT_DONE bit.
     */
    inline void set_INTE_ABORT_DONE()
    {
        INTE |= 1u << 18u;
    }

    /**
     * Clear INTE's ABORT_DONE bit.
     */
    inline void clear_INTE_ABORT_DONE()
    {
        INTE &= ~(1u << 18u);
    }

    /**
     * Toggle INTE's ABORT_DONE bit.
     */
    inline void toggle_INTE_ABORT_DONE()
    {
        INTE ^= 1u << 18u;
    }

    /**
     * Get INTE's EP_STALL_NAK bit.
     */
    bool get_INTE_EP_STALL_NAK()
    {
        return INTE & (1u << 19u);
    }

    /**
     * Set INTE's EP_STALL_NAK bit.
     */
    inline void set_INTE_EP_STALL_NAK()
    {
        INTE |= 1u << 19u;
    }

    /**
     * Clear INTE's EP_STALL_NAK bit.
     */
    inline void clear_INTE_EP_STALL_NAK()
    {
        INTE &= ~(1u << 19u);
    }

    /**
     * Toggle INTE's EP_STALL_NAK bit.
     */
    inline void toggle_INTE_EP_STALL_NAK()
    {
        INTE ^= 1u << 19u;
    }

    /**
     * Get INTF's HOST_CONN_DIS bit.
     */
    bool get_INTF_HOST_CONN_DIS()
    {
        return INTF & (1u << 0u);
    }

    /**
     * Set INTF's HOST_CONN_DIS bit.
     */
    inline void set_INTF_HOST_CONN_DIS()
    {
        INTF |= 1u << 0u;
    }

    /**
     * Clear INTF's HOST_CONN_DIS bit.
     */
    inline void clear_INTF_HOST_CONN_DIS()
    {
        INTF &= ~(1u << 0u);
    }

    /**
     * Toggle INTF's HOST_CONN_DIS bit.
     */
    inline void toggle_INTF_HOST_CONN_DIS()
    {
        INTF ^= 1u << 0u;
    }

    /**
     * Get INTF's HOST_RESUME bit.
     */
    bool get_INTF_HOST_RESUME()
    {
        return INTF & (1u << 1u);
    }

    /**
     * Set INTF's HOST_RESUME bit.
     */
    inline void set_INTF_HOST_RESUME()
    {
        INTF |= 1u << 1u;
    }

    /**
     * Clear INTF's HOST_RESUME bit.
     */
    inline void clear_INTF_HOST_RESUME()
    {
        INTF &= ~(1u << 1u);
    }

    /**
     * Toggle INTF's HOST_RESUME bit.
     */
    inline void toggle_INTF_HOST_RESUME()
    {
        INTF ^= 1u << 1u;
    }

    /**
     * Get INTF's HOST_SOF bit.
     */
    bool get_INTF_HOST_SOF()
    {
        return INTF & (1u << 2u);
    }

    /**
     * Set INTF's HOST_SOF bit.
     */
    inline void set_INTF_HOST_SOF()
    {
        INTF |= 1u << 2u;
    }

    /**
     * Clear INTF's HOST_SOF bit.
     */
    inline void clear_INTF_HOST_SOF()
    {
        INTF &= ~(1u << 2u);
    }

    /**
     * Toggle INTF's HOST_SOF bit.
     */
    inline void toggle_INTF_HOST_SOF()
    {
        INTF ^= 1u << 2u;
    }

    /**
     * Get INTF's TRANS_COMPLETE bit.
     */
    bool get_INTF_TRANS_COMPLETE()
    {
        return INTF & (1u << 3u);
    }

    /**
     * Set INTF's TRANS_COMPLETE bit.
     */
    inline void set_INTF_TRANS_COMPLETE()
    {
        INTF |= 1u << 3u;
    }

    /**
     * Clear INTF's TRANS_COMPLETE bit.
     */
    inline void clear_INTF_TRANS_COMPLETE()
    {
        INTF &= ~(1u << 3u);
    }

    /**
     * Toggle INTF's TRANS_COMPLETE bit.
     */
    inline void toggle_INTF_TRANS_COMPLETE()
    {
        INTF ^= 1u << 3u;
    }

    /**
     * Get INTF's BUFF_STATUS bit.
     */
    bool get_INTF_BUFF_STATUS()
    {
        return INTF & (1u << 4u);
    }

    /**
     * Set INTF's BUFF_STATUS bit.
     */
    inline void set_INTF_BUFF_STATUS()
    {
        INTF |= 1u << 4u;
    }

    /**
     * Clear INTF's BUFF_STATUS bit.
     */
    inline void clear_INTF_BUFF_STATUS()
    {
        INTF &= ~(1u << 4u);
    }

    /**
     * Toggle INTF's BUFF_STATUS bit.
     */
    inline void toggle_INTF_BUFF_STATUS()
    {
        INTF ^= 1u << 4u;
    }

    /**
     * Get INTF's ERROR_DATA_SEQ bit.
     */
    bool get_INTF_ERROR_DATA_SEQ()
    {
        return INTF & (1u << 5u);
    }

    /**
     * Set INTF's ERROR_DATA_SEQ bit.
     */
    inline void set_INTF_ERROR_DATA_SEQ()
    {
        INTF |= 1u << 5u;
    }

    /**
     * Clear INTF's ERROR_DATA_SEQ bit.
     */
    inline void clear_INTF_ERROR_DATA_SEQ()
    {
        INTF &= ~(1u << 5u);
    }

    /**
     * Toggle INTF's ERROR_DATA_SEQ bit.
     */
    inline void toggle_INTF_ERROR_DATA_SEQ()
    {
        INTF ^= 1u << 5u;
    }

    /**
     * Get INTF's ERROR_RX_TIMEOUT bit.
     */
    bool get_INTF_ERROR_RX_TIMEOUT()
    {
        return INTF & (1u << 6u);
    }

    /**
     * Set INTF's ERROR_RX_TIMEOUT bit.
     */
    inline void set_INTF_ERROR_RX_TIMEOUT()
    {
        INTF |= 1u << 6u;
    }

    /**
     * Clear INTF's ERROR_RX_TIMEOUT bit.
     */
    inline void clear_INTF_ERROR_RX_TIMEOUT()
    {
        INTF &= ~(1u << 6u);
    }

    /**
     * Toggle INTF's ERROR_RX_TIMEOUT bit.
     */
    inline void toggle_INTF_ERROR_RX_TIMEOUT()
    {
        INTF ^= 1u << 6u;
    }

    /**
     * Get INTF's ERROR_RX_OVERFLOW bit.
     */
    bool get_INTF_ERROR_RX_OVERFLOW()
    {
        return INTF & (1u << 7u);
    }

    /**
     * Set INTF's ERROR_RX_OVERFLOW bit.
     */
    inline void set_INTF_ERROR_RX_OVERFLOW()
    {
        INTF |= 1u << 7u;
    }

    /**
     * Clear INTF's ERROR_RX_OVERFLOW bit.
     */
    inline void clear_INTF_ERROR_RX_OVERFLOW()
    {
        INTF &= ~(1u << 7u);
    }

    /**
     * Toggle INTF's ERROR_RX_OVERFLOW bit.
     */
    inline void toggle_INTF_ERROR_RX_OVERFLOW()
    {
        INTF ^= 1u << 7u;
    }

    /**
     * Get INTF's ERROR_BIT_STUFF bit.
     */
    bool get_INTF_ERROR_BIT_STUFF()
    {
        return INTF & (1u << 8u);
    }

    /**
     * Set INTF's ERROR_BIT_STUFF bit.
     */
    inline void set_INTF_ERROR_BIT_STUFF()
    {
        INTF |= 1u << 8u;
    }

    /**
     * Clear INTF's ERROR_BIT_STUFF bit.
     */
    inline void clear_INTF_ERROR_BIT_STUFF()
    {
        INTF &= ~(1u << 8u);
    }

    /**
     * Toggle INTF's ERROR_BIT_STUFF bit.
     */
    inline void toggle_INTF_ERROR_BIT_STUFF()
    {
        INTF ^= 1u << 8u;
    }

    /**
     * Get INTF's ERROR_CRC bit.
     */
    bool get_INTF_ERROR_CRC()
    {
        return INTF & (1u << 9u);
    }

    /**
     * Set INTF's ERROR_CRC bit.
     */
    inline void set_INTF_ERROR_CRC()
    {
        INTF |= 1u << 9u;
    }

    /**
     * Clear INTF's ERROR_CRC bit.
     */
    inline void clear_INTF_ERROR_CRC()
    {
        INTF &= ~(1u << 9u);
    }

    /**
     * Toggle INTF's ERROR_CRC bit.
     */
    inline void toggle_INTF_ERROR_CRC()
    {
        INTF ^= 1u << 9u;
    }

    /**
     * Get INTF's STALL bit.
     */
    bool get_INTF_STALL()
    {
        return INTF & (1u << 10u);
    }

    /**
     * Set INTF's STALL bit.
     */
    inline void set_INTF_STALL()
    {
        INTF |= 1u << 10u;
    }

    /**
     * Clear INTF's STALL bit.
     */
    inline void clear_INTF_STALL()
    {
        INTF &= ~(1u << 10u);
    }

    /**
     * Toggle INTF's STALL bit.
     */
    inline void toggle_INTF_STALL()
    {
        INTF ^= 1u << 10u;
    }

    /**
     * Get INTF's VBUS_DETECT bit.
     */
    bool get_INTF_VBUS_DETECT()
    {
        return INTF & (1u << 11u);
    }

    /**
     * Set INTF's VBUS_DETECT bit.
     */
    inline void set_INTF_VBUS_DETECT()
    {
        INTF |= 1u << 11u;
    }

    /**
     * Clear INTF's VBUS_DETECT bit.
     */
    inline void clear_INTF_VBUS_DETECT()
    {
        INTF &= ~(1u << 11u);
    }

    /**
     * Toggle INTF's VBUS_DETECT bit.
     */
    inline void toggle_INTF_VBUS_DETECT()
    {
        INTF ^= 1u << 11u;
    }

    /**
     * Get INTF's BUS_RESET bit.
     */
    bool get_INTF_BUS_RESET()
    {
        return INTF & (1u << 12u);
    }

    /**
     * Set INTF's BUS_RESET bit.
     */
    inline void set_INTF_BUS_RESET()
    {
        INTF |= 1u << 12u;
    }

    /**
     * Clear INTF's BUS_RESET bit.
     */
    inline void clear_INTF_BUS_RESET()
    {
        INTF &= ~(1u << 12u);
    }

    /**
     * Toggle INTF's BUS_RESET bit.
     */
    inline void toggle_INTF_BUS_RESET()
    {
        INTF ^= 1u << 12u;
    }

    /**
     * Get INTF's DEV_CONN_DIS bit.
     */
    bool get_INTF_DEV_CONN_DIS()
    {
        return INTF & (1u << 13u);
    }

    /**
     * Set INTF's DEV_CONN_DIS bit.
     */
    inline void set_INTF_DEV_CONN_DIS()
    {
        INTF |= 1u << 13u;
    }

    /**
     * Clear INTF's DEV_CONN_DIS bit.
     */
    inline void clear_INTF_DEV_CONN_DIS()
    {
        INTF &= ~(1u << 13u);
    }

    /**
     * Toggle INTF's DEV_CONN_DIS bit.
     */
    inline void toggle_INTF_DEV_CONN_DIS()
    {
        INTF ^= 1u << 13u;
    }

    /**
     * Get INTF's DEV_SUSPEND bit.
     */
    bool get_INTF_DEV_SUSPEND()
    {
        return INTF & (1u << 14u);
    }

    /**
     * Set INTF's DEV_SUSPEND bit.
     */
    inline void set_INTF_DEV_SUSPEND()
    {
        INTF |= 1u << 14u;
    }

    /**
     * Clear INTF's DEV_SUSPEND bit.
     */
    inline void clear_INTF_DEV_SUSPEND()
    {
        INTF &= ~(1u << 14u);
    }

    /**
     * Toggle INTF's DEV_SUSPEND bit.
     */
    inline void toggle_INTF_DEV_SUSPEND()
    {
        INTF ^= 1u << 14u;
    }

    /**
     * Get INTF's DEV_RESUME_FROM_HOST bit.
     */
    bool get_INTF_DEV_RESUME_FROM_HOST()
    {
        return INTF & (1u << 15u);
    }

    /**
     * Set INTF's DEV_RESUME_FROM_HOST bit.
     */
    inline void set_INTF_DEV_RESUME_FROM_HOST()
    {
        INTF |= 1u << 15u;
    }

    /**
     * Clear INTF's DEV_RESUME_FROM_HOST bit.
     */
    inline void clear_INTF_DEV_RESUME_FROM_HOST()
    {
        INTF &= ~(1u << 15u);
    }

    /**
     * Toggle INTF's DEV_RESUME_FROM_HOST bit.
     */
    inline void toggle_INTF_DEV_RESUME_FROM_HOST()
    {
        INTF ^= 1u << 15u;
    }

    /**
     * Get INTF's SETUP_REQ bit.
     */
    bool get_INTF_SETUP_REQ()
    {
        return INTF & (1u << 16u);
    }

    /**
     * Set INTF's SETUP_REQ bit.
     */
    inline void set_INTF_SETUP_REQ()
    {
        INTF |= 1u << 16u;
    }

    /**
     * Clear INTF's SETUP_REQ bit.
     */
    inline void clear_INTF_SETUP_REQ()
    {
        INTF &= ~(1u << 16u);
    }

    /**
     * Toggle INTF's SETUP_REQ bit.
     */
    inline void toggle_INTF_SETUP_REQ()
    {
        INTF ^= 1u << 16u;
    }

    /**
     * Get INTF's DEV_SOF bit.
     */
    bool get_INTF_DEV_SOF()
    {
        return INTF & (1u << 17u);
    }

    /**
     * Set INTF's DEV_SOF bit.
     */
    inline void set_INTF_DEV_SOF()
    {
        INTF |= 1u << 17u;
    }

    /**
     * Clear INTF's DEV_SOF bit.
     */
    inline void clear_INTF_DEV_SOF()
    {
        INTF &= ~(1u << 17u);
    }

    /**
     * Toggle INTF's DEV_SOF bit.
     */
    inline void toggle_INTF_DEV_SOF()
    {
        INTF ^= 1u << 17u;
    }

    /**
     * Get INTF's ABORT_DONE bit.
     */
    bool get_INTF_ABORT_DONE()
    {
        return INTF & (1u << 18u);
    }

    /**
     * Set INTF's ABORT_DONE bit.
     */
    inline void set_INTF_ABORT_DONE()
    {
        INTF |= 1u << 18u;
    }

    /**
     * Clear INTF's ABORT_DONE bit.
     */
    inline void clear_INTF_ABORT_DONE()
    {
        INTF &= ~(1u << 18u);
    }

    /**
     * Toggle INTF's ABORT_DONE bit.
     */
    inline void toggle_INTF_ABORT_DONE()
    {
        INTF ^= 1u << 18u;
    }

    /**
     * Get INTF's EP_STALL_NAK bit.
     */
    bool get_INTF_EP_STALL_NAK()
    {
        return INTF & (1u << 19u);
    }

    /**
     * Set INTF's EP_STALL_NAK bit.
     */
    inline void set_INTF_EP_STALL_NAK()
    {
        INTF |= 1u << 19u;
    }

    /**
     * Clear INTF's EP_STALL_NAK bit.
     */
    inline void clear_INTF_EP_STALL_NAK()
    {
        INTF &= ~(1u << 19u);
    }

    /**
     * Toggle INTF's EP_STALL_NAK bit.
     */
    inline void toggle_INTF_EP_STALL_NAK()
    {
        INTF ^= 1u << 19u;
    }

    /**
     * Get INTS's HOST_CONN_DIS bit.
     */
    bool get_INTS_HOST_CONN_DIS()
    {
        return INTS & (1u << 0u);
    }

    /**
     * Get INTS's HOST_RESUME bit.
     */
    bool get_INTS_HOST_RESUME()
    {
        return INTS & (1u << 1u);
    }

    /**
     * Get INTS's HOST_SOF bit.
     */
    bool get_INTS_HOST_SOF()
    {
        return INTS & (1u << 2u);
    }

    /**
     * Get INTS's TRANS_COMPLETE bit.
     */
    bool get_INTS_TRANS_COMPLETE()
    {
        return INTS & (1u << 3u);
    }

    /**
     * Get INTS's BUFF_STATUS bit.
     */
    bool get_INTS_BUFF_STATUS()
    {
        return INTS & (1u << 4u);
    }

    /**
     * Get INTS's ERROR_DATA_SEQ bit.
     */
    bool get_INTS_ERROR_DATA_SEQ()
    {
        return INTS & (1u << 5u);
    }

    /**
     * Get INTS's ERROR_RX_TIMEOUT bit.
     */
    bool get_INTS_ERROR_RX_TIMEOUT()
    {
        return INTS & (1u << 6u);
    }

    /**
     * Get INTS's ERROR_RX_OVERFLOW bit.
     */
    bool get_INTS_ERROR_RX_OVERFLOW()
    {
        return INTS & (1u << 7u);
    }

    /**
     * Get INTS's ERROR_BIT_STUFF bit.
     */
    bool get_INTS_ERROR_BIT_STUFF()
    {
        return INTS & (1u << 8u);
    }

    /**
     * Get INTS's ERROR_CRC bit.
     */
    bool get_INTS_ERROR_CRC()
    {
        return INTS & (1u << 9u);
    }

    /**
     * Get INTS's STALL bit.
     */
    bool get_INTS_STALL()
    {
        return INTS & (1u << 10u);
    }

    /**
     * Get INTS's VBUS_DETECT bit.
     */
    bool get_INTS_VBUS_DETECT()
    {
        return INTS & (1u << 11u);
    }

    /**
     * Get INTS's BUS_RESET bit.
     */
    bool get_INTS_BUS_RESET()
    {
        return INTS & (1u << 12u);
    }

    /**
     * Get INTS's DEV_CONN_DIS bit.
     */
    bool get_INTS_DEV_CONN_DIS()
    {
        return INTS & (1u << 13u);
    }

    /**
     * Get INTS's DEV_SUSPEND bit.
     */
    bool get_INTS_DEV_SUSPEND()
    {
        return INTS & (1u << 14u);
    }

    /**
     * Get INTS's DEV_RESUME_FROM_HOST bit.
     */
    bool get_INTS_DEV_RESUME_FROM_HOST()
    {
        return INTS & (1u << 15u);
    }

    /**
     * Get INTS's SETUP_REQ bit.
     */
    bool get_INTS_SETUP_REQ()
    {
        return INTS & (1u << 16u);
    }

    /**
     * Get INTS's DEV_SOF bit.
     */
    bool get_INTS_DEV_SOF()
    {
        return INTS & (1u << 17u);
    }

    /**
     * Get INTS's ABORT_DONE bit.
     */
    bool get_INTS_ABORT_DONE()
    {
        return INTS & (1u << 18u);
    }

    /**
     * Get INTS's EP_STALL_NAK bit.
     */
    bool get_INTS_EP_STALL_NAK()
    {
        return INTS & (1u << 19u);
    }
};

static_assert(sizeof(usbctrl_regs) == usbctrl_regs::size);

static volatile usbctrl_regs *const USBCTRL_REGS = reinterpret_cast<usbctrl_regs *>(0x50110000);

}; // namespace RP2040
