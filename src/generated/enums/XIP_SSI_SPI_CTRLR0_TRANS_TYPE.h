/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace RP2040
{

enum class XIP_SSI_SPI_CTRLR0_TRANS_TYPE : uint8_t
{
    _1C1A /*!< Command and address both in standard SPI frame format */,
    _1C2A = 1 /*!< Command in standard SPI format, address in format specified
                 by FRF */
        ,
    _2C2A = 2 /*!< Command and address both in format specified by FRF (e.g.
                 Dual-SPI) */
};
static_assert(sizeof(XIP_SSI_SPI_CTRLR0_TRANS_TYPE) == 1);

/**
 * Converts XIP_SSI_SPI_CTRLR0_TRANS_TYPE to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(XIP_SSI_SPI_CTRLR0_TRANS_TYPE instance)
{
    const char *result = "UNKNOWN XIP_SSI_SPI_CTRLR0_TRANS_TYPE";

    switch (instance)
    {
    case XIP_SSI_SPI_CTRLR0_TRANS_TYPE::_1C1A:
        result = "_1C1A";
        break;
    case XIP_SSI_SPI_CTRLR0_TRANS_TYPE::_1C2A:
        result = "_1C2A";
        break;
    case XIP_SSI_SPI_CTRLR0_TRANS_TYPE::_2C2A:
        result = "_2C2A";
        break;
    }

    return result;
}

/**
 * Converts a C string to XIP_SSI_SPI_CTRLR0_TRANS_TYPE.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data,
                        XIP_SSI_SPI_CTRLR0_TRANS_TYPE &output)
{
    bool result = false;

    if ((result = !strncmp(data, "_1C1A", 5)))
    {
        output = XIP_SSI_SPI_CTRLR0_TRANS_TYPE::_1C1A;
    }
    else if ((result = !strncmp(data, "_1C2A", 5)))
    {
        output = XIP_SSI_SPI_CTRLR0_TRANS_TYPE::_1C2A;
    }
    else if ((result = !strncmp(data, "_2C2A", 5)))
    {
        output = XIP_SSI_SPI_CTRLR0_TRANS_TYPE::_2C2A;
    }

    return result;
}

}; // namespace RP2040
