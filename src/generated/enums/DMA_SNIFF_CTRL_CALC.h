/**
 * \file
 * \brief Generated by ifgen (3.1.6).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace RP2040
{

enum class DMA_SNIFF_CTRL_CALC : uint8_t
{
    CRC32 /*!< Calculate a CRC-32 (IEEE802.3 polynomial) */,
    CRC32R = 1 /*!< Calculate a CRC-32 (IEEE802.3 polynomial) with bit reversed
                  data */
        ,
    CRC16 = 2 /*!< Calculate a CRC-16-CCITT */,
    CRC16R = 3 /*!< Calculate a CRC-16-CCITT with bit reversed data */,
    EVEN = 14 /*!< XOR reduction over all data. == 1 if the total 1 population
                 count is odd. */
        ,
    SUM = 15 /*!< Calculate a simple 32-bit checksum (addition with a 32 bit
                accumulator) */
};
static_assert(sizeof(DMA_SNIFF_CTRL_CALC) == 1);

/**
 * Converts DMA_SNIFF_CTRL_CALC to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(DMA_SNIFF_CTRL_CALC instance)
{
    const char *result = "UNKNOWN DMA_SNIFF_CTRL_CALC";

    switch (instance)
    {
    case DMA_SNIFF_CTRL_CALC::CRC32:
        result = "CRC32";
        break;
    case DMA_SNIFF_CTRL_CALC::CRC32R:
        result = "CRC32R";
        break;
    case DMA_SNIFF_CTRL_CALC::CRC16:
        result = "CRC16";
        break;
    case DMA_SNIFF_CTRL_CALC::CRC16R:
        result = "CRC16R";
        break;
    case DMA_SNIFF_CTRL_CALC::EVEN:
        result = "EVEN";
        break;
    case DMA_SNIFF_CTRL_CALC::SUM:
        result = "SUM";
        break;
    }

    return result;
}

/**
 * Converts a C string to DMA_SNIFF_CTRL_CALC.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, DMA_SNIFF_CTRL_CALC &output)
{
    bool result = false;

    if ((result = !strncmp(data, "CRC32", 5)))
    {
        output = DMA_SNIFF_CTRL_CALC::CRC32;
    }
    else if ((result = !strncmp(data, "CRC32R", 6)))
    {
        output = DMA_SNIFF_CTRL_CALC::CRC32R;
    }
    else if ((result = !strncmp(data, "CRC16", 5)))
    {
        output = DMA_SNIFF_CTRL_CALC::CRC16;
    }
    else if ((result = !strncmp(data, "CRC16R", 6)))
    {
        output = DMA_SNIFF_CTRL_CALC::CRC16R;
    }
    else if ((result = !strncmp(data, "EVEN", 4)))
    {
        output = DMA_SNIFF_CTRL_CALC::EVEN;
    }
    else if ((result = !strncmp(data, "SUM", 3)))
    {
        output = DMA_SNIFF_CTRL_CALC::SUM;
    }

    return result;
}

}; // namespace RP2040
