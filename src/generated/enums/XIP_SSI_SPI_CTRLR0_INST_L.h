/**
 * \file
 * \brief Generated by ifgen (3.1.0).
 */
#pragma once

#include <cstdint>
#include <cstring>

namespace RP2040
{

enum class XIP_SSI_SPI_CTRLR0_INST_L : uint8_t
{
    NONE /*!< No instruction */,
    4B = 1 /*!< 4-bit instruction */,
    8B = 2 /*!< 8-bit instruction */,
    16B = 3 /*!< 16-bit instruction */
};
static_assert(sizeof(XIP_SSI_SPI_CTRLR0_INST_L) == 1);

/**
 * Converts XIP_SSI_SPI_CTRLR0_INST_L to a C string.
 *
 * \param[in] instance Value to convert.
 * \return             A C string representation of the value.
 */
inline const char *to_string(XIP_SSI_SPI_CTRLR0_INST_L instance)
{
    const char *result = "UNKNOWN XIP_SSI_SPI_CTRLR0_INST_L";

    switch (instance)
    {
    case XIP_SSI_SPI_CTRLR0_INST_L::NONE:
        result = "NONE";
        break;
    case XIP_SSI_SPI_CTRLR0_INST_L::4B:
        result = "4B";
        break;
    case XIP_SSI_SPI_CTRLR0_INST_L::8B:
        result = "8B";
        break;
    case XIP_SSI_SPI_CTRLR0_INST_L::16B:
        result = "16B";
        break;
    }

    return result;
}

/**
 * Converts a C string to XIP_SSI_SPI_CTRLR0_INST_L.
 *
 * \param[in]  data   A C string to convert.
 * \param[out] output The enumeration element to write.
 * \return            Whether or not the output was written.
 */
inline bool from_string(const char *data, XIP_SSI_SPI_CTRLR0_INST_L &output)
{
    bool result = false;

    if ((result = !strncmp(data, "NONE", 4)))
    {
        output = XIP_SSI_SPI_CTRLR0_INST_L::NONE;
    }
    else if ((result = !strncmp(data, "4B", 2)))
    {
        output = XIP_SSI_SPI_CTRLR0_INST_L::4B;
    }
    else if ((result = !strncmp(data, "8B", 2)))
    {
        output = XIP_SSI_SPI_CTRLR0_INST_L::8B;
    }
    else if ((result = !strncmp(data, "16B", 3)))
    {
        output = XIP_SSI_SPI_CTRLR0_INST_L::16B;
    }

    return result;
}

}; // namespace RP2040
