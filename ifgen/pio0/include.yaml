---
structs:
  pio0:
    description: Programmable IO block
    instances:
      - name: PIO0
        address: '0x50200000'
      - name: PIO1
        address: '0x50300000'
    fields:
      - name: CTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 0
        description: (read-write) PIO control register
        fields:
          - name: SM_ENABLE
            description: Enable/disable each of the four state machines by writing
              1/0 to each of these four bits. When disabled, a state machine will
              cease executing instructions, except those written directly to SMx_INSTR
              by the system. Multiple bits can be set/cleared at once to run/halt
              multiple state machines simultaneously.
            index: 0
            width: 4
            read: true
            write: true
          - name: SM_RESTART
            description: "Write 1 to instantly clear internal SM state which may be
              otherwise difficult to access and will affect future execution.\\n\\\
              n\n                Specifically, the following are cleared: input and
              output shift counters; the contents of the input shift register; the
              delay counter; the waiting-on-IRQ state; any stalled instruction written
              to SMx_INSTR or run by OUT/MOV EXEC; any pin write left asserted due
              to OUT_STICKY.\\n\\n\n                The program counter, the contents
              of the output shift register and the X/Y scratch registers are not affected."
            index: 4
            width: 4
            read: true
            write: true
          - name: CLKDIV_RESTART
            description: "Restart a state machine's clock divider from an initial
              phase of 0. Clock dividers are free-running, so once started, their
              output (including fractional jitter) is completely determined by the
              integer/fractional divisor configured in SMx_CLKDIV. This means that,
              if multiple clock dividers with the same divisor are restarted simultaneously,
              by writing multiple 1 bits to this field, the execution clocks of those
              state machines will run in precise lockstep.\\n\\n\n               \
              \ Note that setting/clearing SM_ENABLE does not stop the clock divider
              from running, so once multiple state machines' clocks are synchronised,
              it is safe to disable/reenable a state machine, whilst keeping the clock
              dividers in sync.\\n\\n\n                Note also that CLKDIV_RESTART
              can be written to whilst the state machine is running, and this is useful
              to resynchronise clock dividers after the divisors (SMx_CLKDIV) have
              been changed on-the-fly."
            index: 8
            width: 4
            read: true
            write: true
      - name: FSTAT
        type: uint32_t
        expected_size: 4
        expected_offset: 4
        const: true
        description: (read-only) FIFO status register
        fields:
          - name: RXFULL
            description: State machine RX FIFO is full
            index: 0
            width: 4
            read: true
            write: false
          - name: RXEMPTY
            description: State machine RX FIFO is empty
            index: 8
            width: 4
            read: true
            write: false
          - name: TXFULL
            description: State machine TX FIFO is full
            index: 16
            width: 4
            read: true
            write: false
          - name: TXEMPTY
            description: State machine TX FIFO is empty
            index: 24
            width: 4
            read: true
            write: false
      - name: FDEBUG
        type: uint32_t
        expected_size: 4
        expected_offset: 8
        description: (read-write) FIFO debug register
        fields:
          - name: RXSTALL
            description: State machine has stalled on full RX FIFO during a blocking
              PUSH, or an IN with autopush enabled. This flag is also set when a nonblocking
              PUSH to a full FIFO took place, in which case the state machine has
              dropped data. Write 1 to clear.
            index: 0
            width: 4
            read: true
            write: true
          - name: RXUNDER
            description: RX FIFO underflow (i.e. read-on-empty by the system) has
              occurred. Write 1 to clear. Note that read-on-empty does not perturb
              the state of the FIFO in any way, but the data returned by reading from
              an empty FIFO is undefined, so this flag generally only becomes set
              due to some kind of software error.
            index: 8
            width: 4
            read: true
            write: true
          - name: TXOVER
            description: TX FIFO overflow (i.e. write-on-full by the system) has occurred.
              Write 1 to clear. Note that write-on-full does not alter the state or
              contents of the FIFO in any way, but the data that the system attempted
              to write is dropped, so if this flag is set, your software has quite
              likely dropped some data on the floor.
            index: 16
            width: 4
            read: true
            write: true
          - name: TXSTALL
            description: State machine has stalled on empty TX FIFO during a blocking
              PULL, or an OUT with autopull enabled. Write 1 to clear.
            index: 24
            width: 4
            read: true
            write: true
      - name: FLEVEL
        type: uint32_t
        expected_size: 4
        expected_offset: 12
        const: true
        description: (read-only) FIFO levels
        fields:
          - name: TX0
            index: 0
            width: 4
            read: true
            write: false
          - name: RX0
            index: 4
            width: 4
            read: true
            write: false
          - name: TX1
            index: 8
            width: 4
            read: true
            write: false
          - name: RX1
            index: 12
            width: 4
            read: true
            write: false
          - name: TX2
            index: 16
            width: 4
            read: true
            write: false
          - name: RX2
            index: 20
            width: 4
            read: true
            write: false
          - name: TX3
            index: 24
            width: 4
            read: true
            write: false
          - name: RX3
            index: 28
            width: 4
            read: true
            write: false
      - name: TXF0
        type: uint32_t
        expected_size: 4
        expected_offset: 16
        description: (read-write) Direct write access to the TX FIFO for this state
          machine. Each write pushes one word to the FIFO. Attempting to write to
          a full FIFO has no effect on the FIFO state or contents, and sets the sticky
          FDEBUG_TXOVER error flag for this FIFO.
      - name: TXF1
        type: uint32_t
        expected_size: 4
        expected_offset: 20
        description: (read-write) Direct write access to the TX FIFO for this state
          machine. Each write pushes one word to the FIFO. Attempting to write to
          a full FIFO has no effect on the FIFO state or contents, and sets the sticky
          FDEBUG_TXOVER error flag for this FIFO.
      - name: TXF2
        type: uint32_t
        expected_size: 4
        expected_offset: 24
        description: (read-write) Direct write access to the TX FIFO for this state
          machine. Each write pushes one word to the FIFO. Attempting to write to
          a full FIFO has no effect on the FIFO state or contents, and sets the sticky
          FDEBUG_TXOVER error flag for this FIFO.
      - name: TXF3
        type: uint32_t
        expected_size: 4
        expected_offset: 28
        description: (read-write) Direct write access to the TX FIFO for this state
          machine. Each write pushes one word to the FIFO. Attempting to write to
          a full FIFO has no effect on the FIFO state or contents, and sets the sticky
          FDEBUG_TXOVER error flag for this FIFO.
      - name: RXF0
        type: uint32_t
        expected_size: 4
        expected_offset: 32
        description: (read-write) Direct read access to the RX FIFO for this state
          machine. Each read pops one word from the FIFO. Attempting to read from
          an empty FIFO has no effect on the FIFO state, and sets the sticky FDEBUG_RXUNDER
          error flag for this FIFO. The data returned to the system on a read from
          an empty FIFO is undefined.
      - name: RXF1
        type: uint32_t
        expected_size: 4
        expected_offset: 36
        description: (read-write) Direct read access to the RX FIFO for this state
          machine. Each read pops one word from the FIFO. Attempting to read from
          an empty FIFO has no effect on the FIFO state, and sets the sticky FDEBUG_RXUNDER
          error flag for this FIFO. The data returned to the system on a read from
          an empty FIFO is undefined.
      - name: RXF2
        type: uint32_t
        expected_size: 4
        expected_offset: 40
        description: (read-write) Direct read access to the RX FIFO for this state
          machine. Each read pops one word from the FIFO. Attempting to read from
          an empty FIFO has no effect on the FIFO state, and sets the sticky FDEBUG_RXUNDER
          error flag for this FIFO. The data returned to the system on a read from
          an empty FIFO is undefined.
      - name: RXF3
        type: uint32_t
        expected_size: 4
        expected_offset: 44
        description: (read-write) Direct read access to the RX FIFO for this state
          machine. Each read pops one word from the FIFO. Attempting to read from
          an empty FIFO has no effect on the FIFO state, and sets the sticky FDEBUG_RXUNDER
          error flag for this FIFO. The data returned to the system on a read from
          an empty FIFO is undefined.
      - name: IRQ
        type: uint32_t
        expected_size: 4
        expected_offset: 48
        description: "(read-write) State machine IRQ flags register. Write 1 to clear.
          There are 8 state machine IRQ flags, which can be set, cleared, and waited
          on by the state machines. There's no fixed association between flags and
          state machines -- any state machine can use any flag.\\n\\n\n          \
          \  Any of the 8 flags can be used for timing synchronisation between state
          machines, using IRQ and WAIT instructions. The lower four of these flags
          are also routed out to system-level interrupt requests, alongside FIFO status
          interrupts -- see e.g. IRQ0_INTE."
        fields:
          - name: IRQ
            index: 0
            width: 8
            read: true
            write: true
      - name: IRQ_FORCE
        type: uint32_t
        expected_size: 4
        expected_offset: 52
        description: '(write-only) Writing a 1 to each of these bits will forcibly
          assert the corresponding IRQ. Note this is different to the INTF register:
          writing here affects PIO internal state. INTF just asserts the processor-facing
          IRQ signal for testing ISRs, and is not visible to the state machines.'
        fields:
          - name: IRQ_FORCE
            index: 0
            width: 8
            read: false
            write: true
      - name: INPUT_SYNC_BYPASS
        type: uint32_t
        expected_size: 4
        expected_offset: 56
        description: "(read-write) There is a 2-flipflop synchronizer on each GPIO
          input, which protects PIO logic from metastabilities. This increases input
          delay, and for fast synchronous IO (e.g. SPI) these synchronizers may need
          to be bypassed. Each bit in this register corresponds to one GPIO.\\n\n\
          \            0 -> input is synchronized (default)\\n\n            1 -> synchronizer
          is bypassed\\n\n            If in doubt, leave this register as all zeroes."
      - name: DBG_PADOUT
        type: uint32_t
        expected_size: 4
        expected_offset: 60
        description: (read-write) Read to sample the pad output values PIO is currently
          driving to the GPIOs. On RP2040 there are 30 GPIOs, so the two most significant
          bits are hardwired to 0.
      - name: DBG_PADOE
        type: uint32_t
        expected_size: 4
        expected_offset: 64
        description: (read-write) Read to sample the pad output enables (direction)
          PIO is currently driving to the GPIOs. On RP2040 there are 30 GPIOs, so
          the two most significant bits are hardwired to 0.
      - name: DBG_CFGINFO
        type: uint32_t
        expected_size: 4
        expected_offset: 68
        const: true
        description: "(read-only) The PIO hardware has some free parameters that may
          vary between chip products.\\n\n            These should be provided in
          the chip datasheet, but are also exposed here."
        fields:
          - name: FIFO_DEPTH
            description: "The depth of the state machine TX/RX FIFOs, measured in
              words.\\n\n                Joining fifos via SHIFTCTRL_FJOIN gives one
              FIFO with double\\n\n                this depth."
            index: 0
            width: 6
            read: true
            write: false
          - name: SM_COUNT
            description: The number of state machines this PIO instance is equipped
              with.
            index: 8
            width: 4
            read: true
            write: false
          - name: IMEM_SIZE
            description: The size of the instruction memory, measured in units of
              one instruction
            index: 16
            width: 6
            read: true
            write: false
      - name: INSTR_MEM0
        type: uint32_t
        expected_size: 4
        expected_offset: 72
        description: (write-only) Write-only access to instruction memory location
          0
        fields:
          - name: INSTR_MEM0
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM1
        type: uint32_t
        expected_size: 4
        expected_offset: 76
        description: (write-only) Write-only access to instruction memory location
          1
        fields:
          - name: INSTR_MEM1
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM2
        type: uint32_t
        expected_size: 4
        expected_offset: 80
        description: (write-only) Write-only access to instruction memory location
          2
        fields:
          - name: INSTR_MEM2
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM3
        type: uint32_t
        expected_size: 4
        expected_offset: 84
        description: (write-only) Write-only access to instruction memory location
          3
        fields:
          - name: INSTR_MEM3
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM4
        type: uint32_t
        expected_size: 4
        expected_offset: 88
        description: (write-only) Write-only access to instruction memory location
          4
        fields:
          - name: INSTR_MEM4
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM5
        type: uint32_t
        expected_size: 4
        expected_offset: 92
        description: (write-only) Write-only access to instruction memory location
          5
        fields:
          - name: INSTR_MEM5
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM6
        type: uint32_t
        expected_size: 4
        expected_offset: 96
        description: (write-only) Write-only access to instruction memory location
          6
        fields:
          - name: INSTR_MEM6
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM7
        type: uint32_t
        expected_size: 4
        expected_offset: 100
        description: (write-only) Write-only access to instruction memory location
          7
        fields:
          - name: INSTR_MEM7
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM8
        type: uint32_t
        expected_size: 4
        expected_offset: 104
        description: (write-only) Write-only access to instruction memory location
          8
        fields:
          - name: INSTR_MEM8
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM9
        type: uint32_t
        expected_size: 4
        expected_offset: 108
        description: (write-only) Write-only access to instruction memory location
          9
        fields:
          - name: INSTR_MEM9
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM10
        type: uint32_t
        expected_size: 4
        expected_offset: 112
        description: (write-only) Write-only access to instruction memory location
          10
        fields:
          - name: INSTR_MEM10
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM11
        type: uint32_t
        expected_size: 4
        expected_offset: 116
        description: (write-only) Write-only access to instruction memory location
          11
        fields:
          - name: INSTR_MEM11
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM12
        type: uint32_t
        expected_size: 4
        expected_offset: 120
        description: (write-only) Write-only access to instruction memory location
          12
        fields:
          - name: INSTR_MEM12
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM13
        type: uint32_t
        expected_size: 4
        expected_offset: 124
        description: (write-only) Write-only access to instruction memory location
          13
        fields:
          - name: INSTR_MEM13
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM14
        type: uint32_t
        expected_size: 4
        expected_offset: 128
        description: (write-only) Write-only access to instruction memory location
          14
        fields:
          - name: INSTR_MEM14
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM15
        type: uint32_t
        expected_size: 4
        expected_offset: 132
        description: (write-only) Write-only access to instruction memory location
          15
        fields:
          - name: INSTR_MEM15
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM16
        type: uint32_t
        expected_size: 4
        expected_offset: 136
        description: (write-only) Write-only access to instruction memory location
          16
        fields:
          - name: INSTR_MEM16
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM17
        type: uint32_t
        expected_size: 4
        expected_offset: 140
        description: (write-only) Write-only access to instruction memory location
          17
        fields:
          - name: INSTR_MEM17
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM18
        type: uint32_t
        expected_size: 4
        expected_offset: 144
        description: (write-only) Write-only access to instruction memory location
          18
        fields:
          - name: INSTR_MEM18
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM19
        type: uint32_t
        expected_size: 4
        expected_offset: 148
        description: (write-only) Write-only access to instruction memory location
          19
        fields:
          - name: INSTR_MEM19
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM20
        type: uint32_t
        expected_size: 4
        expected_offset: 152
        description: (write-only) Write-only access to instruction memory location
          20
        fields:
          - name: INSTR_MEM20
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM21
        type: uint32_t
        expected_size: 4
        expected_offset: 156
        description: (write-only) Write-only access to instruction memory location
          21
        fields:
          - name: INSTR_MEM21
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM22
        type: uint32_t
        expected_size: 4
        expected_offset: 160
        description: (write-only) Write-only access to instruction memory location
          22
        fields:
          - name: INSTR_MEM22
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM23
        type: uint32_t
        expected_size: 4
        expected_offset: 164
        description: (write-only) Write-only access to instruction memory location
          23
        fields:
          - name: INSTR_MEM23
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM24
        type: uint32_t
        expected_size: 4
        expected_offset: 168
        description: (write-only) Write-only access to instruction memory location
          24
        fields:
          - name: INSTR_MEM24
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM25
        type: uint32_t
        expected_size: 4
        expected_offset: 172
        description: (write-only) Write-only access to instruction memory location
          25
        fields:
          - name: INSTR_MEM25
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM26
        type: uint32_t
        expected_size: 4
        expected_offset: 176
        description: (write-only) Write-only access to instruction memory location
          26
        fields:
          - name: INSTR_MEM26
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM27
        type: uint32_t
        expected_size: 4
        expected_offset: 180
        description: (write-only) Write-only access to instruction memory location
          27
        fields:
          - name: INSTR_MEM27
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM28
        type: uint32_t
        expected_size: 4
        expected_offset: 184
        description: (write-only) Write-only access to instruction memory location
          28
        fields:
          - name: INSTR_MEM28
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM29
        type: uint32_t
        expected_size: 4
        expected_offset: 188
        description: (write-only) Write-only access to instruction memory location
          29
        fields:
          - name: INSTR_MEM29
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM30
        type: uint32_t
        expected_size: 4
        expected_offset: 192
        description: (write-only) Write-only access to instruction memory location
          30
        fields:
          - name: INSTR_MEM30
            index: 0
            width: 16
            read: false
            write: true
      - name: INSTR_MEM31
        type: uint32_t
        expected_size: 4
        expected_offset: 196
        description: (write-only) Write-only access to instruction memory location
          31
        fields:
          - name: INSTR_MEM31
            index: 0
            width: 16
            read: false
            write: true
      - name: SM0_CLKDIV
        type: uint32_t
        expected_size: 4
        expected_offset: 200
        description: "(read-write) Clock divisor register for state machine 0\\n\n\
          \            Frequency = clock freq / (CLKDIV_INT + CLKDIV_FRAC / 256)"
        fields:
          - name: FRAC
            description: Fractional part of clock divisor
            index: 8
            width: 8
            read: true
            write: true
          - name: INT
            description: "Effective frequency is sysclk/(int + frac/256).\\n\n   \
              \             Value of 0 is interpreted as 65536. If INT is 0, FRAC
              must also be 0."
            index: 16
            width: 16
            read: true
            write: true
      - name: SM0_EXECCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 204
        description: (read-write) Execution/behavioural settings for state machine
          0
        fields:
          - name: STATUS_N
            description: Comparison level for the MOV x, STATUS instruction
            index: 0
            width: 4
            read: true
            write: true
          - name: STATUS_SEL
            description: Comparison used for the MOV x, STATUS instruction.
            index: 4
            width: 1
            read: true
            write: true
            type: PIO0_SM0_EXECCTRL_STATUS_SEL
          - name: WRAP_BOTTOM
            description: After reaching wrap_top, execution is wrapped to this address.
            index: 7
            width: 5
            read: true
            write: true
          - name: WRAP_TOP
            description: "After reaching this address, execution is wrapped to wrap_bottom.\\\
              n\n                If the instruction is a jump, and the jump condition
              is true, the jump takes priority."
            index: 12
            width: 5
            read: true
            write: true
          - name: OUT_STICKY
            description: Continuously assert the most recent OUT/SET to the pins
            index: 17
            width: 1
            read: true
            write: true
          - name: INLINE_OUT_EN
            description: "If 1, use a bit of OUT data as an auxiliary write enable\\\
              n\n                When used in conjunction with OUT_STICKY, writes
              with an enable of 0 will\\n\n                deassert the latest pin
              write. This can create useful masking/override behaviour\\n\n      \
              \          due to the priority ordering of state machine pin writes
              (SM0 < SM1 < ...)"
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_EN_SEL
            description: Which data bit to use for inline OUT enable
            index: 19
            width: 5
            read: true
            write: true
          - name: JMP_PIN
            description: The GPIO number to use as condition for JMP PIN. Unaffected
              by input mapping.
            index: 24
            width: 5
            read: true
            write: true
          - name: SIDE_PINDIR
            description: If 1, side-set data is asserted to pin directions, instead
              of pin values
            index: 29
            width: 1
            read: true
            write: true
          - name: SIDE_EN
            description: If 1, the MSB of the Delay/Side-set instruction field is
              used as side-set enable, rather than a side-set data bit. This allows
              instructions to perform side-set optionally, rather than on every instruction,
              but the maximum possible side-set width is reduced from 5 to 4. Note
              that the value of PINCTRL_SIDESET_COUNT is inclusive of this enable
              bit.
            index: 30
            width: 1
            read: true
            write: true
          - name: EXEC_STALLED
            description: If 1, an instruction written to SMx_INSTR is stalled, and
              latched by the state machine. Will clear to 0 once this instruction
              completes.
            index: 31
            width: 1
            read: true
            write: false
      - name: SM0_SHIFTCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 208
        description: (read-write) Control behaviour of the input/output shift registers
          for state machine 0
        fields:
          - name: AUTOPUSH
            description: Push automatically when the input shift register is filled,
              i.e. on an IN instruction which causes the input shift counter to reach
              or exceed PUSH_THRESH.
            index: 16
            width: 1
            read: true
            write: true
          - name: AUTOPULL
            description: Pull automatically when the output shift register is emptied,
              i.e. on or following an OUT instruction which causes the output shift
              counter to reach or exceed PULL_THRESH.
            index: 17
            width: 1
            read: true
            write: true
          - name: IN_SHIFTDIR
            description: 1 = shift input shift register to right (data enters from
              left). 0 = to left.
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_SHIFTDIR
            description: 1 = shift out of output shift register to right. 0 = to left.
            index: 19
            width: 1
            read: true
            write: true
          - name: PUSH_THRESH
            description: "Number of bits shifted into ISR before autopush, or conditional
              push (PUSH IFFULL), will take place.\\n\n                Write 0 for
              value of 32."
            index: 20
            width: 5
            read: true
            write: true
          - name: PULL_THRESH
            description: "Number of bits shifted out of OSR before autopull, or conditional
              pull (PULL IFEMPTY), will take place.\\n\n                Write 0 for
              value of 32."
            index: 25
            width: 5
            read: true
            write: true
          - name: FJOIN_TX
            description: "When 1, TX FIFO steals the RX FIFO's storage, and becomes
              twice as deep.\\n\n                RX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 30
            width: 1
            read: true
            write: true
          - name: FJOIN_RX
            description: "When 1, RX FIFO steals the TX FIFO's storage, and becomes
              twice as deep.\\n\n                TX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 31
            width: 1
            read: true
            write: true
      - name: SM0_ADDR
        type: uint32_t
        expected_size: 4
        expected_offset: 212
        const: true
        description: (read-only) Current instruction address of state machine 0
        fields:
          - name: SM0_ADDR
            index: 0
            width: 5
            read: true
            write: false
      - name: SM0_INSTR
        type: uint32_t
        expected_size: 4
        expected_offset: 216
        description: "(read-write) Read to see the instruction currently addressed
          by state machine 0's program counter\\n\n            Write to execute an
          instruction immediately (including jumps) and then resume execution."
        fields:
          - name: SM0_INSTR
            index: 0
            width: 16
            read: true
            write: true
      - name: SM0_PINCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 220
        description: (read-write) State machine pin control
        fields:
          - name: OUT_BASE
            description: The lowest-numbered pin that will be affected by an OUT PINS,
              OUT PINDIRS or MOV PINS instruction. The data written to this pin will
              always be the least-significant bit of the OUT or MOV data.
            index: 0
            width: 5
            read: true
            write: true
          - name: SET_BASE
            description: The lowest-numbered pin that will be affected by a SET PINS
              or SET PINDIRS instruction. The data written to this pin is the least-significant
              bit of the SET data.
            index: 5
            width: 5
            read: true
            write: true
          - name: SIDESET_BASE
            description: The lowest-numbered pin that will be affected by a side-set
              operation. The MSBs of an instruction's side-set/delay field (up to
              5, determined by SIDESET_COUNT) are used for side-set data, with the
              remaining LSBs used for delay. The least-significant bit of the side-set
              portion is the bit written to this pin, with more-significant bits written
              to higher-numbered pins.
            index: 10
            width: 5
            read: true
            write: true
          - name: IN_BASE
            description: The pin which is mapped to the least-significant bit of a
              state machine's IN data bus. Higher-numbered pins are mapped to consecutively
              more-significant data bits, with a modulo of 32 applied to pin number.
            index: 15
            width: 5
            read: true
            write: true
          - name: OUT_COUNT
            description: The number of pins asserted by an OUT PINS, OUT PINDIRS or
              MOV PINS instruction. In the range 0 to 32 inclusive.
            index: 20
            width: 6
            read: true
            write: true
          - name: SET_COUNT
            description: The number of pins asserted by a SET. In the range 0 to 5
              inclusive.
            index: 26
            width: 3
            read: true
            write: true
          - name: SIDESET_COUNT
            description: The number of MSBs of the Delay/Side-set instruction field
              which are used for side-set. Inclusive of the enable bit, if present.
              Minimum of 0 (all delay bits, no side-set) and maximum of 5 (all side-set,
              no delay).
            index: 29
            width: 3
            read: true
            write: true
      - name: SM1_CLKDIV
        type: uint32_t
        expected_size: 4
        expected_offset: 224
        description: "(read-write) Clock divisor register for state machine 1\\n\n\
          \            Frequency = clock freq / (CLKDIV_INT + CLKDIV_FRAC / 256)"
        fields:
          - name: FRAC
            description: Fractional part of clock divisor
            index: 8
            width: 8
            read: true
            write: true
          - name: INT
            description: "Effective frequency is sysclk/(int + frac/256).\\n\n   \
              \             Value of 0 is interpreted as 65536. If INT is 0, FRAC
              must also be 0."
            index: 16
            width: 16
            read: true
            write: true
      - name: SM1_EXECCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 228
        description: (read-write) Execution/behavioural settings for state machine
          1
        fields:
          - name: STATUS_N
            description: Comparison level for the MOV x, STATUS instruction
            index: 0
            width: 4
            read: true
            write: true
          - name: STATUS_SEL
            description: Comparison used for the MOV x, STATUS instruction.
            index: 4
            width: 1
            read: true
            write: true
            type: PIO0_SM1_EXECCTRL_STATUS_SEL
          - name: WRAP_BOTTOM
            description: After reaching wrap_top, execution is wrapped to this address.
            index: 7
            width: 5
            read: true
            write: true
          - name: WRAP_TOP
            description: "After reaching this address, execution is wrapped to wrap_bottom.\\\
              n\n                If the instruction is a jump, and the jump condition
              is true, the jump takes priority."
            index: 12
            width: 5
            read: true
            write: true
          - name: OUT_STICKY
            description: Continuously assert the most recent OUT/SET to the pins
            index: 17
            width: 1
            read: true
            write: true
          - name: INLINE_OUT_EN
            description: "If 1, use a bit of OUT data as an auxiliary write enable\\\
              n\n                When used in conjunction with OUT_STICKY, writes
              with an enable of 0 will\\n\n                deassert the latest pin
              write. This can create useful masking/override behaviour\\n\n      \
              \          due to the priority ordering of state machine pin writes
              (SM0 < SM1 < ...)"
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_EN_SEL
            description: Which data bit to use for inline OUT enable
            index: 19
            width: 5
            read: true
            write: true
          - name: JMP_PIN
            description: The GPIO number to use as condition for JMP PIN. Unaffected
              by input mapping.
            index: 24
            width: 5
            read: true
            write: true
          - name: SIDE_PINDIR
            description: If 1, side-set data is asserted to pin directions, instead
              of pin values
            index: 29
            width: 1
            read: true
            write: true
          - name: SIDE_EN
            description: If 1, the MSB of the Delay/Side-set instruction field is
              used as side-set enable, rather than a side-set data bit. This allows
              instructions to perform side-set optionally, rather than on every instruction,
              but the maximum possible side-set width is reduced from 5 to 4. Note
              that the value of PINCTRL_SIDESET_COUNT is inclusive of this enable
              bit.
            index: 30
            width: 1
            read: true
            write: true
          - name: EXEC_STALLED
            description: If 1, an instruction written to SMx_INSTR is stalled, and
              latched by the state machine. Will clear to 0 once this instruction
              completes.
            index: 31
            width: 1
            read: true
            write: false
      - name: SM1_SHIFTCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 232
        description: (read-write) Control behaviour of the input/output shift registers
          for state machine 1
        fields:
          - name: AUTOPUSH
            description: Push automatically when the input shift register is filled,
              i.e. on an IN instruction which causes the input shift counter to reach
              or exceed PUSH_THRESH.
            index: 16
            width: 1
            read: true
            write: true
          - name: AUTOPULL
            description: Pull automatically when the output shift register is emptied,
              i.e. on or following an OUT instruction which causes the output shift
              counter to reach or exceed PULL_THRESH.
            index: 17
            width: 1
            read: true
            write: true
          - name: IN_SHIFTDIR
            description: 1 = shift input shift register to right (data enters from
              left). 0 = to left.
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_SHIFTDIR
            description: 1 = shift out of output shift register to right. 0 = to left.
            index: 19
            width: 1
            read: true
            write: true
          - name: PUSH_THRESH
            description: "Number of bits shifted into ISR before autopush, or conditional
              push (PUSH IFFULL), will take place.\\n\n                Write 0 for
              value of 32."
            index: 20
            width: 5
            read: true
            write: true
          - name: PULL_THRESH
            description: "Number of bits shifted out of OSR before autopull, or conditional
              pull (PULL IFEMPTY), will take place.\\n\n                Write 0 for
              value of 32."
            index: 25
            width: 5
            read: true
            write: true
          - name: FJOIN_TX
            description: "When 1, TX FIFO steals the RX FIFO's storage, and becomes
              twice as deep.\\n\n                RX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 30
            width: 1
            read: true
            write: true
          - name: FJOIN_RX
            description: "When 1, RX FIFO steals the TX FIFO's storage, and becomes
              twice as deep.\\n\n                TX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 31
            width: 1
            read: true
            write: true
      - name: SM1_ADDR
        type: uint32_t
        expected_size: 4
        expected_offset: 236
        const: true
        description: (read-only) Current instruction address of state machine 1
        fields:
          - name: SM1_ADDR
            index: 0
            width: 5
            read: true
            write: false
      - name: SM1_INSTR
        type: uint32_t
        expected_size: 4
        expected_offset: 240
        description: "(read-write) Read to see the instruction currently addressed
          by state machine 1's program counter\\n\n            Write to execute an
          instruction immediately (including jumps) and then resume execution."
        fields:
          - name: SM1_INSTR
            index: 0
            width: 16
            read: true
            write: true
      - name: SM1_PINCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 244
        description: (read-write) State machine pin control
        fields:
          - name: OUT_BASE
            description: The lowest-numbered pin that will be affected by an OUT PINS,
              OUT PINDIRS or MOV PINS instruction. The data written to this pin will
              always be the least-significant bit of the OUT or MOV data.
            index: 0
            width: 5
            read: true
            write: true
          - name: SET_BASE
            description: The lowest-numbered pin that will be affected by a SET PINS
              or SET PINDIRS instruction. The data written to this pin is the least-significant
              bit of the SET data.
            index: 5
            width: 5
            read: true
            write: true
          - name: SIDESET_BASE
            description: The lowest-numbered pin that will be affected by a side-set
              operation. The MSBs of an instruction's side-set/delay field (up to
              5, determined by SIDESET_COUNT) are used for side-set data, with the
              remaining LSBs used for delay. The least-significant bit of the side-set
              portion is the bit written to this pin, with more-significant bits written
              to higher-numbered pins.
            index: 10
            width: 5
            read: true
            write: true
          - name: IN_BASE
            description: The pin which is mapped to the least-significant bit of a
              state machine's IN data bus. Higher-numbered pins are mapped to consecutively
              more-significant data bits, with a modulo of 32 applied to pin number.
            index: 15
            width: 5
            read: true
            write: true
          - name: OUT_COUNT
            description: The number of pins asserted by an OUT PINS, OUT PINDIRS or
              MOV PINS instruction. In the range 0 to 32 inclusive.
            index: 20
            width: 6
            read: true
            write: true
          - name: SET_COUNT
            description: The number of pins asserted by a SET. In the range 0 to 5
              inclusive.
            index: 26
            width: 3
            read: true
            write: true
          - name: SIDESET_COUNT
            description: The number of MSBs of the Delay/Side-set instruction field
              which are used for side-set. Inclusive of the enable bit, if present.
              Minimum of 0 (all delay bits, no side-set) and maximum of 5 (all side-set,
              no delay).
            index: 29
            width: 3
            read: true
            write: true
      - name: SM2_CLKDIV
        type: uint32_t
        expected_size: 4
        expected_offset: 248
        description: "(read-write) Clock divisor register for state machine 2\\n\n\
          \            Frequency = clock freq / (CLKDIV_INT + CLKDIV_FRAC / 256)"
        fields:
          - name: FRAC
            description: Fractional part of clock divisor
            index: 8
            width: 8
            read: true
            write: true
          - name: INT
            description: "Effective frequency is sysclk/(int + frac/256).\\n\n   \
              \             Value of 0 is interpreted as 65536. If INT is 0, FRAC
              must also be 0."
            index: 16
            width: 16
            read: true
            write: true
      - name: SM2_EXECCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 252
        description: (read-write) Execution/behavioural settings for state machine
          2
        fields:
          - name: STATUS_N
            description: Comparison level for the MOV x, STATUS instruction
            index: 0
            width: 4
            read: true
            write: true
          - name: STATUS_SEL
            description: Comparison used for the MOV x, STATUS instruction.
            index: 4
            width: 1
            read: true
            write: true
            type: PIO0_SM2_EXECCTRL_STATUS_SEL
          - name: WRAP_BOTTOM
            description: After reaching wrap_top, execution is wrapped to this address.
            index: 7
            width: 5
            read: true
            write: true
          - name: WRAP_TOP
            description: "After reaching this address, execution is wrapped to wrap_bottom.\\\
              n\n                If the instruction is a jump, and the jump condition
              is true, the jump takes priority."
            index: 12
            width: 5
            read: true
            write: true
          - name: OUT_STICKY
            description: Continuously assert the most recent OUT/SET to the pins
            index: 17
            width: 1
            read: true
            write: true
          - name: INLINE_OUT_EN
            description: "If 1, use a bit of OUT data as an auxiliary write enable\\\
              n\n                When used in conjunction with OUT_STICKY, writes
              with an enable of 0 will\\n\n                deassert the latest pin
              write. This can create useful masking/override behaviour\\n\n      \
              \          due to the priority ordering of state machine pin writes
              (SM0 < SM1 < ...)"
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_EN_SEL
            description: Which data bit to use for inline OUT enable
            index: 19
            width: 5
            read: true
            write: true
          - name: JMP_PIN
            description: The GPIO number to use as condition for JMP PIN. Unaffected
              by input mapping.
            index: 24
            width: 5
            read: true
            write: true
          - name: SIDE_PINDIR
            description: If 1, side-set data is asserted to pin directions, instead
              of pin values
            index: 29
            width: 1
            read: true
            write: true
          - name: SIDE_EN
            description: If 1, the MSB of the Delay/Side-set instruction field is
              used as side-set enable, rather than a side-set data bit. This allows
              instructions to perform side-set optionally, rather than on every instruction,
              but the maximum possible side-set width is reduced from 5 to 4. Note
              that the value of PINCTRL_SIDESET_COUNT is inclusive of this enable
              bit.
            index: 30
            width: 1
            read: true
            write: true
          - name: EXEC_STALLED
            description: If 1, an instruction written to SMx_INSTR is stalled, and
              latched by the state machine. Will clear to 0 once this instruction
              completes.
            index: 31
            width: 1
            read: true
            write: false
      - name: SM2_SHIFTCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 256
        description: (read-write) Control behaviour of the input/output shift registers
          for state machine 2
        fields:
          - name: AUTOPUSH
            description: Push automatically when the input shift register is filled,
              i.e. on an IN instruction which causes the input shift counter to reach
              or exceed PUSH_THRESH.
            index: 16
            width: 1
            read: true
            write: true
          - name: AUTOPULL
            description: Pull automatically when the output shift register is emptied,
              i.e. on or following an OUT instruction which causes the output shift
              counter to reach or exceed PULL_THRESH.
            index: 17
            width: 1
            read: true
            write: true
          - name: IN_SHIFTDIR
            description: 1 = shift input shift register to right (data enters from
              left). 0 = to left.
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_SHIFTDIR
            description: 1 = shift out of output shift register to right. 0 = to left.
            index: 19
            width: 1
            read: true
            write: true
          - name: PUSH_THRESH
            description: "Number of bits shifted into ISR before autopush, or conditional
              push (PUSH IFFULL), will take place.\\n\n                Write 0 for
              value of 32."
            index: 20
            width: 5
            read: true
            write: true
          - name: PULL_THRESH
            description: "Number of bits shifted out of OSR before autopull, or conditional
              pull (PULL IFEMPTY), will take place.\\n\n                Write 0 for
              value of 32."
            index: 25
            width: 5
            read: true
            write: true
          - name: FJOIN_TX
            description: "When 1, TX FIFO steals the RX FIFO's storage, and becomes
              twice as deep.\\n\n                RX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 30
            width: 1
            read: true
            write: true
          - name: FJOIN_RX
            description: "When 1, RX FIFO steals the TX FIFO's storage, and becomes
              twice as deep.\\n\n                TX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 31
            width: 1
            read: true
            write: true
      - name: SM2_ADDR
        type: uint32_t
        expected_size: 4
        expected_offset: 260
        const: true
        description: (read-only) Current instruction address of state machine 2
        fields:
          - name: SM2_ADDR
            index: 0
            width: 5
            read: true
            write: false
      - name: SM2_INSTR
        type: uint32_t
        expected_size: 4
        expected_offset: 264
        description: "(read-write) Read to see the instruction currently addressed
          by state machine 2's program counter\\n\n            Write to execute an
          instruction immediately (including jumps) and then resume execution."
        fields:
          - name: SM2_INSTR
            index: 0
            width: 16
            read: true
            write: true
      - name: SM2_PINCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 268
        description: (read-write) State machine pin control
        fields:
          - name: OUT_BASE
            description: The lowest-numbered pin that will be affected by an OUT PINS,
              OUT PINDIRS or MOV PINS instruction. The data written to this pin will
              always be the least-significant bit of the OUT or MOV data.
            index: 0
            width: 5
            read: true
            write: true
          - name: SET_BASE
            description: The lowest-numbered pin that will be affected by a SET PINS
              or SET PINDIRS instruction. The data written to this pin is the least-significant
              bit of the SET data.
            index: 5
            width: 5
            read: true
            write: true
          - name: SIDESET_BASE
            description: The lowest-numbered pin that will be affected by a side-set
              operation. The MSBs of an instruction's side-set/delay field (up to
              5, determined by SIDESET_COUNT) are used for side-set data, with the
              remaining LSBs used for delay. The least-significant bit of the side-set
              portion is the bit written to this pin, with more-significant bits written
              to higher-numbered pins.
            index: 10
            width: 5
            read: true
            write: true
          - name: IN_BASE
            description: The pin which is mapped to the least-significant bit of a
              state machine's IN data bus. Higher-numbered pins are mapped to consecutively
              more-significant data bits, with a modulo of 32 applied to pin number.
            index: 15
            width: 5
            read: true
            write: true
          - name: OUT_COUNT
            description: The number of pins asserted by an OUT PINS, OUT PINDIRS or
              MOV PINS instruction. In the range 0 to 32 inclusive.
            index: 20
            width: 6
            read: true
            write: true
          - name: SET_COUNT
            description: The number of pins asserted by a SET. In the range 0 to 5
              inclusive.
            index: 26
            width: 3
            read: true
            write: true
          - name: SIDESET_COUNT
            description: The number of MSBs of the Delay/Side-set instruction field
              which are used for side-set. Inclusive of the enable bit, if present.
              Minimum of 0 (all delay bits, no side-set) and maximum of 5 (all side-set,
              no delay).
            index: 29
            width: 3
            read: true
            write: true
      - name: SM3_CLKDIV
        type: uint32_t
        expected_size: 4
        expected_offset: 272
        description: "(read-write) Clock divisor register for state machine 3\\n\n\
          \            Frequency = clock freq / (CLKDIV_INT + CLKDIV_FRAC / 256)"
        fields:
          - name: FRAC
            description: Fractional part of clock divisor
            index: 8
            width: 8
            read: true
            write: true
          - name: INT
            description: "Effective frequency is sysclk/(int + frac/256).\\n\n   \
              \             Value of 0 is interpreted as 65536. If INT is 0, FRAC
              must also be 0."
            index: 16
            width: 16
            read: true
            write: true
      - name: SM3_EXECCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 276
        description: (read-write) Execution/behavioural settings for state machine
          3
        fields:
          - name: STATUS_N
            description: Comparison level for the MOV x, STATUS instruction
            index: 0
            width: 4
            read: true
            write: true
          - name: STATUS_SEL
            description: Comparison used for the MOV x, STATUS instruction.
            index: 4
            width: 1
            read: true
            write: true
            type: PIO0_SM3_EXECCTRL_STATUS_SEL
          - name: WRAP_BOTTOM
            description: After reaching wrap_top, execution is wrapped to this address.
            index: 7
            width: 5
            read: true
            write: true
          - name: WRAP_TOP
            description: "After reaching this address, execution is wrapped to wrap_bottom.\\\
              n\n                If the instruction is a jump, and the jump condition
              is true, the jump takes priority."
            index: 12
            width: 5
            read: true
            write: true
          - name: OUT_STICKY
            description: Continuously assert the most recent OUT/SET to the pins
            index: 17
            width: 1
            read: true
            write: true
          - name: INLINE_OUT_EN
            description: "If 1, use a bit of OUT data as an auxiliary write enable\\\
              n\n                When used in conjunction with OUT_STICKY, writes
              with an enable of 0 will\\n\n                deassert the latest pin
              write. This can create useful masking/override behaviour\\n\n      \
              \          due to the priority ordering of state machine pin writes
              (SM0 < SM1 < ...)"
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_EN_SEL
            description: Which data bit to use for inline OUT enable
            index: 19
            width: 5
            read: true
            write: true
          - name: JMP_PIN
            description: The GPIO number to use as condition for JMP PIN. Unaffected
              by input mapping.
            index: 24
            width: 5
            read: true
            write: true
          - name: SIDE_PINDIR
            description: If 1, side-set data is asserted to pin directions, instead
              of pin values
            index: 29
            width: 1
            read: true
            write: true
          - name: SIDE_EN
            description: If 1, the MSB of the Delay/Side-set instruction field is
              used as side-set enable, rather than a side-set data bit. This allows
              instructions to perform side-set optionally, rather than on every instruction,
              but the maximum possible side-set width is reduced from 5 to 4. Note
              that the value of PINCTRL_SIDESET_COUNT is inclusive of this enable
              bit.
            index: 30
            width: 1
            read: true
            write: true
          - name: EXEC_STALLED
            description: If 1, an instruction written to SMx_INSTR is stalled, and
              latched by the state machine. Will clear to 0 once this instruction
              completes.
            index: 31
            width: 1
            read: true
            write: false
      - name: SM3_SHIFTCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 280
        description: (read-write) Control behaviour of the input/output shift registers
          for state machine 3
        fields:
          - name: AUTOPUSH
            description: Push automatically when the input shift register is filled,
              i.e. on an IN instruction which causes the input shift counter to reach
              or exceed PUSH_THRESH.
            index: 16
            width: 1
            read: true
            write: true
          - name: AUTOPULL
            description: Pull automatically when the output shift register is emptied,
              i.e. on or following an OUT instruction which causes the output shift
              counter to reach or exceed PULL_THRESH.
            index: 17
            width: 1
            read: true
            write: true
          - name: IN_SHIFTDIR
            description: 1 = shift input shift register to right (data enters from
              left). 0 = to left.
            index: 18
            width: 1
            read: true
            write: true
          - name: OUT_SHIFTDIR
            description: 1 = shift out of output shift register to right. 0 = to left.
            index: 19
            width: 1
            read: true
            write: true
          - name: PUSH_THRESH
            description: "Number of bits shifted into ISR before autopush, or conditional
              push (PUSH IFFULL), will take place.\\n\n                Write 0 for
              value of 32."
            index: 20
            width: 5
            read: true
            write: true
          - name: PULL_THRESH
            description: "Number of bits shifted out of OSR before autopull, or conditional
              pull (PULL IFEMPTY), will take place.\\n\n                Write 0 for
              value of 32."
            index: 25
            width: 5
            read: true
            write: true
          - name: FJOIN_TX
            description: "When 1, TX FIFO steals the RX FIFO's storage, and becomes
              twice as deep.\\n\n                RX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 30
            width: 1
            read: true
            write: true
          - name: FJOIN_RX
            description: "When 1, RX FIFO steals the TX FIFO's storage, and becomes
              twice as deep.\\n\n                TX FIFO is disabled as a result (always
              reads as both full and empty).\\n\n                FIFOs are flushed
              when this bit is changed."
            index: 31
            width: 1
            read: true
            write: true
      - name: SM3_ADDR
        type: uint32_t
        expected_size: 4
        expected_offset: 284
        const: true
        description: (read-only) Current instruction address of state machine 3
        fields:
          - name: SM3_ADDR
            index: 0
            width: 5
            read: true
            write: false
      - name: SM3_INSTR
        type: uint32_t
        expected_size: 4
        expected_offset: 288
        description: "(read-write) Read to see the instruction currently addressed
          by state machine 3's program counter\\n\n            Write to execute an
          instruction immediately (including jumps) and then resume execution."
        fields:
          - name: SM3_INSTR
            index: 0
            width: 16
            read: true
            write: true
      - name: SM3_PINCTRL
        type: uint32_t
        expected_size: 4
        expected_offset: 292
        description: (read-write) State machine pin control
        fields:
          - name: OUT_BASE
            description: The lowest-numbered pin that will be affected by an OUT PINS,
              OUT PINDIRS or MOV PINS instruction. The data written to this pin will
              always be the least-significant bit of the OUT or MOV data.
            index: 0
            width: 5
            read: true
            write: true
          - name: SET_BASE
            description: The lowest-numbered pin that will be affected by a SET PINS
              or SET PINDIRS instruction. The data written to this pin is the least-significant
              bit of the SET data.
            index: 5
            width: 5
            read: true
            write: true
          - name: SIDESET_BASE
            description: The lowest-numbered pin that will be affected by a side-set
              operation. The MSBs of an instruction's side-set/delay field (up to
              5, determined by SIDESET_COUNT) are used for side-set data, with the
              remaining LSBs used for delay. The least-significant bit of the side-set
              portion is the bit written to this pin, with more-significant bits written
              to higher-numbered pins.
            index: 10
            width: 5
            read: true
            write: true
          - name: IN_BASE
            description: The pin which is mapped to the least-significant bit of a
              state machine's IN data bus. Higher-numbered pins are mapped to consecutively
              more-significant data bits, with a modulo of 32 applied to pin number.
            index: 15
            width: 5
            read: true
            write: true
          - name: OUT_COUNT
            description: The number of pins asserted by an OUT PINS, OUT PINDIRS or
              MOV PINS instruction. In the range 0 to 32 inclusive.
            index: 20
            width: 6
            read: true
            write: true
          - name: SET_COUNT
            description: The number of pins asserted by a SET. In the range 0 to 5
              inclusive.
            index: 26
            width: 3
            read: true
            write: true
          - name: SIDESET_COUNT
            description: The number of MSBs of the Delay/Side-set instruction field
              which are used for side-set. Inclusive of the enable bit, if present.
              Minimum of 0 (all delay bits, no side-set) and maximum of 5 (all side-set,
              no delay).
            index: 29
            width: 3
            read: true
            write: true
      - name: INTR
        type: uint32_t
        expected_size: 4
        expected_offset: 296
        const: true
        description: (read-only) Raw Interrupts
        fields:
          - name: SM0_RXNEMPTY
            index: 0
            width: 1
            read: true
            write: false
          - name: SM1_RXNEMPTY
            index: 1
            width: 1
            read: true
            write: false
          - name: SM2_RXNEMPTY
            index: 2
            width: 1
            read: true
            write: false
          - name: SM3_RXNEMPTY
            index: 3
            width: 1
            read: true
            write: false
          - name: SM0_TXNFULL
            index: 4
            width: 1
            read: true
            write: false
          - name: SM1_TXNFULL
            index: 5
            width: 1
            read: true
            write: false
          - name: SM2_TXNFULL
            index: 6
            width: 1
            read: true
            write: false
          - name: SM3_TXNFULL
            index: 7
            width: 1
            read: true
            write: false
          - name: SM0
            index: 8
            width: 1
            read: true
            write: false
          - name: SM1
            index: 9
            width: 1
            read: true
            write: false
          - name: SM2
            index: 10
            width: 1
            read: true
            write: false
          - name: SM3
            index: 11
            width: 1
            read: true
            write: false
      - name: IRQ0_INTE
        type: uint32_t
        expected_size: 4
        expected_offset: 300
        description: (read-write) Interrupt Enable for irq0
        fields:
          - name: SM0_RXNEMPTY
            index: 0
            width: 1
            read: true
            write: true
          - name: SM1_RXNEMPTY
            index: 1
            width: 1
            read: true
            write: true
          - name: SM2_RXNEMPTY
            index: 2
            width: 1
            read: true
            write: true
          - name: SM3_RXNEMPTY
            index: 3
            width: 1
            read: true
            write: true
          - name: SM0_TXNFULL
            index: 4
            width: 1
            read: true
            write: true
          - name: SM1_TXNFULL
            index: 5
            width: 1
            read: true
            write: true
          - name: SM2_TXNFULL
            index: 6
            width: 1
            read: true
            write: true
          - name: SM3_TXNFULL
            index: 7
            width: 1
            read: true
            write: true
          - name: SM0
            index: 8
            width: 1
            read: true
            write: true
          - name: SM1
            index: 9
            width: 1
            read: true
            write: true
          - name: SM2
            index: 10
            width: 1
            read: true
            write: true
          - name: SM3
            index: 11
            width: 1
            read: true
            write: true
      - name: IRQ0_INTF
        type: uint32_t
        expected_size: 4
        expected_offset: 304
        description: (read-write) Interrupt Force for irq0
        fields:
          - name: SM0_RXNEMPTY
            index: 0
            width: 1
            read: true
            write: true
          - name: SM1_RXNEMPTY
            index: 1
            width: 1
            read: true
            write: true
          - name: SM2_RXNEMPTY
            index: 2
            width: 1
            read: true
            write: true
          - name: SM3_RXNEMPTY
            index: 3
            width: 1
            read: true
            write: true
          - name: SM0_TXNFULL
            index: 4
            width: 1
            read: true
            write: true
          - name: SM1_TXNFULL
            index: 5
            width: 1
            read: true
            write: true
          - name: SM2_TXNFULL
            index: 6
            width: 1
            read: true
            write: true
          - name: SM3_TXNFULL
            index: 7
            width: 1
            read: true
            write: true
          - name: SM0
            index: 8
            width: 1
            read: true
            write: true
          - name: SM1
            index: 9
            width: 1
            read: true
            write: true
          - name: SM2
            index: 10
            width: 1
            read: true
            write: true
          - name: SM3
            index: 11
            width: 1
            read: true
            write: true
      - name: IRQ0_INTS
        type: uint32_t
        expected_size: 4
        expected_offset: 308
        const: true
        description: (read-only) Interrupt status after masking & forcing for irq0
        fields:
          - name: SM0_RXNEMPTY
            index: 0
            width: 1
            read: true
            write: false
          - name: SM1_RXNEMPTY
            index: 1
            width: 1
            read: true
            write: false
          - name: SM2_RXNEMPTY
            index: 2
            width: 1
            read: true
            write: false
          - name: SM3_RXNEMPTY
            index: 3
            width: 1
            read: true
            write: false
          - name: SM0_TXNFULL
            index: 4
            width: 1
            read: true
            write: false
          - name: SM1_TXNFULL
            index: 5
            width: 1
            read: true
            write: false
          - name: SM2_TXNFULL
            index: 6
            width: 1
            read: true
            write: false
          - name: SM3_TXNFULL
            index: 7
            width: 1
            read: true
            write: false
          - name: SM0
            index: 8
            width: 1
            read: true
            write: false
          - name: SM1
            index: 9
            width: 1
            read: true
            write: false
          - name: SM2
            index: 10
            width: 1
            read: true
            write: false
          - name: SM3
            index: 11
            width: 1
            read: true
            write: false
      - name: IRQ1_INTE
        type: uint32_t
        expected_size: 4
        expected_offset: 312
        description: (read-write) Interrupt Enable for irq1
        fields:
          - name: SM0_RXNEMPTY
            index: 0
            width: 1
            read: true
            write: true
          - name: SM1_RXNEMPTY
            index: 1
            width: 1
            read: true
            write: true
          - name: SM2_RXNEMPTY
            index: 2
            width: 1
            read: true
            write: true
          - name: SM3_RXNEMPTY
            index: 3
            width: 1
            read: true
            write: true
          - name: SM0_TXNFULL
            index: 4
            width: 1
            read: true
            write: true
          - name: SM1_TXNFULL
            index: 5
            width: 1
            read: true
            write: true
          - name: SM2_TXNFULL
            index: 6
            width: 1
            read: true
            write: true
          - name: SM3_TXNFULL
            index: 7
            width: 1
            read: true
            write: true
          - name: SM0
            index: 8
            width: 1
            read: true
            write: true
          - name: SM1
            index: 9
            width: 1
            read: true
            write: true
          - name: SM2
            index: 10
            width: 1
            read: true
            write: true
          - name: SM3
            index: 11
            width: 1
            read: true
            write: true
      - name: IRQ1_INTF
        type: uint32_t
        expected_size: 4
        expected_offset: 316
        description: (read-write) Interrupt Force for irq1
        fields:
          - name: SM0_RXNEMPTY
            index: 0
            width: 1
            read: true
            write: true
          - name: SM1_RXNEMPTY
            index: 1
            width: 1
            read: true
            write: true
          - name: SM2_RXNEMPTY
            index: 2
            width: 1
            read: true
            write: true
          - name: SM3_RXNEMPTY
            index: 3
            width: 1
            read: true
            write: true
          - name: SM0_TXNFULL
            index: 4
            width: 1
            read: true
            write: true
          - name: SM1_TXNFULL
            index: 5
            width: 1
            read: true
            write: true
          - name: SM2_TXNFULL
            index: 6
            width: 1
            read: true
            write: true
          - name: SM3_TXNFULL
            index: 7
            width: 1
            read: true
            write: true
          - name: SM0
            index: 8
            width: 1
            read: true
            write: true
          - name: SM1
            index: 9
            width: 1
            read: true
            write: true
          - name: SM2
            index: 10
            width: 1
            read: true
            write: true
          - name: SM3
            index: 11
            width: 1
            read: true
            write: true
      - name: IRQ1_INTS
        type: uint32_t
        expected_size: 4
        expected_offset: 320
        const: true
        description: (read-only) Interrupt status after masking & forcing for irq1
        fields:
          - name: SM0_RXNEMPTY
            index: 0
            width: 1
            read: true
            write: false
          - name: SM1_RXNEMPTY
            index: 1
            width: 1
            read: true
            write: false
          - name: SM2_RXNEMPTY
            index: 2
            width: 1
            read: true
            write: false
          - name: SM3_RXNEMPTY
            index: 3
            width: 1
            read: true
            write: false
          - name: SM0_TXNFULL
            index: 4
            width: 1
            read: true
            write: false
          - name: SM1_TXNFULL
            index: 5
            width: 1
            read: true
            write: false
          - name: SM2_TXNFULL
            index: 6
            width: 1
            read: true
            write: false
          - name: SM3_TXNFULL
            index: 7
            width: 1
            read: true
            write: false
          - name: SM0
            index: 8
            width: 1
            read: true
            write: false
          - name: SM1
            index: 9
            width: 1
            read: true
            write: false
          - name: SM2
            index: 10
            width: 1
            read: true
            write: false
          - name: SM3
            index: 11
            width: 1
            read: true
            write: false
    stream: false
    codec: false
    methods: false
    unit_test: false
    identifier: false
enums:
  PIO0_SM0_EXECCTRL_STATUS_SEL:
    enum:
      TXLEVEL:
        description: All-ones if TX FIFO level < N, otherwise all-zeroes
        value: 0
      RXLEVEL:
        description: All-ones if RX FIFO level < N, otherwise all-zeroes
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  PIO0_SM1_EXECCTRL_STATUS_SEL:
    enum:
      TXLEVEL:
        description: All-ones if TX FIFO level < N, otherwise all-zeroes
        value: 0
      RXLEVEL:
        description: All-ones if RX FIFO level < N, otherwise all-zeroes
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  PIO0_SM2_EXECCTRL_STATUS_SEL:
    enum:
      TXLEVEL:
        description: All-ones if TX FIFO level < N, otherwise all-zeroes
        value: 0
      RXLEVEL:
        description: All-ones if RX FIFO level < N, otherwise all-zeroes
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  PIO0_SM3_EXECCTRL_STATUS_SEL:
    enum:
      TXLEVEL:
        description: All-ones if TX FIFO level < N, otherwise all-zeroes
        value: 0
      RXLEVEL:
        description: All-ones if RX FIFO level < N, otherwise all-zeroes
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
