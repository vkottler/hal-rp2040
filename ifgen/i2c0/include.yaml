---
structs:
  i2c0:
    description: "DW_apb_i2c address block\\n\\n\n        List of configuration constants
      for the Synopsys I2C hardware (you may see references to these in I2C register
      header; these are *fixed* values, set at hardware design time):\\n\\n\n    \
      \    IC_ULTRA_FAST_MODE ................ 0x0\\n\n        IC_UFM_TBUF_CNT_DEFAULT
      ........... 0x8\\n\n        IC_UFM_SCL_LOW_COUNT .............. 0x0008\\n\n\
      \        IC_UFM_SCL_HIGH_COUNT ............. 0x0006\\n\n        IC_TX_TL ..........................
      0x0\\n\n        IC_TX_CMD_BLOCK ................... 0x1\\n\n        IC_HAS_DMA
      ........................ 0x1\\n\n        IC_HAS_ASYNC_FIFO .................
      0x0\\n\n        IC_SMBUS_ARP ...................... 0x0\\n\n        IC_FIRST_DATA_BYTE_STATUS
      ......... 0x1\\n\n        IC_INTR_IO ........................ 0x1\\n\n     \
      \   IC_MASTER_MODE .................... 0x1\\n\n        IC_DEFAULT_ACK_GENERAL_CALL
      ....... 0x1\\n\n        IC_INTR_POL ....................... 0x1\\n\n       \
      \ IC_OPTIONAL_SAR ................... 0x0\\n\n        IC_DEFAULT_TAR_SLAVE_ADDR
      ......... 0x055\\n\n        IC_DEFAULT_SLAVE_ADDR ............. 0x055\\n\n \
      \       IC_DEFAULT_HS_SPKLEN .............. 0x1\\n\n        IC_FS_SCL_HIGH_COUNT
      .............. 0x0006\\n\n        IC_HS_SCL_LOW_COUNT ............... 0x0008\\\
      n\n        IC_DEVICE_ID_VALUE ................ 0x0\\n\n        IC_10BITADDR_MASTER
      ............... 0x0\\n\n        IC_CLK_FREQ_OPTIMIZATION .......... 0x0\\n\n\
      \        IC_DEFAULT_FS_SPKLEN .............. 0x7\\n\n        IC_ADD_ENCODED_PARAMS
      ............. 0x0\\n\n        IC_DEFAULT_SDA_HOLD ............... 0x000001\\\
      n\n        IC_DEFAULT_SDA_SETUP .............. 0x64\\n\n        IC_AVOID_RX_FIFO_FLUSH_ON_TX_ABRT
      . 0x0\\n\n        IC_CLOCK_PERIOD ................... 100\\n\n        IC_EMPTYFIFO_HOLD_MASTER_EN
      ....... 1\\n\n        IC_RESTART_EN ..................... 0x1\\n\n        IC_TX_CMD_BLOCK_DEFAULT
      ........... 0x0\\n\n        IC_BUS_CLEAR_FEATURE .............. 0x0\\n\n   \
      \     IC_CAP_LOADING .................... 100\\n\n        IC_FS_SCL_LOW_COUNT
      ............... 0x000d\\n\n        APB_DATA_WIDTH .................... 32\\\
      n\n        IC_SDA_STUCK_TIMEOUT_DEFAULT ...... 0xffffffff\\n\n        IC_SLV_DATA_NACK_ONLY
      ............. 0x1\\n\n        IC_10BITADDR_SLAVE ................ 0x0\\n\n \
      \       IC_CLK_TYPE ....................... 0x0\\n\n        IC_SMBUS_UDID_MSB
      ................. 0x0\\n\n        IC_SMBUS_SUSPEND_ALERT ............ 0x0\\\
      n\n        IC_HS_SCL_HIGH_COUNT .............. 0x0006\\n\n        IC_SLV_RESTART_DET_EN
      ............. 0x1\\n\n        IC_SMBUS .......................... 0x0\\n\n \
      \       IC_OPTIONAL_SAR_DEFAULT ........... 0x0\\n\n        IC_PERSISTANT_SLV_ADDR_DEFAULT
      .... 0x0\\n\n        IC_USE_COUNTS ..................... 0x0\\n\n        IC_RX_BUFFER_DEPTH
      ................ 16\\n\n        IC_SCL_STUCK_TIMEOUT_DEFAULT ...... 0xffffffff\\\
      n\n        IC_RX_FULL_HLD_BUS_EN ............. 0x1\\n\n        IC_SLAVE_DISABLE
      .................. 0x1\\n\n        IC_RX_TL .......................... 0x0\\\
      n\n        IC_DEVICE_ID ...................... 0x0\\n\n        IC_HC_COUNT_VALUES
      ................ 0x0\\n\n        I2C_DYNAMIC_TAR_UPDATE ............ 0\\n\n\
      \        IC_SMBUS_CLK_LOW_MEXT_DEFAULT ..... 0xffffffff\\n\n        IC_SMBUS_CLK_LOW_SEXT_DEFAULT
      ..... 0xffffffff\\n\n        IC_HS_MASTER_CODE ................. 0x1\\n\n  \
      \      IC_SMBUS_RST_IDLE_CNT_DEFAULT ..... 0xffff\\n\n        IC_SMBUS_UDID_LSB_DEFAULT
      ......... 0xffffffff\\n\n        IC_SS_SCL_HIGH_COUNT .............. 0x0028\\\
      n\n        IC_SS_SCL_LOW_COUNT ............... 0x002f\\n\n        IC_MAX_SPEED_MODE
      ................. 0x2\\n\n        IC_STAT_FOR_CLK_STRETCH ........... 0x0\\\
      n\n        IC_STOP_DET_IF_MASTER_ACTIVE ...... 0x0\\n\n        IC_DEFAULT_UFM_SPKLEN
      ............. 0x1\\n\n        IC_TX_BUFFER_DEPTH ................ 16"
    instances:
      - name: I2C0
        address: '0x40044000'
      - name: I2C1
        address: '0x40048000'
    fields:
      - name: IC_CON
        type: uint32_t
        expected_size: 4
        expected_offset: 0
        description: "(read-write) I2C Control Register. This register can be written
          only when the DW_apb_i2c is disabled, which corresponds to the IC_ENABLE[0]
          register being set to 0. Writes at other times have no effect.\\n\\n\n \
          \           Read/Write Access: - bit 10 is read only. - bit 11 is read only
          - bit 16 is read only - bit 17 is read only - bits 18 and 19 are read only."
        fields:
          - name: MASTER_MODE
            description: "This bit controls whether the DW_apb_i2c master is enabled.\\\
              n\\n\n                NOTE: Software should ensure that if this bit
              is written with '1' then bit 6 should also be written with a '1'."
            index: 0
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_MASTER_MODE
          - name: SPEED
            description: "These bits control at which speed the DW_apb_i2c operates;
              its setting is relevant only if one is operating the DW_apb_i2c in master
              mode. Hardware protects against illegal values being programmed by software.
              These bits must be programmed appropriately for slave mode also, as
              it is used to capture correct value of spike filter as per the speed
              mode.\\n\\n\n                This register should be programmed only
              with a value in the range of 1 to IC_MAX_SPEED_MODE; otherwise, hardware
              updates this register with the value of IC_MAX_SPEED_MODE.\\n\\n\n \
              \               1: standard mode (100 kbit/s)\\n\\n\n              \
              \  2: fast mode (<=400 kbit/s) or fast mode plus (<=1000Kbit/s)\\n\\\
              n\n                3: high speed mode (3.4 Mbit/s)\\n\\n\n         \
              \       Note: This field is not applicable when IC_ULTRA_FAST_MODE=1"
            index: 1
            width: 2
            read: true
            write: true
            type: I2C0_IC_CON_SPEED
          - name: IC_10BITADDR_SLAVE
            description: 'When acting as a slave, this bit controls whether the DW_apb_i2c
              responds to 7- or 10-bit addresses. - 0: 7-bit addressing. The DW_apb_i2c
              ignores transactions that involve 10-bit addressing; for 7-bit addressing,
              only the lower 7 bits of the IC_SAR register are compared. - 1: 10-bit
              addressing. The DW_apb_i2c responds to only 10-bit addressing transfers
              that match the full 10 bits of the IC_SAR register.'
            index: 3
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_IC_10BITADDR_SLAVE
          - name: IC_10BITADDR_MASTER
            description: 'Controls whether the DW_apb_i2c starts its transfers in
              7- or 10-bit addressing mode when acting as a master. - 0: 7-bit addressing
              - 1: 10-bit addressing'
            index: 4
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_IC_10BITADDR_MASTER
          - name: IC_RESTART_EN
            description: "Determines whether RESTART conditions may be sent when acting
              as a master. Some older slaves do not support handling RESTART conditions;
              however, RESTART conditions are used in several DW_apb_i2c operations.
              When RESTART is disabled, the master is prohibited from performing the
              following functions: - Sending a START BYTE - Performing any high-speed
              mode operation - High-speed mode operation - Performing direction changes
              in combined format mode - Performing a read operation with a 10-bit
              address By replacing RESTART condition followed by a STOP and a subsequent
              START condition, split operations are broken down into multiple DW_apb_i2c
              transfers. If the above operations are performed, it will result in
              setting bit 6 (TX_ABRT) of the IC_RAW_INTR_STAT register.\\n\\n\n  \
              \              Reset value: ENABLED"
            index: 5
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_IC_RESTART_EN
          - name: IC_SLAVE_DISABLE
            description: "This bit controls whether I2C has its slave disabled, which
              means once the presetn signal is applied, then this bit is set and the
              slave is disabled.\\n\\n\n                If this bit is set (slave
              is disabled), DW_apb_i2c functions only as a master and does not perform
              any action that requires a slave.\\n\\n\n                NOTE: Software
              should ensure that if this bit is written with 0, then bit 0 should
              also be written with a 0."
            index: 6
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_IC_SLAVE_DISABLE
          - name: STOP_DET_IFADDRESSED
            description: "In slave mode: - 1'b1:  issues the STOP_DET interrupt only
              when it is addressed. - 1'b0:  issues the STOP_DET irrespective of whether
              it's addressed or not. Reset value: 0x0\\n\\n\n                NOTE:
              During a general call address, this slave does not issue the STOP_DET
              interrupt if STOP_DET_IF_ADDRESSED = 1'b1, even if the slave responds
              to the general call address by generating ACK. The STOP_DET interrupt
              is generated only when the transmitted address matches the slave address
              (SAR)."
            index: 7
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_STOP_DET_IFADDRESSED
          - name: TX_EMPTY_CTRL
            description: "This bit controls the generation of the TX_EMPTY interrupt,
              as described in the IC_RAW_INTR_STAT register.\\n\\n\n             \
              \   Reset value: 0x0."
            index: 8
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_TX_EMPTY_CTRL
          - name: RX_FIFO_FULL_HLD_CTRL
            description: "This bit controls whether DW_apb_i2c should hold the bus
              when the Rx FIFO is physically full to its RX_BUFFER_DEPTH, as described
              in the IC_RX_FULL_HLD_BUS_EN parameter.\\n\\n\n                Reset
              value: 0x0."
            index: 9
            width: 1
            read: true
            write: true
            type: I2C0_IC_CON_RX_FIFO_FULL_HLD_CTRL
          - name: STOP_DET_IF_MASTER_ACTIVE
            description: Master issues the STOP_DET interrupt irrespective of whether
              master is active or not
            index: 10
            width: 1
            read: true
            write: false
      - name: IC_TAR
        type: uint32_t
        expected_size: 4
        expected_offset: 4
        description: "(read-write) I2C Target Address Register\\n\\n\n           \
          \ This register is 12 bits wide, and bits 31:12 are reserved. This register
          can be written to only when IC_ENABLE[0] is set to 0.\\n\\n\n          \
          \  Note: If the software or application is aware that the DW_apb_i2c is
          not using the TAR address for the pending commands in the Tx FIFO, then
          it is possible to update the TAR address even while the Tx FIFO has entries
          (IC_STATUS[2]= 0). - It is not necessary to perform any write to this register
          if DW_apb_i2c is enabled as an I2C slave only."
        fields:
          - name: IC_TAR
            description: "This is the target address for any master transaction. When
              transmitting a General Call, these bits are ignored. To generate a START
              BYTE, the CPU needs to write only once into these bits.\\n\\n\n    \
              \            If the IC_TAR and IC_SAR are the same, loopback exists
              but the FIFOs are shared between master and slave, so full loopback
              is not feasible. Only one direction loopback mode is supported (simplex),
              not duplex. A master cannot transmit to itself; it can transmit to only
              a slave."
            index: 0
            width: 10
            read: true
            write: true
          - name: GC_OR_START
            description: 'If bit 11 (SPECIAL) is set to 1 and bit 13(Device-ID) is
              set to 0, then this bit indicates whether a General Call or START byte
              command is to be performed by the DW_apb_i2c. - 0: General Call Address
              - after issuing a General Call, only writes may be performed. Attempting
              to issue a read command results in setting bit 6 (TX_ABRT) of the IC_RAW_INTR_STAT
              register. The DW_apb_i2c remains in General Call mode until the SPECIAL
              bit value (bit 11) is cleared. - 1: START BYTE Reset value: 0x0'
            index: 10
            width: 1
            read: true
            write: true
            type: I2C0_IC_TAR_GC_OR_START
          - name: SPECIAL
            description: 'This bit indicates whether software performs a Device-ID
              or General Call or START BYTE command. - 0: ignore bit 10 GC_OR_START
              and use IC_TAR normally - 1: perform special I2C command as specified
              in Device_ID or GC_OR_START bit Reset value: 0x0'
            index: 11
            width: 1
            read: true
            write: true
            type: I2C0_IC_TAR_SPECIAL
      - name: IC_SAR
        type: uint32_t
        expected_size: 4
        expected_offset: 8
        description: (read-write) I2C Slave Address Register
        fields:
          - name: IC_SAR
            description: "The IC_SAR holds the slave address when the I2C is operating
              as a slave. For 7-bit addressing, only IC_SAR[6:0] is used.\\n\\n\n\
              \                This register can be written only when the I2C interface
              is disabled, which corresponds to the IC_ENABLE[0] register being set
              to 0. Writes at other times have no effect.\\n\\n\n                Note:
              The default values cannot be any of the reserved address locations:
              that is, 0x00 to 0x07, or 0x78 to 0x7f. The correct operation of the
              device is not guaranteed if you program the IC_SAR or IC_TAR to a reserved
              value. Refer to <<table_I2C_firstbyte_bit_defs>> for a complete list
              of these reserved values."
            index: 0
            width: 10
            read: true
            write: true
      - name: IC_DATA_CMD
        type: uint32_t
        expected_size: 4
        expected_offset: 16
        description: "(read-write) I2C Rx/Tx Data Buffer and Command Register; this
          is the register the CPU writes to when filling the TX FIFO and the CPU reads
          from when retrieving bytes from RX FIFO.\\n\\n\n            The size of
          the register changes as follows:\\n\\n\n            Write: - 11 bits when
          IC_EMPTYFIFO_HOLD_MASTER_EN=1 - 9 bits when IC_EMPTYFIFO_HOLD_MASTER_EN=0
          Read: - 12 bits when IC_FIRST_DATA_BYTE_STATUS = 1 - 8 bits when IC_FIRST_DATA_BYTE_STATUS
          = 0 Note: In order for the DW_apb_i2c to continue acknowledging reads, a
          read command should be written for every byte that is to be received; otherwise
          the DW_apb_i2c will stop acknowledging."
        fields:
          - name: DAT
            description: "This register contains the data to be transmitted or received
              on the I2C bus. If you are writing to this register and want to perform
              a read, bits 7:0 (DAT) are ignored by the DW_apb_i2c. However, when
              you read this register, these bits return the value of data received
              on the DW_apb_i2c interface.\\n\\n\n                Reset value: 0x0"
            index: 0
            width: 8
            read: true
            write: true
          - name: CMD
            description: "This bit controls whether a read or a write is performed.
              This bit does not control the direction when the DW_apb_i2con acts as
              a slave. It controls only the direction when it acts as a master.\\\
              n\\n\n                When a command is entered in the TX FIFO, this
              bit distinguishes the write and read commands. In slave-receiver mode,
              this bit is a 'don't care' because writes to this register are not required.
              In slave-transmitter mode, a '0' indicates that the data in IC_DATA_CMD
              is to be transmitted.\\n\\n\n                When programming this bit,
              you should remember the following: attempting to perform a read operation
              after a General Call command has been sent results in a TX_ABRT interrupt
              (bit 6 of the IC_RAW_INTR_STAT register), unless bit 11 (SPECIAL) in
              the IC_TAR register has been cleared. If a '1' is written to this bit
              after receiving a RD_REQ interrupt, then a TX_ABRT interrupt occurs.\\\
              n\\n\n                Reset value: 0x0"
            index: 8
            width: 1
            read: true
            write: true
            type: I2C0_IC_DATA_CMD_CMD
          - name: STOP
            description: "This bit controls whether a STOP is issued after the byte
              is sent or received.\\n\\n\n                - 1 - STOP is issued after
              this byte, regardless of whether or not the Tx FIFO is empty. If the
              Tx FIFO is not empty, the master immediately tries to start a new transfer
              by issuing a START and arbitrating for the bus. - 0 - STOP is not issued
              after this byte, regardless of whether or not the Tx FIFO is empty.
              If the Tx FIFO is not empty, the master continues the current transfer
              by sending/receiving data bytes according to the value of the CMD bit.
              If the Tx FIFO is empty, the master holds the SCL line low and stalls
              the bus until a new command is available in the Tx FIFO. Reset value:
              0x0"
            index: 9
            width: 1
            read: true
            write: true
            type: I2C0_IC_DATA_CMD_STOP
          - name: RESTART
            description: "This bit controls whether a RESTART is issued before the
              byte is sent or received.\\n\\n\n                1 - If IC_RESTART_EN
              is 1, a RESTART is issued before the data is sent/received (according
              to the value of CMD), regardless of whether or not the transfer direction
              is changing from the previous command; if IC_RESTART_EN is 0, a STOP
              followed by a START is issued instead.\\n\\n\n                0 - If
              IC_RESTART_EN is 1, a RESTART is issued only if the transfer direction
              is changing from the previous command; if IC_RESTART_EN is 0, a STOP
              followed by a START is issued instead.\\n\\n\n                Reset
              value: 0x0"
            index: 10
            width: 1
            read: true
            write: true
            type: I2C0_IC_DATA_CMD_RESTART
          - name: FIRST_DATA_BYTE
            description: "Indicates the first data byte received after the address
              phase for receive transfer in Master receiver or Slave receiver mode.\\\
              n\\n\n                Reset value : 0x0\\n\\n\n                NOTE:\
              \  In case of APB_DATA_WIDTH=8,\\n\\n\n                1. The user has
              to perform two APB Reads to IC_DATA_CMD in order to get status on 11
              bit.\\n\\n\n                2. In order to read the 11 bit, the user
              has to perform the first data byte read [7:0] (offset 0x10) and then
              perform the second read [15:8] (offset 0x11) in order to know the status
              of 11 bit (whether the data received in previous read is a first data
              byte or not).\\n\\n\n                3. The 11th bit is an optional
              read field, user can ignore 2nd byte read [15:8] (offset 0x11) if not
              interested in FIRST_DATA_BYTE status."
            index: 11
            width: 1
            read: true
            write: false
            type: I2C0_IC_DATA_CMD_FIRST_DATA_BYTE
      - name: IC_SS_SCL_HCNT
        type: uint32_t
        expected_size: 4
        expected_offset: 20
        description: (read-write) Standard Speed I2C Clock SCL High Count Register
        fields:
          - name: IC_SS_SCL_HCNT
            description: "This register must be set before any I2C bus transaction
              can take place to ensure proper I/O timing. This register sets the SCL
              clock high-period count for standard speed. For more information, refer
              to 'IC_CLK Frequency Configuration'.\\n\\n\n                This register
              can be written only when the I2C interface is disabled which corresponds
              to the IC_ENABLE[0] register being set to 0. Writes at other times have
              no effect.\\n\\n\n                The minimum valid value is 6; hardware
              prevents values less than this being written, and if attempted results
              in 6 being set. For designs with APB_DATA_WIDTH = 8, the order of programming
              is important to ensure the correct operation of the DW_apb_i2c. The
              lower byte must be programmed first. Then the upper byte is programmed.\\\
              n\\n\n                NOTE: This register must not be programmed to
              a value higher than 65525, because DW_apb_i2c uses a 16-bit counter
              to flag an I2C bus idle condition when this counter reaches a value
              of IC_SS_SCL_HCNT + 10."
            index: 0
            width: 16
            read: true
            write: true
      - name: IC_SS_SCL_LCNT
        type: uint32_t
        expected_size: 4
        expected_offset: 24
        description: (read-write) Standard Speed I2C Clock SCL Low Count Register
        fields:
          - name: IC_SS_SCL_LCNT
            description: "This register must be set before any I2C bus transaction
              can take place to ensure proper I/O timing. This register sets the SCL
              clock low period count for standard speed. For more information, refer
              to 'IC_CLK Frequency Configuration'\\n\\n\n                This register
              can be written only when the I2C interface is disabled which corresponds
              to the IC_ENABLE[0] register being set to 0. Writes at other times have
              no effect.\\n\\n\n                The minimum valid value is 8; hardware
              prevents values less than this being written, and if attempted, results
              in 8 being set. For designs with APB_DATA_WIDTH = 8, the order of programming
              is important to ensure the correct operation of DW_apb_i2c. The lower
              byte must be programmed first, and then the upper byte is programmed."
            index: 0
            width: 16
            read: true
            write: true
      - name: IC_FS_SCL_HCNT
        type: uint32_t
        expected_size: 4
        expected_offset: 28
        description: (read-write) Fast Mode or Fast Mode Plus I2C Clock SCL High Count
          Register
        fields:
          - name: IC_FS_SCL_HCNT
            description: "This register must be set before any I2C bus transaction
              can take place to ensure proper I/O timing. This register sets the SCL
              clock high-period count for fast mode or fast mode plus. It is used
              in high-speed mode to send the Master Code and START BYTE or General
              CALL. For more information, refer to 'IC_CLK Frequency Configuration'.\\\
              n\\n\n                This register goes away and becomes read-only
              returning 0s if IC_MAX_SPEED_MODE = standard. This register can be written
              only when the I2C interface is disabled, which corresponds to the IC_ENABLE[0]
              register being set to 0. Writes at other times have no effect.\\n\\\
              n\n                The minimum valid value is 6; hardware prevents values
              less than this being written, and if attempted results in 6 being set.
              For designs with APB_DATA_WIDTH == 8 the order of programming is important
              to ensure the correct operation of the DW_apb_i2c. The lower byte must
              be programmed first. Then the upper byte is programmed."
            index: 0
            width: 16
            read: true
            write: true
      - name: IC_FS_SCL_LCNT
        type: uint32_t
        expected_size: 4
        expected_offset: 32
        description: (read-write) Fast Mode or Fast Mode Plus I2C Clock SCL Low Count
          Register
        fields:
          - name: IC_FS_SCL_LCNT
            description: "This register must be set before any I2C bus transaction
              can take place to ensure proper I/O timing. This register sets the SCL
              clock low period count for fast speed. It is used in high-speed mode
              to send the Master Code and START BYTE or General CALL. For more information,
              refer to 'IC_CLK Frequency Configuration'.\\n\\n\n                This
              register goes away and becomes read-only returning 0s if IC_MAX_SPEED_MODE
              = standard.\\n\\n\n                This register can be written only
              when the I2C interface is disabled, which corresponds to the IC_ENABLE[0]
              register being set to 0. Writes at other times have no effect.\\n\\\
              n\n                The minimum valid value is 8; hardware prevents values
              less than this being written, and if attempted results in 8 being set.
              For designs with APB_DATA_WIDTH = 8 the order of programming is important
              to ensure the correct operation of the DW_apb_i2c. The lower byte must
              be programmed first. Then the upper byte is programmed. If the value
              is less than 8 then the count value gets changed to 8."
            index: 0
            width: 16
            read: true
            write: true
      - name: IC_INTR_STAT
        type: uint32_t
        expected_size: 4
        expected_offset: 44
        const: true
        description: "(read-only) I2C Interrupt Status Register\\n\\n\n          \
          \  Each bit in this register has a corresponding mask bit in the IC_INTR_MASK
          register. These bits are cleared by reading the matching interrupt clear
          register. The unmasked raw versions of these bits are available in the IC_RAW_INTR_STAT
          register."
        fields:
          - name: R_RX_UNDER
            description: "See IC_RAW_INTR_STAT for a detailed description of R_RX_UNDER
              bit.\\n\\n\n                Reset value: 0x0"
            index: 0
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_RX_UNDER
          - name: R_RX_OVER
            description: "See IC_RAW_INTR_STAT for a detailed description of R_RX_OVER
              bit.\\n\\n\n                Reset value: 0x0"
            index: 1
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_RX_OVER
          - name: R_RX_FULL
            description: "See IC_RAW_INTR_STAT for a detailed description of R_RX_FULL
              bit.\\n\\n\n                Reset value: 0x0"
            index: 2
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_RX_FULL
          - name: R_TX_OVER
            description: "See IC_RAW_INTR_STAT for a detailed description of R_TX_OVER
              bit.\\n\\n\n                Reset value: 0x0"
            index: 3
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_TX_OVER
          - name: R_TX_EMPTY
            description: "See IC_RAW_INTR_STAT for a detailed description of R_TX_EMPTY
              bit.\\n\\n\n                Reset value: 0x0"
            index: 4
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_TX_EMPTY
          - name: R_RD_REQ
            description: "See IC_RAW_INTR_STAT for a detailed description of R_RD_REQ
              bit.\\n\\n\n                Reset value: 0x0"
            index: 5
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_RD_REQ
          - name: R_TX_ABRT
            description: "See IC_RAW_INTR_STAT for a detailed description of R_TX_ABRT
              bit.\\n\\n\n                Reset value: 0x0"
            index: 6
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_TX_ABRT
          - name: R_RX_DONE
            description: "See IC_RAW_INTR_STAT for a detailed description of R_RX_DONE
              bit.\\n\\n\n                Reset value: 0x0"
            index: 7
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_RX_DONE
          - name: R_ACTIVITY
            description: "See IC_RAW_INTR_STAT for a detailed description of R_ACTIVITY
              bit.\\n\\n\n                Reset value: 0x0"
            index: 8
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_ACTIVITY
          - name: R_STOP_DET
            description: "See IC_RAW_INTR_STAT for a detailed description of R_STOP_DET
              bit.\\n\\n\n                Reset value: 0x0"
            index: 9
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_STOP_DET
          - name: R_START_DET
            description: "See IC_RAW_INTR_STAT for a detailed description of R_START_DET
              bit.\\n\\n\n                Reset value: 0x0"
            index: 10
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_START_DET
          - name: R_GEN_CALL
            description: "See IC_RAW_INTR_STAT for a detailed description of R_GEN_CALL
              bit.\\n\\n\n                Reset value: 0x0"
            index: 11
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_GEN_CALL
          - name: R_RESTART_DET
            description: "See IC_RAW_INTR_STAT for a detailed description of R_RESTART_DET
              bit.\\n\\n\n                Reset value: 0x0"
            index: 12
            width: 1
            read: true
            write: false
            type: I2C0_IC_INTR_STAT_R_RESTART_DET
      - name: IC_INTR_MASK
        type: uint32_t
        expected_size: 4
        expected_offset: 48
        description: "(read-write) I2C Interrupt Mask Register.\\n\\n\n          \
          \  These bits mask their corresponding interrupt status bits. This register
          is active low; a value of 0 masks the interrupt, whereas a value of 1 unmasks
          the interrupt."
        fields:
          - name: M_RX_UNDER
            description: "This bit masks the R_RX_UNDER interrupt in IC_INTR_STAT
              register.\\n\\n\n                Reset value: 0x1"
            index: 0
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_RX_UNDER
          - name: M_RX_OVER
            description: "This bit masks the R_RX_OVER interrupt in IC_INTR_STAT register.\\\
              n\\n\n                Reset value: 0x1"
            index: 1
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_RX_OVER
          - name: M_RX_FULL
            description: "This bit masks the R_RX_FULL interrupt in IC_INTR_STAT register.\\\
              n\\n\n                Reset value: 0x1"
            index: 2
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_RX_FULL
          - name: M_TX_OVER
            description: "This bit masks the R_TX_OVER interrupt in IC_INTR_STAT register.\\\
              n\\n\n                Reset value: 0x1"
            index: 3
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_TX_OVER
          - name: M_TX_EMPTY
            description: "This bit masks the R_TX_EMPTY interrupt in IC_INTR_STAT
              register.\\n\\n\n                Reset value: 0x1"
            index: 4
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_TX_EMPTY
          - name: M_RD_REQ
            description: "This bit masks the R_RD_REQ interrupt in IC_INTR_STAT register.\\\
              n\\n\n                Reset value: 0x1"
            index: 5
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_RD_REQ
          - name: M_TX_ABRT
            description: "This bit masks the R_TX_ABRT interrupt in IC_INTR_STAT register.\\\
              n\\n\n                Reset value: 0x1"
            index: 6
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_TX_ABRT
          - name: M_RX_DONE
            description: "This bit masks the R_RX_DONE interrupt in IC_INTR_STAT register.\\\
              n\\n\n                Reset value: 0x1"
            index: 7
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_RX_DONE
          - name: M_ACTIVITY
            description: "This bit masks the R_ACTIVITY interrupt in IC_INTR_STAT
              register.\\n\\n\n                Reset value: 0x0"
            index: 8
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_ACTIVITY
          - name: M_STOP_DET
            description: "This bit masks the R_STOP_DET interrupt in IC_INTR_STAT
              register.\\n\\n\n                Reset value: 0x0"
            index: 9
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_STOP_DET
          - name: M_START_DET
            description: "This bit masks the R_START_DET interrupt in IC_INTR_STAT
              register.\\n\\n\n                Reset value: 0x0"
            index: 10
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_START_DET
          - name: M_GEN_CALL
            description: "This bit masks the R_GEN_CALL interrupt in IC_INTR_STAT
              register.\\n\\n\n                Reset value: 0x1"
            index: 11
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_GEN_CALL
          - name: M_RESTART_DET
            description: "This bit masks the R_RESTART_DET interrupt in IC_INTR_STAT
              register.\\n\\n\n                Reset value: 0x0"
            index: 12
            width: 1
            read: true
            write: true
            type: I2C0_IC_INTR_MASK_M_RESTART_DET
      - name: IC_RAW_INTR_STAT
        type: uint32_t
        expected_size: 4
        expected_offset: 52
        const: true
        description: "(read-only) I2C Raw Interrupt Status Register\\n\\n\n      \
          \      Unlike the IC_INTR_STAT register, these bits are not masked so they
          always show the true status of the DW_apb_i2c."
        fields:
          - name: RX_UNDER
            description: "Set if the processor attempts to read the receive buffer
              when it is empty by reading from the IC_DATA_CMD register. If the module
              is disabled (IC_ENABLE[0]=0), this bit keeps its level until the master
              or slave state machines go into idle, and when ic_en goes to 0, this
              interrupt is cleared.\\n\\n\n                Reset value: 0x0"
            index: 0
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_RX_UNDER
          - name: RX_OVER
            description: "Set if the receive buffer is completely filled to IC_RX_BUFFER_DEPTH
              and an additional byte is received from an external I2C device. The
              DW_apb_i2c acknowledges this, but any data bytes received after the
              FIFO is full are lost. If the module is disabled (IC_ENABLE[0]=0), this
              bit keeps its level until the master or slave state machines go into
              idle, and when ic_en goes to 0, this interrupt is cleared.\\n\\n\n \
              \               Note:  If bit 9 of the IC_CON register (RX_FIFO_FULL_HLD_CTRL)
              is programmed to HIGH, then the RX_OVER interrupt never occurs, because
              the Rx FIFO never overflows.\\n\\n\n                Reset value: 0x0"
            index: 1
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_RX_OVER
          - name: RX_FULL
            description: "Set when the receive buffer reaches or goes above the RX_TL
              threshold in the IC_RX_TL register. It is automatically cleared by hardware
              when buffer level goes below the threshold. If the module is disabled
              (IC_ENABLE[0]=0), the RX FIFO is flushed and held in reset; therefore
              the RX FIFO is not full. So this bit is cleared once the IC_ENABLE bit
              0 is programmed with a 0, regardless of the activity that continues.\\\
              n\\n\n                Reset value: 0x0"
            index: 2
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_RX_FULL
          - name: TX_OVER
            description: "Set during transmit if the transmit buffer is filled to
              IC_TX_BUFFER_DEPTH and the processor attempts to issue another I2C command
              by writing to the IC_DATA_CMD register. When the module is disabled,
              this bit keeps its level until the master or slave state machines go
              into idle, and when ic_en goes to 0, this interrupt is cleared.\\n\\\
              n\n                Reset value: 0x0"
            index: 3
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_TX_OVER
          - name: TX_EMPTY
            description: "The behavior of the TX_EMPTY interrupt status differs based
              on the TX_EMPTY_CTRL selection in the IC_CON register. - When TX_EMPTY_CTRL
              = 0: This bit is set to 1 when the transmit buffer is at or below the
              threshold value set in the IC_TX_TL register. - When TX_EMPTY_CTRL =
              1: This bit is set to 1 when the transmit buffer is at or below the
              threshold value set in the IC_TX_TL register and the transmission of
              the address/data from the internal shift register for the most recently
              popped command is completed. It is automatically cleared by hardware
              when the buffer level goes above the threshold. When IC_ENABLE[0] is
              set to 0, the TX FIFO is flushed and held in reset. There the TX FIFO
              looks like it has no data within it, so this bit is set to 1, provided
              there is activity in the master or slave state machines. When there
              is no longer any activity, then with ic_en=0, this bit is set to 0.\\\
              n\\n\n                Reset value: 0x0."
            index: 4
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_TX_EMPTY
          - name: RD_REQ
            description: "This bit is set to 1 when DW_apb_i2c is acting as a slave
              and another I2C master is attempting to read data from DW_apb_i2c. The
              DW_apb_i2c holds the I2C bus in a wait state (SCL=0) until this interrupt
              is serviced, which means that the slave has been addressed by a remote
              master that is asking for data to be transferred. The processor must
              respond to this interrupt and then write the requested data to the IC_DATA_CMD
              register. This bit is set to 0 just after the processor reads the IC_CLR_RD_REQ
              register.\\n\\n\n                Reset value: 0x0"
            index: 5
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_RD_REQ
          - name: TX_ABRT
            description: "This bit indicates if DW_apb_i2c, as an I2C transmitter,
              is unable to complete the intended actions on the contents of the transmit
              FIFO. This situation can occur both as an I2C master or an I2C slave,
              and is referred to as a 'transmit abort'. When this bit is set to 1,
              the IC_TX_ABRT_SOURCE register indicates the reason why the transmit
              abort takes places.\\n\\n\n                Note:  The DW_apb_i2c flushes/resets/empties
              the TX_FIFO and RX_FIFO whenever there is a transmit abort caused by
              any of the events tracked by the IC_TX_ABRT_SOURCE register. The FIFOs
              remains in this flushed state until the register IC_CLR_TX_ABRT is read.
              Once this read is performed, the Tx FIFO is then ready to accept more
              data bytes from the APB interface.\\n\\n\n                Reset value:
              0x0"
            index: 6
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_TX_ABRT
          - name: RX_DONE
            description: "When the DW_apb_i2c is acting as a slave-transmitter, this
              bit is set to 1 if the master does not acknowledge a transmitted byte.
              This occurs on the last byte of the transmission, indicating that the
              transmission is done.\\n\\n\n                Reset value: 0x0"
            index: 7
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_RX_DONE
          - name: ACTIVITY
            description: "This bit captures DW_apb_i2c activity and stays set until
              it is cleared. There are four ways to clear it: - Disabling the DW_apb_i2c
              - Reading the IC_CLR_ACTIVITY register - Reading the IC_CLR_INTR register
              - System reset Once this bit is set, it stays set unless one of the
              four methods is used to clear it. Even if the DW_apb_i2c module is idle,
              this bit remains set until cleared, indicating that there was activity
              on the bus.\\n\\n\n                Reset value: 0x0"
            index: 8
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_ACTIVITY
          - name: STOP_DET
            description: "Indicates whether a STOP condition has occurred on the I2C
              interface regardless of whether DW_apb_i2c is operating in slave or
              master mode.\\n\\n\n                In Slave Mode: - If IC_CON[7]=1'b1\
              \  (STOP_DET_IFADDRESSED), the STOP_DET interrupt will be issued only
              if slave is addressed. Note: During a general call address, this slave
              does not issue a STOP_DET interrupt if STOP_DET_IF_ADDRESSED=1'b1, even
              if the slave responds to the general call address by generating ACK.
              The STOP_DET interrupt is generated only when the transmitted address
              matches the slave address (SAR). - If IC_CON[7]=1'b0 (STOP_DET_IFADDRESSED),
              the STOP_DET interrupt is issued irrespective of whether it is being
              addressed. In Master Mode: - If IC_CON[10]=1'b1  (STOP_DET_IF_MASTER_ACTIVE),the
              STOP_DET interrupt will be issued only if Master is active. - If IC_CON[10]=1'b0\
              \  (STOP_DET_IFADDRESSED),the STOP_DET interrupt will be issued irrespective
              of whether master is active or not. Reset value: 0x0"
            index: 9
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_STOP_DET
          - name: START_DET
            description: "Indicates whether a START or RESTART condition has occurred
              on the I2C interface regardless of whether DW_apb_i2c is operating in
              slave or master mode.\\n\\n\n                Reset value: 0x0"
            index: 10
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_START_DET
          - name: GEN_CALL
            description: "Set only when a General Call address is received and it
              is acknowledged. It stays set until it is cleared either by disabling
              DW_apb_i2c or when the CPU reads bit 0 of the IC_CLR_GEN_CALL register.
              DW_apb_i2c stores the received data in the Rx buffer.\\n\\n\n      \
              \          Reset value: 0x0"
            index: 11
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_GEN_CALL
          - name: RESTART_DET
            description: "Indicates whether a RESTART condition has occurred on the
              I2C interface when DW_apb_i2c is operating in Slave mode and the slave
              is being addressed. Enabled only when IC_SLV_RESTART_DET_EN=1.\\n\\\
              n\n                Note: However, in high-speed mode or during a START
              BYTE transfer, the RESTART comes before the address field as per the
              I2C protocol. In this case, the slave is not the addressed slave when
              the RESTART is issued, therefore DW_apb_i2c does not generate the RESTART_DET
              interrupt.\\n\\n\n                Reset value: 0x0"
            index: 12
            width: 1
            read: true
            write: false
            type: I2C0_IC_RAW_INTR_STAT_RESTART_DET
      - name: IC_RX_TL
        type: uint32_t
        expected_size: 4
        expected_offset: 56
        description: (read-write) I2C Receive FIFO Threshold Register
        fields:
          - name: RX_TL
            description: "Receive FIFO Threshold Level.\\n\\n\n                Controls
              the level of entries (or above) that triggers the RX_FULL interrupt
              (bit 2 in IC_RAW_INTR_STAT register). The valid range is 0-255, with
              the additional restriction that hardware does not allow this value to
              be set to a value larger than the depth of the buffer. If an attempt
              is made to do that, the actual value set will be the maximum depth of
              the buffer. A value of 0 sets the threshold for 1 entry, and a value
              of 255 sets the threshold for 256 entries."
            index: 0
            width: 8
            read: true
            write: true
      - name: IC_TX_TL
        type: uint32_t
        expected_size: 4
        expected_offset: 60
        description: (read-write) I2C Transmit FIFO Threshold Register
        fields:
          - name: TX_TL
            description: "Transmit FIFO Threshold Level.\\n\\n\n                Controls
              the level of entries (or below) that trigger the TX_EMPTY interrupt
              (bit 4 in IC_RAW_INTR_STAT register). The valid range is 0-255, with
              the additional restriction that it may not be set to value larger than
              the depth of the buffer. If an attempt is made to do that, the actual
              value set will be the maximum depth of the buffer. A value of 0 sets
              the threshold for 0 entries, and a value of 255 sets the threshold for
              255 entries."
            index: 0
            width: 8
            read: true
            write: true
      - name: IC_CLR_INTR
        type: uint32_t
        expected_size: 4
        expected_offset: 64
        const: true
        description: (read-only) Clear Combined and Individual Interrupt Register
        fields:
          - name: CLR_INTR
            description: "Read this register to clear the combined interrupt, all
              individual interrupts, and the IC_TX_ABRT_SOURCE register. This bit
              does not clear hardware clearable interrupts but software clearable
              interrupts. Refer to Bit 9 of the IC_TX_ABRT_SOURCE register for an
              exception to clearing IC_TX_ABRT_SOURCE.\\n\\n\n                Reset
              value: 0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_RX_UNDER
        type: uint32_t
        expected_size: 4
        expected_offset: 68
        const: true
        description: (read-only) Clear RX_UNDER Interrupt Register
        fields:
          - name: CLR_RX_UNDER
            description: "Read this register to clear the RX_UNDER interrupt (bit
              0) of the IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_RX_OVER
        type: uint32_t
        expected_size: 4
        expected_offset: 72
        const: true
        description: (read-only) Clear RX_OVER Interrupt Register
        fields:
          - name: CLR_RX_OVER
            description: "Read this register to clear the RX_OVER interrupt (bit 1)
              of the IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_TX_OVER
        type: uint32_t
        expected_size: 4
        expected_offset: 76
        const: true
        description: (read-only) Clear TX_OVER Interrupt Register
        fields:
          - name: CLR_TX_OVER
            description: "Read this register to clear the TX_OVER interrupt (bit 3)
              of the IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_RD_REQ
        type: uint32_t
        expected_size: 4
        expected_offset: 80
        const: true
        description: (read-only) Clear RD_REQ Interrupt Register
        fields:
          - name: CLR_RD_REQ
            description: "Read this register to clear the RD_REQ interrupt (bit 5)
              of the IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_TX_ABRT
        type: uint32_t
        expected_size: 4
        expected_offset: 84
        const: true
        description: (read-only) Clear TX_ABRT Interrupt Register
        fields:
          - name: CLR_TX_ABRT
            description: "Read this register to clear the TX_ABRT interrupt (bit 6)
              of the IC_RAW_INTR_STAT register, and the IC_TX_ABRT_SOURCE register.
              This also releases the TX FIFO from the flushed/reset state, allowing
              more writes to the TX FIFO. Refer to Bit 9 of the IC_TX_ABRT_SOURCE
              register for an exception to clearing IC_TX_ABRT_SOURCE.\\n\\n\n   \
              \             Reset value: 0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_RX_DONE
        type: uint32_t
        expected_size: 4
        expected_offset: 88
        const: true
        description: (read-only) Clear RX_DONE Interrupt Register
        fields:
          - name: CLR_RX_DONE
            description: "Read this register to clear the RX_DONE interrupt (bit 7)
              of the IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_ACTIVITY
        type: uint32_t
        expected_size: 4
        expected_offset: 92
        const: true
        description: (read-only) Clear ACTIVITY Interrupt Register
        fields:
          - name: CLR_ACTIVITY
            description: "Reading this register clears the ACTIVITY interrupt if the
              I2C is not active anymore. If the I2C module is still active on the
              bus, the ACTIVITY interrupt bit continues to be set. It is automatically
              cleared by hardware if the module is disabled and if there is no further
              activity on the bus. The value read from this register to get status
              of the ACTIVITY interrupt (bit 8) of the IC_RAW_INTR_STAT register.\\\
              n\\n\n                Reset value: 0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_STOP_DET
        type: uint32_t
        expected_size: 4
        expected_offset: 96
        const: true
        description: (read-only) Clear STOP_DET Interrupt Register
        fields:
          - name: CLR_STOP_DET
            description: "Read this register to clear the STOP_DET interrupt (bit
              9) of the IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_START_DET
        type: uint32_t
        expected_size: 4
        expected_offset: 100
        const: true
        description: (read-only) Clear START_DET Interrupt Register
        fields:
          - name: CLR_START_DET
            description: "Read this register to clear the START_DET interrupt (bit
              10) of the IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_CLR_GEN_CALL
        type: uint32_t
        expected_size: 4
        expected_offset: 104
        const: true
        description: (read-only) Clear GEN_CALL Interrupt Register
        fields:
          - name: CLR_GEN_CALL
            description: "Read this register to clear the GEN_CALL interrupt (bit
              11) of IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_ENABLE
        type: uint32_t
        expected_size: 4
        expected_offset: 108
        description: (read-write) I2C Enable Register
        fields:
          - name: ENABLE
            description: "Controls whether the DW_apb_i2c is enabled. - 0: Disables
              DW_apb_i2c (TX and RX FIFOs are held in an erased state) - 1: Enables
              DW_apb_i2c Software can disable DW_apb_i2c while it is active. However,
              it is important that care be taken to ensure that DW_apb_i2c is disabled
              properly. A recommended procedure is described in 'Disabling DW_apb_i2c'.\\\
              n\\n\n                When DW_apb_i2c is disabled, the following occurs:
              - The TX FIFO and RX FIFO get flushed. - Status bits in the IC_INTR_STAT
              register are still active until DW_apb_i2c goes into IDLE state. If
              the module is transmitting, it stops as well as deletes the contents
              of the transmit buffer after the current transfer is complete. If the
              module is receiving, the DW_apb_i2c stops the current transfer at the
              end of the current byte and does not acknowledge the transfer.\\n\\\
              n\n                In systems with asynchronous pclk and ic_clk when
              IC_CLK_TYPE parameter set to asynchronous (1), there is a two ic_clk
              delay when enabling or disabling the DW_apb_i2c. For a detailed description
              on how to disable DW_apb_i2c, refer to 'Disabling DW_apb_i2c'\\n\\n\n\
              \                Reset value: 0x0"
            index: 0
            width: 1
            read: true
            write: true
            type: I2C0_IC_ENABLE_ENABLE
          - name: ABORT
            description: "When set, the controller initiates the transfer abort. -
              0: ABORT not initiated or ABORT done - 1: ABORT operation in progress
              The software can abort the I2C transfer in master mode by setting this
              bit. The software can set this bit only when ENABLE is already set;
              otherwise, the controller ignores any write to ABORT bit. The software
              cannot clear the ABORT bit once set. In response to an ABORT, the controller
              issues a STOP and flushes the Tx FIFO after completing the current transfer,
              then sets the TX_ABORT interrupt after the abort operation. The ABORT
              bit is cleared automatically after the abort operation.\\n\\n\n    \
              \            For a detailed description on how to abort I2C transfers,
              refer to 'Aborting I2C Transfers'.\\n\\n\n                Reset value:
              0x0"
            index: 1
            width: 1
            read: true
            write: true
            type: I2C0_IC_ENABLE_ABORT
          - name: TX_CMD_BLOCK
            description: "In Master mode: - 1'b1: Blocks the transmission of data
              on I2C bus even if Tx FIFO has data to transmit. - 1'b0: The transmission
              of data starts on I2C bus automatically, as soon as the first data is
              available in the Tx FIFO. Note: To block the execution of Master commands,
              set the TX_CMD_BLOCK bit only when Tx FIFO is empty (IC_STATUS[2]==1)
              and Master is in Idle state (IC_STATUS[5] == 0). Any further commands
              put in the Tx FIFO are not executed until TX_CMD_BLOCK bit is unset.
              Reset value:  IC_TX_CMD_BLOCK_DEFAULT"
            index: 2
            width: 1
            read: true
            write: true
            type: I2C0_IC_ENABLE_TX_CMD_BLOCK
      - name: IC_STATUS
        type: uint32_t
        expected_size: 4
        expected_offset: 112
        const: true
        description: "(read-only) I2C Status Register\\n\\n\n            This is a
          read-only register used to indicate the current transfer status and FIFO
          status. The status register may be read at any time. None of the bits in
          this register request an interrupt.\\n\\n\n            When the I2C is disabled
          by writing 0 in bit 0 of the IC_ENABLE register: - Bits 1 and 2 are set
          to 1 - Bits 3 and 10 are set to 0 When the master or slave state machines
          goes to idle and ic_en=0: - Bits 5 and 6 are set to 0"
        fields:
          - name: ACTIVITY
            description: 'I2C Activity Status. Reset value: 0x0'
            index: 0
            width: 1
            read: true
            write: false
            type: I2C0_IC_STATUS_ACTIVITY
          - name: TFNF
            description: 'Transmit FIFO Not Full. Set when the transmit FIFO contains
              one or more empty locations, and is cleared when the FIFO is full. -
              0: Transmit FIFO is full - 1: Transmit FIFO is not full Reset value:
              0x1'
            index: 1
            width: 1
            read: true
            write: false
            type: I2C0_IC_STATUS_TFNF
          - name: TFE
            description: 'Transmit FIFO Completely Empty. When the transmit FIFO is
              completely empty, this bit is set. When it contains one or more valid
              entries, this bit is cleared. This bit field does not request an interrupt.
              - 0: Transmit FIFO is not empty - 1: Transmit FIFO is empty Reset value:
              0x1'
            index: 2
            width: 1
            read: true
            write: false
            type: I2C0_IC_STATUS_TFE
          - name: RFNE
            description: 'Receive FIFO Not Empty. This bit is set when the receive
              FIFO contains one or more entries; it is cleared when the receive FIFO
              is empty. - 0: Receive FIFO is empty - 1: Receive FIFO is not empty
              Reset value: 0x0'
            index: 3
            width: 1
            read: true
            write: false
            type: I2C0_IC_STATUS_RFNE
          - name: RFF
            description: 'Receive FIFO Completely Full. When the receive FIFO is completely
              full, this bit is set. When the receive FIFO contains one or more empty
              location, this bit is cleared. - 0: Receive FIFO is not full - 1: Receive
              FIFO is full Reset value: 0x0'
            index: 4
            width: 1
            read: true
            write: false
            type: I2C0_IC_STATUS_RFF
          - name: MST_ACTIVITY
            description: "Master FSM Activity Status. When the Master Finite State
              Machine (FSM) is not in the IDLE state, this bit is set. - 0: Master
              FSM is in IDLE state so the Master part of DW_apb_i2c is not Active
              - 1: Master FSM is not in IDLE state so the Master part of DW_apb_i2c
              is Active Note: IC_STATUS[0]-that is, ACTIVITY bit-is the OR of SLV_ACTIVITY
              and MST_ACTIVITY bits.\\n\\n\n                Reset value: 0x0"
            index: 5
            width: 1
            read: true
            write: false
            type: I2C0_IC_STATUS_MST_ACTIVITY
          - name: SLV_ACTIVITY
            description: 'Slave FSM Activity Status. When the Slave Finite State Machine
              (FSM) is not in the IDLE state, this bit is set. - 0: Slave FSM is in
              IDLE state so the Slave part of DW_apb_i2c is not Active - 1: Slave
              FSM is not in IDLE state so the Slave part of DW_apb_i2c is Active Reset
              value: 0x0'
            index: 6
            width: 1
            read: true
            write: false
            type: I2C0_IC_STATUS_SLV_ACTIVITY
      - name: IC_TXFLR
        type: uint32_t
        expected_size: 4
        expected_offset: 116
        const: true
        description: '(read-only) I2C Transmit FIFO Level Register This register contains
          the number of valid data entries in the transmit FIFO buffer. It is cleared
          whenever: - The I2C is disabled - There is a transmit abort - that is, TX_ABRT
          bit is set in the IC_RAW_INTR_STAT register - The slave bulk transmit mode
          is aborted The register increments whenever data is placed into the transmit
          FIFO and decrements when data is taken from the transmit FIFO.'
        fields:
          - name: TXFLR
            description: "Transmit FIFO Level. Contains the number of valid data entries
              in the transmit FIFO.\\n\\n\n                Reset value: 0x0"
            index: 0
            width: 5
            read: true
            write: false
      - name: IC_RXFLR
        type: uint32_t
        expected_size: 4
        expected_offset: 120
        const: true
        description: '(read-only) I2C Receive FIFO Level Register This register contains
          the number of valid data entries in the receive FIFO buffer. It is cleared
          whenever: - The I2C is disabled - Whenever there is a transmit abort caused
          by any of the events tracked in IC_TX_ABRT_SOURCE The register increments
          whenever data is placed into the receive FIFO and decrements when data is
          taken from the receive FIFO.'
        fields:
          - name: RXFLR
            description: "Receive FIFO Level. Contains the number of valid data entries
              in the receive FIFO.\\n\\n\n                Reset value: 0x0"
            index: 0
            width: 5
            read: true
            write: false
      - name: IC_SDA_HOLD
        type: uint32_t
        expected_size: 4
        expected_offset: 124
        description: "(read-write) I2C SDA Hold Time Length Register\\n\\n\n     \
          \       The bits [15:0] of this register are used to control the hold time
          of SDA during transmit in both slave and master mode (after SCL goes from
          HIGH to LOW).\\n\\n\n            The bits [23:16] of this register are used
          to extend the SDA transition (if any) whenever SCL is HIGH in the receiver
          in either master or slave mode.\\n\\n\n            Writes to this register
          succeed only when IC_ENABLE[0]=0.\\n\\n\n            The values in this
          register are in units of ic_clk period. The value programmed in IC_SDA_TX_HOLD
          must be greater than the minimum hold time in each mode (one cycle in master
          mode, seven cycles in slave mode) for the value to be implemented.\\n\\\
          n\n            The programmed SDA hold time during transmit (IC_SDA_TX_HOLD)
          cannot exceed at any time the duration of the low part of scl. Therefore
          the programmed value cannot be larger than N_SCL_LOW-2, where N_SCL_LOW
          is the duration of the low part of the scl period measured in ic_clk cycles."
        fields:
          - name: IC_SDA_TX_HOLD
            description: "Sets the required SDA hold time in units of ic_clk period,
              when DW_apb_i2c acts as a transmitter.\\n\\n\n                Reset
              value: IC_DEFAULT_SDA_HOLD[15:0]."
            index: 0
            width: 16
            read: true
            write: true
          - name: IC_SDA_RX_HOLD
            description: "Sets the required SDA hold time in units of ic_clk period,
              when DW_apb_i2c acts as a receiver.\\n\\n\n                Reset value:
              IC_DEFAULT_SDA_HOLD[23:16]."
            index: 16
            width: 8
            read: true
            write: true
      - name: IC_TX_ABRT_SOURCE
        type: uint32_t
        expected_size: 4
        expected_offset: 128
        const: true
        description: "(read-only) I2C Transmit Abort Source Register\\n\\n\n     \
          \       This register has 32 bits that indicate the source of the TX_ABRT
          bit. Except for Bit 9, this register is cleared whenever the IC_CLR_TX_ABRT
          register or the IC_CLR_INTR register is read. To clear Bit 9, the source
          of the ABRT_SBYTE_NORSTRT must be fixed first; RESTART must be enabled (IC_CON[5]=1),
          the SPECIAL bit must be cleared (IC_TAR[11]), or the GC_OR_START bit must
          be cleared (IC_TAR[10]).\\n\\n\n            Once the source of the ABRT_SBYTE_NORSTRT
          is fixed, then this bit can be cleared in the same manner as other bits
          in this register. If the source of the ABRT_SBYTE_NORSTRT is not fixed before
          attempting to clear this bit, Bit 9 clears for one cycle and is then re-asserted."
        fields:
          - name: ABRT_7B_ADDR_NOACK
            description: "This field indicates that the Master is in 7-bit addressing
              mode and the address sent was not acknowledged by any slave.\\n\\n\n\
              \                Reset value: 0x0\\n\\n\n                Role of DW_apb_i2c:\
              \  Master-Transmitter or Master-Receiver"
            index: 0
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK
          - name: ABRT_10ADDR1_NOACK
            description: "This field indicates that the Master is in 10-bit address
              mode and the first 10-bit address byte was not acknowledged by any slave.\\\
              n\\n\n                Reset value: 0x0\\n\\n\n                Role of
              DW_apb_i2c:  Master-Transmitter or Master-Receiver"
            index: 1
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK
          - name: ABRT_10ADDR2_NOACK
            description: "This field indicates that the Master is in 10-bit address
              mode and that the second address byte of the 10-bit address was not
              acknowledged by any slave.\\n\\n\n                Reset value: 0x0\\\
              n\\n\n                Role of DW_apb_i2c:  Master-Transmitter or Master-Receiver"
            index: 2
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK
          - name: ABRT_TXDATA_NOACK
            description: "This field indicates the master-mode only bit. When the
              master receives an acknowledgement for the address, but when it sends
              data byte(s) following the address, it did not receive an acknowledge
              from the remote slave(s).\\n\\n\n                Reset value: 0x0\\\
              n\\n\n                Role of DW_apb_i2c:  Master-Transmitter"
            index: 3
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK
          - name: ABRT_GCALL_NOACK
            description: "This field indicates that DW_apb_i2c in master mode has
              sent a General Call and no slave on the bus acknowledged the General
              Call.\\n\\n\n                Reset value: 0x0\\n\\n\n              \
              \  Role of DW_apb_i2c:  Master-Transmitter"
            index: 4
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK
          - name: ABRT_GCALL_READ
            description: "This field indicates that DW_apb_i2c in the master mode
              has sent a General Call but the user programmed the byte following the
              General Call to be a read from the bus (IC_DATA_CMD[9] is set to 1).\\\
              n\\n\n                Reset value: 0x0\\n\\n\n                Role of
              DW_apb_i2c:  Master-Transmitter"
            index: 5
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ
          - name: ABRT_HS_ACKDET
            description: "This field indicates that the Master is in High Speed mode
              and the High Speed Master code was acknowledged (wrong behavior).\\\
              n\\n\n                Reset value: 0x0\\n\\n\n                Role of
              DW_apb_i2c:  Master"
            index: 6
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET
          - name: ABRT_SBYTE_ACKDET
            description: "This field indicates that the Master has sent a START Byte
              and the START Byte was acknowledged (wrong behavior).\\n\\n\n      \
              \          Reset value: 0x0\\n\\n\n                Role of DW_apb_i2c:\
              \  Master"
            index: 7
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET
          - name: ABRT_HS_NORSTRT
            description: "This field indicates that the restart is disabled (IC_RESTART_EN
              bit (IC_CON[5]) =0) and the user is trying to use the master to transfer
              data in High Speed mode.\\n\\n\n                Reset value: 0x0\\n\\\
              n\n                Role of DW_apb_i2c:  Master-Transmitter or Master-Receiver"
            index: 8
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT
          - name: ABRT_SBYTE_NORSTRT
            description: "To clear Bit 9, the source of the ABRT_SBYTE_NORSTRT must
              be fixed first; restart must be enabled (IC_CON[5]=1), the SPECIAL bit
              must be cleared (IC_TAR[11]), or the GC_OR_START bit must be cleared
              (IC_TAR[10]). Once the source of the ABRT_SBYTE_NORSTRT is fixed, then
              this bit can be cleared in the same manner as other bits in this register.
              If the source of the ABRT_SBYTE_NORSTRT is not fixed before attempting
              to clear this bit, bit 9 clears for one cycle and then gets reasserted.
              When this field is set to 1, the restart is disabled (IC_RESTART_EN
              bit (IC_CON[5]) =0) and the user is trying to send a START Byte.\\n\\\
              n\n                Reset value: 0x0\\n\\n\n                Role of DW_apb_i2c:\
              \  Master"
            index: 9
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT
          - name: ABRT_10B_RD_NORSTRT
            description: "This field indicates that the restart is disabled (IC_RESTART_EN
              bit (IC_CON[5]) =0) and the master sends a read command in 10-bit addressing
              mode.\\n\\n\n                Reset value: 0x0\\n\\n\n              \
              \  Role of DW_apb_i2c:  Master-Receiver"
            index: 10
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT
          - name: ABRT_MASTER_DIS
            description: "This field indicates that the User tries to initiate a Master
              operation with the Master mode disabled.\\n\\n\n                Reset
              value: 0x0\\n\\n\n                Role of DW_apb_i2c:  Master-Transmitter
              or Master-Receiver"
            index: 11
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS
          - name: ARB_LOST
            description: "This field specifies that the Master has lost arbitration,
              or if IC_TX_ABRT_SOURCE[14] is also set, then the slave transmitter
              has lost arbitration.\\n\\n\n                Reset value: 0x0\\n\\n\n\
              \                Role of DW_apb_i2c:  Master-Transmitter or Slave-Transmitter"
            index: 12
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ARB_LOST
          - name: ABRT_SLVFLUSH_TXFIFO
            description: "This field specifies that the Slave has received a read
              command and some data exists in the TX FIFO, so the slave issues a TX_ABRT
              interrupt to flush old data in TX FIFO.\\n\\n\n                Reset
              value: 0x0\\n\\n\n                Role of DW_apb_i2c:  Slave-Transmitter"
            index: 13
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO
          - name: ABRT_SLV_ARBLOST
            description: "This field indicates that a Slave has lost the bus while
              transmitting data to a remote master. IC_TX_ABRT_SOURCE[12] is set at
              the same time. Note:  Even though the slave never 'owns' the bus, something
              could go wrong on the bus. This is a fail safe check. For instance,
              during a data transmission at the low-to-high transition of SCL, if
              what is on the data bus is not what is supposed to be transmitted, then
              DW_apb_i2c no longer own the bus.\\n\\n\n                Reset value:
              0x0\\n\\n\n                Role of DW_apb_i2c:  Slave-Transmitter"
            index: 14
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST
          - name: ABRT_SLVRD_INTX
            description: "1: When the processor side responds to a slave mode request
              for data to be transmitted to a remote master and user writes a 1 in
              CMD (bit 8) of IC_DATA_CMD register.\\n\\n\n                Reset value:
              0x0\\n\\n\n                Role of DW_apb_i2c:  Slave-Transmitter"
            index: 15
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX
          - name: ABRT_USER_ABRT
            description: "This is a master-mode-only bit. Master has detected the
              transfer abort (IC_ENABLE[1])\\n\\n\n                Reset value: 0x0\\\
              n\\n\n                Role of DW_apb_i2c:  Master-Transmitter"
            index: 16
            width: 1
            read: true
            write: false
            type: I2C0_IC_TX_ABRT_SOURCE_ABRT_USER_ABRT
          - name: TX_FLUSH_CNT
            description: "This field indicates the number of Tx FIFO Data Commands
              which are flushed due to TX_ABRT interrupt. It is cleared whenever I2C
              is disabled.\\n\\n\n                Reset value: 0x0\\n\\n\n       \
              \         Role of DW_apb_i2c:  Master-Transmitter or Slave-Transmitter"
            index: 23
            width: 9
            read: true
            write: false
      - name: IC_SLV_DATA_NACK_ONLY
        type: uint32_t
        expected_size: 4
        expected_offset: 132
        description: "(read-write) Generate Slave Data NACK Register\\n\\n\n     \
          \       The register is used to generate a NACK for the data part of a transfer
          when DW_apb_i2c is acting as a slave-receiver. This register only exists
          when the IC_SLV_DATA_NACK_ONLY parameter is set to 1. When this parameter
          disabled, this register does not exist and writing to the register's address
          has no effect.\\n\\n\n            A write can occur on this register if
          both of the following conditions are met: - DW_apb_i2c is disabled (IC_ENABLE[0]
          = 0) - Slave part is inactive (IC_STATUS[6] = 0) Note: The IC_STATUS[6]
          is a register read-back location for the internal slv_activity signal; the
          user should poll this before writing the ic_slv_data_nack_only bit."
        fields:
          - name: NACK
            description: "Generate NACK. This NACK generation only occurs when DW_apb_i2c
              is a slave-receiver. If this register is set to a value of 1, it can
              only generate a NACK after a data byte is received; hence, the data
              transfer is aborted and the data received is not pushed to the receive
              buffer.\\n\\n\n                When the register is set to a value of
              0, it generates NACK/ACK, depending on normal criteria. - 1: generate
              NACK after data byte received - 0: generate NACK/ACK normally Reset
              value: 0x0"
            index: 0
            width: 1
            read: true
            write: true
            type: I2C0_IC_SLV_DATA_NACK_ONLY_NACK
      - name: IC_DMA_CR
        type: uint32_t
        expected_size: 4
        expected_offset: 136
        description: "(read-write) DMA Control Register\\n\\n\n            The register
          is used to enable the DMA Controller interface operation. There is a separate
          bit for transmit and receive. This can be programmed regardless of the state
          of IC_ENABLE."
        fields:
          - name: RDMAE
            description: 'Receive DMA Enable. This bit enables/disables the receive
              FIFO DMA channel. Reset value: 0x0'
            index: 0
            width: 1
            read: true
            write: true
            type: I2C0_IC_DMA_CR_RDMAE
          - name: TDMAE
            description: 'Transmit DMA Enable. This bit enables/disables the transmit
              FIFO DMA channel. Reset value: 0x0'
            index: 1
            width: 1
            read: true
            write: true
            type: I2C0_IC_DMA_CR_TDMAE
      - name: IC_DMA_TDLR
        type: uint32_t
        expected_size: 4
        expected_offset: 140
        description: (read-write) DMA Transmit Data Level Register
        fields:
          - name: DMATDL
            description: "Transmit Data Level. This bit field controls the level at
              which a DMA request is made by the transmit logic. It is equal to the
              watermark level; that is, the dma_tx_req signal is generated when the
              number of valid data entries in the transmit FIFO is equal to or below
              this field value, and TDMAE = 1.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 4
            read: true
            write: true
      - name: IC_DMA_RDLR
        type: uint32_t
        expected_size: 4
        expected_offset: 144
        description: (read-write) I2C Receive Data Level Register
        fields:
          - name: DMARDL
            description: "Receive Data Level. This bit field controls the level at
              which a DMA request is made by the receive logic. The watermark level
              = DMARDL+1; that is, dma_rx_req is generated when the number of valid
              data entries in the receive FIFO is equal to or more than this field
              value + 1, and RDMAE =1. For instance, when DMARDL is 0, then dma_rx_req
              is asserted when 1 or more data entries are present in the receive FIFO.\\\
              n\\n\n                Reset value: 0x0"
            index: 0
            width: 4
            read: true
            write: true
      - name: IC_SDA_SETUP
        type: uint32_t
        expected_size: 4
        expected_offset: 148
        description: "(read-write) I2C SDA Setup Register\\n\\n\n            This
          register controls the amount of time delay (in terms of number of ic_clk
          clock periods) introduced in the rising edge of SCL - relative to SDA changing
          - when DW_apb_i2c services a read request in a slave-transmitter operation.
          The relevant I2C requirement is tSU:DAT (note 4) as detailed in the I2C
          Bus Specification. This register must be programmed with a value equal to
          or greater than 2.\\n\\n\n            Writes to this register succeed only
          when IC_ENABLE[0] = 0.\\n\\n\n            Note: The length of setup time
          is calculated using [(IC_SDA_SETUP - 1) * (ic_clk_period)], so if the user
          requires 10 ic_clk periods of setup time, they should program a value of
          11. The IC_SDA_SETUP register is only used by the DW_apb_i2c when operating
          as a slave transmitter."
        fields:
          - name: SDA_SETUP
            description: SDA Setup. It is recommended that if the required delay is
              1000ns, then for an ic_clk frequency of 10 MHz, IC_SDA_SETUP should
              be programmed to a value of 11. IC_SDA_SETUP must be programmed with
              a minimum value of 2.
            index: 0
            width: 8
            read: true
            write: true
      - name: IC_ACK_GENERAL_CALL
        type: uint32_t
        expected_size: 4
        expected_offset: 152
        description: "(read-write) I2C ACK General Call Register\\n\\n\n         \
          \   The register controls whether DW_apb_i2c responds with a ACK or NACK
          when it receives an I2C General Call address.\\n\\n\n            This register
          is applicable only when the DW_apb_i2c is in slave mode."
        fields:
          - name: ACK_GEN_CALL
            description: ACK General Call. When set to 1, DW_apb_i2c responds with
              a ACK (by asserting ic_data_oe) when it receives a General Call. Otherwise,
              DW_apb_i2c responds with a NACK (by negating ic_data_oe).
            index: 0
            width: 1
            read: true
            write: true
            type: I2C0_IC_ACK_GENERAL_CALL_ACK_GEN_CALL
      - name: IC_ENABLE_STATUS
        type: uint32_t
        expected_size: 4
        expected_offset: 156
        const: true
        description: "(read-only) I2C Enable Status Register\\n\\n\n            The
          register is used to report the DW_apb_i2c hardware status when the IC_ENABLE[0]
          register is set from 1 to 0; that is, when DW_apb_i2c is disabled.\\n\\\
          n\n            If IC_ENABLE[0] has been set to 1, bits 2:1 are forced to
          0, and bit 0 is forced to 1.\\n\\n\n            If IC_ENABLE[0] has been
          set to 0, bits 2:1 is only be valid as soon as bit 0 is read as '0'.\\n\\\
          n\n            Note: When IC_ENABLE[0] has been set to 0, a delay occurs
          for bit 0 to be read as 0 because disabling the DW_apb_i2c depends on I2C
          bus activities."
        fields:
          - name: IC_EN
            description: "ic_en Status. This bit always reflects the value driven
              on the output port ic_en. - When read as 1, DW_apb_i2c is deemed to
              be in an enabled state. - When read as 0, DW_apb_i2c is deemed completely
              inactive. Note:  The CPU can safely read this bit anytime. When this
              bit is read as 0, the CPU can safely read SLV_RX_DATA_LOST (bit 2) and
              SLV_DISABLED_WHILE_BUSY (bit 1).\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
            type: I2C0_IC_ENABLE_STATUS_IC_EN
          - name: SLV_DISABLED_WHILE_BUSY
            description: "Slave Disabled While Busy (Transmit, Receive). This bit
              indicates if a potential or active Slave operation has been aborted
              due to the setting bit 0 of the IC_ENABLE register from 1 to 0. This
              bit is set when the CPU writes a 0 to the IC_ENABLE register while:\\\
              n\\n\n                (a) DW_apb_i2c is receiving the address byte of
              the Slave-Transmitter operation from a remote master;\\n\\n\n      \
              \          OR,\\n\\n\n                (b) address and data bytes of
              the Slave-Receiver operation from a remote master.\\n\\n\n         \
              \       When read as 1, DW_apb_i2c is deemed to have forced a NACK during
              any part of an I2C transfer, irrespective of whether the I2C address
              matches the slave address set in DW_apb_i2c (IC_SAR register) OR if
              the transfer is completed before IC_ENABLE is set to 0 but has not taken
              effect.\\n\\n\n                Note:  If the remote I2C master terminates
              the transfer with a STOP condition before the DW_apb_i2c has a chance
              to NACK a transfer, and IC_ENABLE[0] has been set to 0, then this bit
              will also be set to 1.\\n\\n\n                When read as 0, DW_apb_i2c
              is deemed to have been disabled when there is master activity, or when
              the I2C bus is idle.\\n\\n\n                Note:  The CPU can safely
              read this bit when IC_EN (bit 0) is read as 0.\\n\\n\n             \
              \   Reset value: 0x0"
            index: 1
            width: 1
            read: true
            write: false
            type: I2C0_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY
          - name: SLV_RX_DATA_LOST
            description: "Slave Received Data Lost. This bit indicates if a Slave-Receiver
              operation has been aborted with at least one data byte received from
              an I2C transfer due to the setting bit 0 of IC_ENABLE from 1 to 0. When
              read as 1, DW_apb_i2c is deemed to have been actively engaged in an
              aborted I2C transfer (with matching address) and the data phase of the
              I2C transfer has been entered, even though a data byte has been responded
              with a NACK.\\n\\n\n                Note:  If the remote I2C master
              terminates the transfer with a STOP condition before the DW_apb_i2c
              has a chance to NACK a transfer, and IC_ENABLE[0] has been set to 0,
              then this bit is also set to 1.\\n\\n\n                When read as
              0, DW_apb_i2c is deemed to have been disabled without being actively
              involved in the data phase of a Slave-Receiver transfer.\\n\\n\n   \
              \             Note:  The CPU can safely read this bit when IC_EN (bit
              0) is read as 0.\\n\\n\n                Reset value: 0x0"
            index: 2
            width: 1
            read: true
            write: false
            type: I2C0_IC_ENABLE_STATUS_SLV_RX_DATA_LOST
      - name: IC_FS_SPKLEN
        type: uint32_t
        expected_size: 4
        expected_offset: 160
        description: "(read-write) I2C SS, FS or FM+ spike suppression limit\\n\\\
          n\n            This register is used to store the duration, measured in
          ic_clk cycles, of the longest spike that is filtered out by the spike suppression
          logic when the component is operating in SS, FS or FM+ modes. The relevant
          I2C requirement is tSP (table 4) as detailed in the I2C Bus Specification.
          This register must be programmed with a minimum value of 1."
        fields:
          - name: IC_FS_SPKLEN
            description: This register must be set before any I2C bus transaction
              can take place to ensure stable operation. This register sets the duration,
              measured in ic_clk cycles, of the longest spike in the SCL or SDA lines
              that will be filtered out by the spike suppression logic. This register
              can be written only when the I2C interface is disabled which corresponds
              to the IC_ENABLE[0] register being set to 0. Writes at other times have
              no effect. The minimum valid value is 1; hardware prevents values less
              than this being written, and if attempted results in 1 being set. or
              more information, refer to 'Spike Suppression'.
            index: 0
            width: 8
            read: true
            write: true
      - name: IC_CLR_RESTART_DET
        type: uint32_t
        expected_size: 4
        expected_offset: 168
        const: true
        description: (read-only) Clear RESTART_DET Interrupt Register
        fields:
          - name: CLR_RESTART_DET
            description: "Read this register to clear the RESTART_DET interrupt (bit
              12) of IC_RAW_INTR_STAT register.\\n\\n\n                Reset value:
              0x0"
            index: 0
            width: 1
            read: true
            write: false
      - name: IC_COMP_PARAM_1
        type: uint32_t
        expected_size: 4
        expected_offset: 244
        const: true
        description: "(read-only) Component Parameter Register 1\\n\\n\n         \
          \   Note This register is not implemented and therefore reads as 0. If it
          was implemented it would be a constant read-only register that contains
          encoded information about the component's parameter settings. Fields shown
          below are the settings for those parameters"
        fields:
          - name: APB_DATA_WIDTH
            description: APB data bus width is 32 bits
            index: 0
            width: 2
            read: true
            write: false
          - name: MAX_SPEED_MODE
            description: MAX SPEED MODE = FAST MODE
            index: 2
            width: 2
            read: true
            write: false
          - name: HC_COUNT_VALUES
            description: Programmable count values for each mode.
            index: 4
            width: 1
            read: true
            write: false
          - name: INTR_IO
            description: COMBINED Interrupt outputs
            index: 5
            width: 1
            read: true
            write: false
          - name: HAS_DMA
            description: DMA handshaking signals are enabled
            index: 6
            width: 1
            read: true
            write: false
          - name: ADD_ENCODED_PARAMS
            description: Encoded parameters not visible
            index: 7
            width: 1
            read: true
            write: false
          - name: RX_BUFFER_DEPTH
            description: RX Buffer Depth = 16
            index: 8
            width: 8
            read: true
            write: false
          - name: TX_BUFFER_DEPTH
            description: TX Buffer Depth = 16
            index: 16
            width: 8
            read: true
            write: false
      - name: IC_COMP_VERSION
        type: uint32_t
        expected_size: 4
        expected_offset: 248
        const: true
        description: (read-only) I2C Component Version Register
        fields:
          - name: IC_COMP_VERSION
            index: 0
            width: 32
            read: true
            write: false
      - name: IC_COMP_TYPE
        type: uint32_t
        expected_size: 4
        expected_offset: 252
        const: true
        description: (read-only) I2C Component Type Register
        fields:
          - name: IC_COMP_TYPE
            description: Designware Component Type number = 0x44_57_01_40. This assigned
              unique hex value is constant and is derived from the two ASCII letters
              'DW' followed by a 16-bit unsigned number.
            index: 0
            width: 32
            read: true
            write: false
    stream: false
    codec: false
    methods: false
    unit_test: false
    identifier: false
enums:
  I2C0_IC_CON_MASTER_MODE:
    enum:
      DISABLED:
        description: Master mode is disabled
        value: 0
      ENABLED:
        description: Master mode is enabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_SPEED:
    enum:
      STANDARD:
        description: Standard Speed mode of operation
        value: 1
      FAST:
        description: Fast or Fast Plus mode of operation
        value: 2
      HIGH:
        description: High Speed mode of operation
        value: 3
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_IC_10BITADDR_SLAVE:
    enum:
      ADDR_7BITS:
        description: Slave 7Bit addressing
        value: 0
      ADDR_10BITS:
        description: Slave 10Bit addressing
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_IC_10BITADDR_MASTER:
    enum:
      ADDR_7BITS:
        description: Master 7Bit addressing mode
        value: 0
      ADDR_10BITS:
        description: Master 10Bit addressing mode
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_IC_RESTART_EN:
    enum:
      DISABLED:
        description: Master restart disabled
        value: 0
      ENABLED:
        description: Master restart enabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_IC_SLAVE_DISABLE:
    enum:
      SLAVE_ENABLED:
        description: Slave mode is enabled
        value: 0
      SLAVE_DISABLED:
        description: Slave mode is disabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_STOP_DET_IFADDRESSED:
    enum:
      DISABLED:
        description: slave issues STOP_DET intr always
        value: 0
      ENABLED:
        description: slave issues STOP_DET intr only if addressed
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_TX_EMPTY_CTRL:
    enum:
      DISABLED:
        description: Default behaviour of TX_EMPTY interrupt
        value: 0
      ENABLED:
        description: Controlled generation of TX_EMPTY interrupt
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_CON_RX_FIFO_FULL_HLD_CTRL:
    enum:
      DISABLED:
        description: Overflow when RX_FIFO is full
        value: 0
      ENABLED:
        description: Hold bus when RX_FIFO is full
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TAR_GC_OR_START:
    enum:
      GENERAL_CALL:
        description: GENERAL_CALL byte transmission
        value: 0
      START_BYTE:
        description: START byte transmission
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TAR_SPECIAL:
    enum:
      DISABLED:
        description: Disables programming of GENERAL_CALL or START_BYTE transmission
        value: 0
      ENABLED:
        description: Enables programming of GENERAL_CALL or START_BYTE transmission
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_DATA_CMD_CMD:
    enum:
      WRITE:
        description: Master Write Command
        value: 0
      READ:
        description: Master Read Command
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_DATA_CMD_STOP:
    enum:
      DISABLE:
        description: Don't Issue STOP after this command
        value: 0
      ENABLE:
        description: Issue STOP after this command
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_DATA_CMD_RESTART:
    enum:
      DISABLE:
        description: Don't Issue RESTART before this command
        value: 0
      ENABLE:
        description: Issue RESTART before this command
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_DATA_CMD_FIRST_DATA_BYTE:
    enum:
      INACTIVE:
        description: Sequential data byte received
        value: 0
      ACTIVE:
        description: Non sequential data byte received
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_RX_UNDER:
    enum:
      INACTIVE:
        description: RX_UNDER interrupt is inactive
        value: 0
      ACTIVE:
        description: RX_UNDER interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_RX_OVER:
    enum:
      INACTIVE:
        description: R_RX_OVER interrupt is inactive
        value: 0
      ACTIVE:
        description: R_RX_OVER interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_RX_FULL:
    enum:
      INACTIVE:
        description: R_RX_FULL interrupt is inactive
        value: 0
      ACTIVE:
        description: R_RX_FULL interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_TX_OVER:
    enum:
      INACTIVE:
        description: R_TX_OVER interrupt is inactive
        value: 0
      ACTIVE:
        description: R_TX_OVER interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_TX_EMPTY:
    enum:
      INACTIVE:
        description: R_TX_EMPTY interrupt is inactive
        value: 0
      ACTIVE:
        description: R_TX_EMPTY interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_RD_REQ:
    enum:
      INACTIVE:
        description: R_RD_REQ interrupt is inactive
        value: 0
      ACTIVE:
        description: R_RD_REQ interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_TX_ABRT:
    enum:
      INACTIVE:
        description: R_TX_ABRT interrupt is inactive
        value: 0
      ACTIVE:
        description: R_TX_ABRT interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_RX_DONE:
    enum:
      INACTIVE:
        description: R_RX_DONE interrupt is inactive
        value: 0
      ACTIVE:
        description: R_RX_DONE interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_ACTIVITY:
    enum:
      INACTIVE:
        description: R_ACTIVITY interrupt is inactive
        value: 0
      ACTIVE:
        description: R_ACTIVITY interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_STOP_DET:
    enum:
      INACTIVE:
        description: R_STOP_DET interrupt is inactive
        value: 0
      ACTIVE:
        description: R_STOP_DET interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_START_DET:
    enum:
      INACTIVE:
        description: R_START_DET interrupt is inactive
        value: 0
      ACTIVE:
        description: R_START_DET interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_GEN_CALL:
    enum:
      INACTIVE:
        description: R_GEN_CALL interrupt is inactive
        value: 0
      ACTIVE:
        description: R_GEN_CALL interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_STAT_R_RESTART_DET:
    enum:
      INACTIVE:
        description: R_RESTART_DET interrupt is inactive
        value: 0
      ACTIVE:
        description: R_RESTART_DET interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_RX_UNDER:
    enum:
      ENABLED:
        description: RX_UNDER interrupt is masked
        value: 0
      DISABLED:
        description: RX_UNDER interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_RX_OVER:
    enum:
      ENABLED:
        description: RX_OVER interrupt is masked
        value: 0
      DISABLED:
        description: RX_OVER interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_RX_FULL:
    enum:
      ENABLED:
        description: RX_FULL interrupt is masked
        value: 0
      DISABLED:
        description: RX_FULL interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_TX_OVER:
    enum:
      ENABLED:
        description: TX_OVER interrupt is masked
        value: 0
      DISABLED:
        description: TX_OVER interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_TX_EMPTY:
    enum:
      ENABLED:
        description: TX_EMPTY interrupt is masked
        value: 0
      DISABLED:
        description: TX_EMPTY interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_RD_REQ:
    enum:
      ENABLED:
        description: RD_REQ interrupt is masked
        value: 0
      DISABLED:
        description: RD_REQ interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_TX_ABRT:
    enum:
      ENABLED:
        description: TX_ABORT interrupt is masked
        value: 0
      DISABLED:
        description: TX_ABORT interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_RX_DONE:
    enum:
      ENABLED:
        description: RX_DONE interrupt is masked
        value: 0
      DISABLED:
        description: RX_DONE interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_ACTIVITY:
    enum:
      ENABLED:
        description: ACTIVITY interrupt is masked
        value: 0
      DISABLED:
        description: ACTIVITY interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_STOP_DET:
    enum:
      ENABLED:
        description: STOP_DET interrupt is masked
        value: 0
      DISABLED:
        description: STOP_DET interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_START_DET:
    enum:
      ENABLED:
        description: START_DET interrupt is masked
        value: 0
      DISABLED:
        description: START_DET interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_GEN_CALL:
    enum:
      ENABLED:
        description: GEN_CALL interrupt is masked
        value: 0
      DISABLED:
        description: GEN_CALL interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_INTR_MASK_M_RESTART_DET:
    enum:
      ENABLED:
        description: RESTART_DET interrupt is masked
        value: 0
      DISABLED:
        description: RESTART_DET interrupt is unmasked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_RX_UNDER:
    enum:
      INACTIVE:
        description: RX_UNDER interrupt is inactive
        value: 0
      ACTIVE:
        description: RX_UNDER interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_RX_OVER:
    enum:
      INACTIVE:
        description: RX_OVER interrupt is inactive
        value: 0
      ACTIVE:
        description: RX_OVER interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_RX_FULL:
    enum:
      INACTIVE:
        description: RX_FULL interrupt is inactive
        value: 0
      ACTIVE:
        description: RX_FULL interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_TX_OVER:
    enum:
      INACTIVE:
        description: TX_OVER interrupt is inactive
        value: 0
      ACTIVE:
        description: TX_OVER interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_TX_EMPTY:
    enum:
      INACTIVE:
        description: TX_EMPTY interrupt is inactive
        value: 0
      ACTIVE:
        description: TX_EMPTY interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_RD_REQ:
    enum:
      INACTIVE:
        description: RD_REQ interrupt is inactive
        value: 0
      ACTIVE:
        description: RD_REQ interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_TX_ABRT:
    enum:
      INACTIVE:
        description: TX_ABRT interrupt is inactive
        value: 0
      ACTIVE:
        description: TX_ABRT interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_RX_DONE:
    enum:
      INACTIVE:
        description: RX_DONE interrupt is inactive
        value: 0
      ACTIVE:
        description: RX_DONE interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_ACTIVITY:
    enum:
      INACTIVE:
        description: RAW_INTR_ACTIVITY interrupt is inactive
        value: 0
      ACTIVE:
        description: RAW_INTR_ACTIVITY interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_STOP_DET:
    enum:
      INACTIVE:
        description: STOP_DET interrupt is inactive
        value: 0
      ACTIVE:
        description: STOP_DET interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_START_DET:
    enum:
      INACTIVE:
        description: START_DET interrupt is inactive
        value: 0
      ACTIVE:
        description: START_DET interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_GEN_CALL:
    enum:
      INACTIVE:
        description: GEN_CALL interrupt is inactive
        value: 0
      ACTIVE:
        description: GEN_CALL interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_RAW_INTR_STAT_RESTART_DET:
    enum:
      INACTIVE:
        description: RESTART_DET interrupt is inactive
        value: 0
      ACTIVE:
        description: RESTART_DET interrupt is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_ENABLE_ENABLE:
    enum:
      DISABLED:
        description: I2C is disabled
        value: 0
      ENABLED:
        description: I2C is enabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_ENABLE_ABORT:
    enum:
      DISABLE:
        description: ABORT operation not in progress
        value: 0
      ENABLED:
        description: ABORT operation in progress
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_ENABLE_TX_CMD_BLOCK:
    enum:
      NOT_BLOCKED:
        description: Tx Command execution not blocked
        value: 0
      BLOCKED:
        description: Tx Command execution blocked
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_STATUS_ACTIVITY:
    enum:
      INACTIVE:
        description: I2C is idle
        value: 0
      ACTIVE:
        description: I2C is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_STATUS_TFNF:
    enum:
      FULL:
        description: Tx FIFO is full
        value: 0
      NOT_FULL:
        description: Tx FIFO not full
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_STATUS_TFE:
    enum:
      NON_EMPTY:
        description: Tx FIFO not empty
        value: 0
      EMPTY:
        description: Tx FIFO is empty
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_STATUS_RFNE:
    enum:
      EMPTY:
        description: Rx FIFO is empty
        value: 0
      NOT_EMPTY:
        description: Rx FIFO not empty
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_STATUS_RFF:
    enum:
      NOT_FULL:
        description: Rx FIFO not full
        value: 0
      FULL:
        description: Rx FIFO is full
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_STATUS_MST_ACTIVITY:
    enum:
      IDLE:
        description: Master is idle
        value: 0
      ACTIVE:
        description: Master not idle
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_STATUS_SLV_ACTIVITY:
    enum:
      IDLE:
        description: Slave is idle
        value: 0
      ACTIVE:
        description: Slave not idle
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK:
    enum:
      INACTIVE:
        description: This abort is not generated
        value: 0
      ACTIVE:
        description: This abort is generated because of NOACK for 7-bit address
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK:
    enum:
      INACTIVE:
        description: This abort is not generated
        value: 0
      ACTIVE:
        description: Byte 1 of 10Bit Address not ACKed by any slave
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK:
    enum:
      INACTIVE:
        description: This abort is not generated
        value: 0
      ACTIVE:
        description: Byte 2 of 10Bit Address not ACKed by any slave
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK:
    enum:
      ABRT_TXDATA_NOACK_VOID:
        description: Transmitted data non-ACKed by addressed slave-scenario not present
        value: 0
      ABRT_TXDATA_NOACK_GENERATED:
        description: Transmitted data not ACKed by addressed slave
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK:
    enum:
      ABRT_GCALL_NOACK_VOID:
        description: GCALL not ACKed by any slave-scenario not present
        value: 0
      ABRT_GCALL_NOACK_GENERATED:
        description: GCALL not ACKed by any slave
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ:
    enum:
      ABRT_GCALL_READ_VOID:
        description: GCALL is followed by read from bus-scenario not present
        value: 0
      ABRT_GCALL_READ_GENERATED:
        description: GCALL is followed by read from bus
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET:
    enum:
      ABRT_HS_ACK_VOID:
        description: HS Master code ACKed in HS Mode- scenario not present
        value: 0
      ABRT_HS_ACK_GENERATED:
        description: HS Master code ACKed in HS Mode
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET:
    enum:
      ABRT_SBYTE_ACKDET_VOID:
        description: ACK detected for START byte- scenario not present
        value: 0
      ABRT_SBYTE_ACKDET_GENERATED:
        description: ACK detected for START byte
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT:
    enum:
      ABRT_HS_NORSTRT_VOID:
        description: User trying to switch Master to HS mode when RESTART disabled-
          scenario not present
        value: 0
      ABRT_HS_NORSTRT_GENERATED:
        description: User trying to switch Master to HS mode when RESTART disabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT:
    enum:
      ABRT_SBYTE_NORSTRT_VOID:
        description: User trying to send START byte when RESTART disabled- scenario
          not present
        value: 0
      ABRT_SBYTE_NORSTRT_GENERATED:
        description: User trying to send START byte when RESTART disabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT:
    enum:
      ABRT_10B_RD_VOID:
        description: Master not trying to read in 10Bit addressing mode when RESTART
          disabled
        value: 0
      ABRT_10B_RD_GENERATED:
        description: Master trying to read in 10Bit addressing mode when RESTART disabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS:
    enum:
      ABRT_MASTER_DIS_VOID:
        description: User initiating master operation when MASTER disabled- scenario
          not present
        value: 0
      ABRT_MASTER_DIS_GENERATED:
        description: User initiating master operation when MASTER disabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ARB_LOST:
    enum:
      ABRT_LOST_VOID:
        description: Master or Slave-Transmitter lost arbitration- scenario not present
        value: 0
      ABRT_LOST_GENERATED:
        description: Master or Slave-Transmitter lost arbitration
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO:
    enum:
      ABRT_SLVFLUSH_TXFIFO_VOID:
        description: Slave flushes existing data in TX-FIFO upon getting read command-
          scenario not present
        value: 0
      ABRT_SLVFLUSH_TXFIFO_GENERATED:
        description: Slave flushes existing data in TX-FIFO upon getting read command
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST:
    enum:
      ABRT_SLV_ARBLOST_VOID:
        description: Slave lost arbitration to remote master- scenario not present
        value: 0
      ABRT_SLV_ARBLOST_GENERATED:
        description: Slave lost arbitration to remote master
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX:
    enum:
      ABRT_SLVRD_INTX_VOID:
        description: Slave trying to transmit to remote master in read mode- scenario
          not present
        value: 0
      ABRT_SLVRD_INTX_GENERATED:
        description: Slave trying to transmit to remote master in read mode
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_TX_ABRT_SOURCE_ABRT_USER_ABRT:
    enum:
      ABRT_USER_ABRT_VOID:
        description: Transfer abort detected by master- scenario not present
        value: 0
      ABRT_USER_ABRT_GENERATED:
        description: Transfer abort detected by master
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_SLV_DATA_NACK_ONLY_NACK:
    enum:
      DISABLED:
        description: Slave receiver generates NACK normally
        value: 0
      ENABLED:
        description: Slave receiver generates NACK upon data reception only
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_DMA_CR_RDMAE:
    enum:
      DISABLED:
        description: Receive FIFO DMA channel disabled
        value: 0
      ENABLED:
        description: Receive FIFO DMA channel enabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_DMA_CR_TDMAE:
    enum:
      DISABLED:
        description: transmit FIFO DMA channel disabled
        value: 0
      ENABLED:
        description: Transmit FIFO DMA channel enabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_ACK_GENERAL_CALL_ACK_GEN_CALL:
    enum:
      DISABLED:
        description: Generate NACK for a General Call
        value: 0
      ENABLED:
        description: Generate ACK for a General Call
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_ENABLE_STATUS_IC_EN:
    enum:
      DISABLED:
        description: I2C disabled
        value: 0
      ENABLED:
        description: I2C enabled
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY:
    enum:
      INACTIVE:
        description: Slave is disabled when it is idle
        value: 0
      ACTIVE:
        description: Slave is disabled when it is active
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
  I2C0_IC_ENABLE_STATUS_SLV_RX_DATA_LOST:
    enum:
      INACTIVE:
        description: Slave RX Data is not lost
        value: 0
      ACTIVE:
        description: Slave RX Data is lost
        value: 1
    unit_test: false
    json: false
    use_map: false
    identifier: false
